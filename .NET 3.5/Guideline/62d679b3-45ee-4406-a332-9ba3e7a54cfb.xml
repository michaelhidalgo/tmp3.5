<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-244877153" Content_Hash="-140942460">
  <Metadata>
    <Id>62d679b3-45ee-4406-a332-9ba3e7a54cfb</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>機微情報をログしない</Title>
    <Category>監査とログ記録</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>行うべき事柄</h1>
  <p>ユーザーがサイトに送信した機微な情報が、意図的であるか、システム設計の副次的影響であるかに関わらずログ記録されていないことを確認します。 たとえば、ユーザーのパスワードをリセットする場合、ウェブ サーバーログにログ記録されるため (さらに中間ウェブプロキシのログの可能性もあります)、HTTP GET要求への引数として新しいパスワードを送信してはいけません。 代わりに注文管理システム内でロギングを設計する時、発送先住所、顧客名、(最重要事項として)クレジット カード番号などの 支払情報がトランザクションログに行きつかないようにしてください。</p>
  <h1>理由</h1>
  <p>ログファイルへのアクセス許可は、アプリケーション内で機微な情報を閲覧することに比べて制限が厳しくありません。 機微な情報をログに記録することで、低い特権しか与えられていないユーザーに本来アクセスできない情報の表示を許可している可能性があります。 ログファイルが攻撃者の関心を引くターゲットになることで、Attack Surface (攻撃対象領域) が増大します。</p>
  <h1>状況</h1>
  <p>アプリケーションが機微データを扱い、ログを生成する場合、このガイドラインを適用します。 ログは、ファイル、データベース、イベントログ、またはネットワークベースのものであることがあります。</p>
  <h1>対策</h1>
  <p>機微情報がログに残らないようにするのはちょっとしたケアをするだけで簡単に実施できます。 そのプロセスには次のステップに従ってください。</p>
  <ol>
    <li>
      <p>
        <strong>アプリケーションの機微データを特定してください</strong>：設計フェーズにおいてシステムが処理する全ての機微ユーザー データを一覧してください。 共に使用することで個人を特定するマルチパート登録 Credential 情報またはフィールドなどといった、組合せが重要な、複合データエレメントを含めます。 機微データは様々な書式であることがあります。 顧客名、政府発行ID番号、クレジット カードまたはその他金融機関情報、パスワード、私有鍵はすべて機微な情報の例です。 ヘルス ケアや銀行など一部の業界では、機密情報を定義する規制基準を設けています。 アプリケーションに規制要件が適用される場合、規制要件に従って機微データを識別します。 一般的に機微データは次のように定義されます。</p>
      <ul>
        <li>他のユーザーと共有すべきではない、Personally Identifiable Information、またはPersonally Identifiable Informationを取得するために使用できる情報。 <li>ユーザーが提供する情報で、アプリケーションの他のユーザーと共有することが望まれないもの。 <li>外部の信頼できる情報源から得られた情報で、ユーザーと共有することは意図されていないもの。 </li></li></li>
      </ul>
      <li>
        <p>
          <strong>機微データがログに残されないようにしてください</strong>：アプリケーションのログのアーキテクチャを設計する際に、機微データを取扱うコンポーネントに注意してください。 これらコンポーネントが機微データを収集しないようにログ システムを設計します。 システム内のトランザクションを記録する時、必要最小限の情報だけをログ記録します。 顧客からの新しい注文をログ記録する場合、時間、顧客ID、注文IDだけをログ記録します。 顧客氏名、注文商品、支払情報はトランザクション記録から再構築できるため、ログ システムから外しておくことが可能です。 </p>
        <p>しばしば問題の原因となるエラーログに特に注意を払ってください。 例外発生時、またはSQL トランザクションのロールバック時にログ イベントを作成する場合、ロギング前に、例外コンテキストまたはSQLエラーに存在するかもしれない機微な情報を消去します。 システムのデバッグ時に冗長(verbose)ロギングモードを使用するのは問題ありませんが、製造時には冗長モードがオンになっていないことを確認します。 製造時に冗長ロギングを必要とする問題が発生すると、生成されたすべてのログを機微な情報として扱ってください。 これが起こる可能性が高い場合は、機微データを分離して保護するようにログ システムを設計します。 </p>
        <li>
          <p>
            <strong>ログは外部システムによって作成されることに注意してください</strong>:アプリケーションが他のシステムに依存している場合、それらがログ記録するデータを理解した上でシステムを設計することによって機微値が誤ってでも捕らわれるようなことがないようにしてください。 GET要求の値を記録するHTTPサーバログのように、アプリケーションのコードにおいてこれらの相互処理が透過的であることにご注意ください。</p>
        </li>
      </li>
    </li>
  </ol>
  <h1>問題の例</h1>
  <p>ASP.NET アプリケーションは、オンライン オーダー エントリ システムを実装しています。 お客様は Web フロント エンドに接続して注文し、それは後で履行するためにデータベースに格納されます。 ログ記録システムには3 つあります、フロント エンド Web アプリケーション サーバにあるIIS からのHTTP ログとアプリケーションヘルス モニタリングログの 2 つ、および データベース サーバ上にある SQL トランザクション ログです。 </p>
  <ul>
    <li>HTTP 要求は GET および POST の混合物を介して行われ、その結果、多数の機微データ片が定期的に Web サーバ ログに表示されます。 <li>例外はフィルタリングされずに冗長にログ記録されるので、例外が発生したときの対象範囲内のあらゆるユーザー データは、ヘルス モニタリングログ記録されます。 また、SQL トランザクションのロールバックは、デバッグ目的のためにすべてのクエリ データをログ記録し、その結果、機微情報がさらにログ記録されることになります。 <li>データベース側のストアド プロシージャ内部では、すべてのトランザクションがデバッグ目的でログ テーブルに書き込まれます。 ログ テーブル内のエントリは、トランザクションのすべての詳細が含まれているため、トランザクション ログへのアクセス権を持つすべてのサポート担当者は、すべての顧客情報を見ることができます。</li></li></li>
  </ul>
  <h1>ソリューションの例</h1>
  <p>ASP.NET アプリケーションは、オンライン オーダー エントリ システムを実装しています。 お客様は Web フロント エンドに接続して注文し、それは後で履行するためにデータベースに格納されます。 ログ記録システムには3 つあります、フロント エンド Web アプリケーション サーバにあるIIS からのHTTP ログとアプリケーションヘルス モニタリングログの 2 つ、および データベース サーバ上にある SQL トランザクション ログです。 </p>
  <ul>
    <li>Web サーバ ログをサニタイズするために、機微情報を含むすべての HTTP 要求は GET ではなく POST を介して起こります。 こうすることによって、機微データは Web サーバによってログ記録の残されるようなことはありません。 <li>アプリケーションのヘルス モニタリングログは多少複雑になります。 アプリケーションは発生した例外や SQL エラーしかログ、ならびにそれらが発生したコンテキストしかログ記録に残しません。 ログ ハンドラーには2つ別のものがあります。 より、冗長な方は、機微情報は一切ログに残せない場合に使用します（すなわち、現コンテキストには機微データが存在しないもの）であり、デフォルトは、冗長でない方です。 デバッグ ダンプに関する詳細については別の機能が存在し、それはそれらをファイルに出力して ACL することによって該当する情報をユーザーが読み取ることでアクセスしてしまうようなことがないようにしています。 よりセキュリティのレベルが高い環境においては、ローカル ログの代わりとなる暗号化された別の遠隔ログ機能があります。 <li>データベース ログはタイムスタンプ、命令ID、そして場合によっては各トランザクション毎のユーザー ID 程度しか含まれないごく簡素化されたものになります。 これによりデータは正規化されたまま保持され、管理者やサポート要員は基本的な情報のみを参照できる一方で、適切な権限を持つユーザーはすべてのデータを取得することを意味します。</li></li></li>
  </ul>
  <h1>その他のリソース</h1>
  <ul>
    <li>監査のベストプラクティスについて更に学ぶには <a href="http://technet2.microsoft.com/WindowsServer/en/library/5658fae8-985f-48cc-b1bf-bd47dc2109161033.mspx?mfr=true">Auditing Security Events Best practices</a>（セキュリティ イベント監査のベスト プラクティス）を参照してください。</li>
  </ul>
  <h1>関連する項目</h1>
  <ul>
    <li>
      <a href="/article/a053c4e4-2aad-41b9-b60b-e0fdeffd39f4">ガイドライン: 重要なセキュリティ操作をログ記録する</a>
    </li>
  </ul>
  <hr />
  <p>出典: Microsoft Patterns &amp; Practices ガイダンス </p>]]></Data>
  </Content>
</TeamMentor_Article>