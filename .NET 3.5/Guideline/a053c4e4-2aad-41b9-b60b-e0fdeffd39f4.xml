<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-737804985" Content_Hash="-858543666">
  <Metadata>
    <Id>a053c4e4-2aad-41b9-b60b-e0fdeffd39f4</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>重要なセキュリティ操作をログに記録する</Title>
    <Category>監査とログ記録</Category>
    <Phase>設計</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>行うべき事柄</h1>
  <p>アプリケーションのセキュリティ モデルに関連する、すべての重要な操作をログ記録します。 このようなオペレーションには、認証の試行、ユーザー アカウントの変更、および新しいアカウントの有効化が含まれますが、これらに限定されません。</p>
  <h1>理由</h1>
  <p>ログでセキュリティ操作を追跡することで、アプリケーションの誤使用や悪意のあるアクティビティを把握できます。 また、操作を追跡しておくようにすると、被害を評価して今後保護を強化するのに役立ちます。</p>
  <h1>状況</h1>
  <p>アプリケーションがユーザー ロールを有する場合、または認証および認可を実行する場合は、本ガイドラインを適用してください。</p>
  <h1>対策</h1>
  <p>以下の手順を使用して、重要なセキュリティ操作をログに記録します。</p>
  <ol>
    <li>
      <p>
        <strong>アプリケーションにとって何をログ記録する必要があるかを判断してください</strong>:アプリケーションのアーキテクチャおよびセキュリティ方針を見直して、どの操作をログ記録することが重要か判断してください。 一般に、システムへの悪意のある攻撃を認識または追跡するのに役立つものはすべてログ記録しなければなりません。 以下のような内容が含まれます。</p>
      <ul>
        <li>
          <strong>認証の試み</strong>: 成功したか否かにかかわらず認証の試みはすべてログ記録してください｡ リモートホストのIPまたは名前のような追加情報を含めることも選択できます。 認証の試みをログ記録することにより、いつアカウントが危険にさらされた、またはアプリケーションが悪意のある活動に使用されたときの記録が残ります｡ <li><strong>アカウントの変更</strong>: ユーザーアカウントに行われた変更はいずれもログ記録してください｡ そのような変更には、パスワード/PIN、アカウント詳細、および連絡先情報がそれらに限定されず含まれます｡ このようなログは、セキュリティの侵害による被害を追跡する場合や、ロックアウト ポリシーを強制する場合に役立ちます。 <li><strong>ログインしたユーザーが実行したトランザクション</strong>:ログインしたユーザーが実行した、何らかの価値があるトランザクションをログ記録してください｡ たとえば、e コマースによる購入は金銭の値が含まれるため、ログに記録するようにします。 また、機微データが含まれるユーザー トランザクションもログに記録することをお勧めします。 ただし、実際の機微データはログ記録しないでください。 <li><strong>アカウントの作成、アクティブ化およびロック/ロック解除</strong>:ユーザーの作成、アクティブ化およびロックアウトに関するすべての操作をログ記録してください｡ ログ記録された情報は、リモートIPおよび有効なEメールアドレスを含まれなければなりません。 これらのログは、被害を受けたアカウントおよび正当でないユーザーを調査する際に役に立つ場合があります。 <li><strong>システムおよびセキュリティに関する管理イベント</strong>:アプリケーションの全体的な健康に関連するすべてのイベントをログ記録してください｡ それらの実例としては、アプリケーションの構成、始動、終了、監査イベントなどがあります。</li></li></li></li></li>
      </ul>
      <li>
        <p>
          <strong>個別のアクティビティのログ記録に必要なレベルを決定してください</strong>:個別の活動についてどれだけの量の情報をログ記録する必要があるかは、活動後に、活動の内容について何を知らなければならないかによって変わります｡ ログ記録には大まかに、追跡、確認、否認不可の 3 レベルがあり、そのレベルの順に、ログ記録する必要がある内容の要件が増えます。</p>
        <ul>
          <li>
            <strong>トラッキングのためのログ記録</strong>：トランザクションの&amp;#8212;頻度、時期等に関する統計データの提供だけが必要な場合は、トラッキングを目的としたログ記録が適切です。統計を正確なものにする必要があるため、特に収集する実際の統計に柔軟性が求められる場合は、イベントごとのログ記録が適切です。 <li><strong>認証用のログ記録</strong>:認証にはやや深度が必要です。 トランザクションについてのすべての関連基礎情報を記録しなければなりません。 このレベルでのログ記録の目的は、処理を手動で再作成するために十分な、処理の完全な記録を提供することです。 ほとんどの業務ロジックの場合に、これがログ記録のデフォルト レベルです。 <li><strong>非否認のログ記録</strong>: 非否認は著しく高い基準です。 ここでの目標は、トランザクションに関するパーティのうち１つがトランザクションに異議を唱えた場合､トランザクションの有効性の証明ができことです。 この証拠を提供できるかどうかは、アーキテクチャレベルの課題です。それができることは、多くのセキュリティ関連の設計課題、特に認証において意味がありますが、その課題は根本的にログ記録に関するものです。 否認不可の難しい点は、十分なデータがシステムに存在することを保証することです。 否認不可をサポートするように設計されているログ ファイルには、処理に関連するすべてのデータが含まれている必要があります。 理想的には、このデータには暗号化署名が含まれいる必要があり、タンパリングを防止するためにそのデータ自体が署名されていて、セキュアに格納されている必要があります。</li></li></li>
        </ul>
        <li>
          <p>
            <strong>ログ記録のメカニズムの選択</strong>:アプリケーションのインフラを見直し、アプリケーションのビジネスニーズに適するログ記録のメカニズムを確立してください｡ アプリケーションのログ記録のメカニズムが手順1に従って定義されるようなアプリケーション要件に適合するか確認してください｡</p>
          <p>アプリケーションがログ記録のフレームワークを採用していない場合は、ASP.NETヘルスモニタリング コンポーネントを推奨します。 Health Monitoring は、アプリケーション全体でのイベントをログ記録する際に柔軟性を実現する、使い易いコンポーネントです。 ASP.NET アプリケーションはデフォルトでヘルス モニタリングが有効になっており、すべての Web インフラストラクチャ エラー イベント (<strong>System.Web.Management.WebErrorEvent</strong> から継承) およびすべての監査失敗イベント (<strong>System.Web.Management.WebFailureAuditEvent</strong> から継承) がイベント ログに書き込まれます。 デフォルト構成は、マシンレベルの Web.config ファイルの<strong>&lt;healthMonitoring&gt;</strong> エレメントに定義されています。 追加イベントを監査するには、いずれかの組み込みタイプから派生させたカスタム イベント タイプを作成してください。</p>
          <p>ヘルス モニタリング機能には、イベントのログを電子メール メッセージ内に記録できる組み込みプロバイダー(<strong>SimpleMailWebEventProvider</strong>, <strong>TemplatedMailWebEventProvider</strong>) や、SQL Server に記録できる組み込みプロバイダー (<strong>SqlWebEventProvider</strong>)、イベント ログ記録できる組み込みプロバイダー (<strong>EventLogWebEventProvider</strong>)、ASP.NET トレース出力として記録できる組み込みプロバイダー (<strong>TraceWebEventProvider</strong>)、Windows Management Instrumentation (WMI ) の Web イベント プロバイダーに記録できる組み込みプロバイダーが備わっています。<strong></strong>ヘルス モニタリングをマシンまたはアプリケーションの Web.cinfig ファイルで構成し、ログ記録されるイベントと方法を変更できます。</p>
          <p>データベース内ログ記録は、データと相互処理するために使用するストアド プロシージャ内で、またはトリガーによって実装できます。 ストアド プロシージャ外で (たとえば、 SQL インジェクション脆弱性により) 発生するデータの差し替えもログ記録されるため、トリガーによるログ記録が好ましい場合があります。 データベース内ログ記録を実装するときは、通常ログ エントリを生成するプロセスがそれらを上書きできないように注意を払う必要があります。</p>
          <p>ASP.NET ヘルス モニタリングの詳細については、「<a href="http://msdn2.microsoft.com/en-us/library/ms178703(VS.80).aspx">ASP.NET ヘルス モニタリングの概要</a>」を参照してください。</p>
          <p>ASP.NET ヘルス モニタリングの構成の詳細については、「<a href="http://msdn2.microsoft.com/en-us/library/ms178704(VS.80).aspx"> ASP.NET ヘルス モニタリングの構成</a>」を参照してください。</p>
          <p>ASP.NET ヘルス モニタリングのカスタマイズの詳細については、「<a href="http://msdn2.microsoft.com/en-us/library/ms227980(VS.80).aspx">How to: カスタムの ASP.NET ヘルス モニタリングイベントを実装して引き起こす</a>」を参照してください。</p>
          <li>
            <p>
              <strong>重要な操作を実行するコードの領域を識別してください</strong>:追跡しなければならない重要な操作を理解したら、アプリケーションの設計とコードの徹底的な見直しを実施してください。 この見直しの目標は､ログ記録が行われるシステムの個別のコンポーネント､クラスおよび関数を正確に特定することです。</p>
            <li>
              <p>
                <strong>成功およびエラー条件双方のログ記録コードを追加してください</strong>:アプリケーション内に採用されたログ記録メカニズムに従って、すべての重要なセキュリティ操作の開始と終了をログ記録してください。 ログ スキーマには、標準日時スタンプ、アプリケーション名、件名/ユーザー ID、イベント タイプとリソース、およびイベントの状態 (成功したか失敗したか) を含めるようにします。 特権ユーザーのみが利用できる機微データをログに記録しないように注意してください。</p>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <h1>問題の例</h1>
  <p>電子商取引サイトは、1 時間に何百ものトランザクションを行いますが、基本的なウェブ およびデータベースのログしか持っていません。 攻撃者がアプリケーションのセキュリティ実装になにか欠陥を発見した場合､すべてのセキュリティのイベントが特にログ記録されるわけではないので、他のサイトの全トラフィックのノイズに紛れてしまいます。 財政状態が急激に落ち込むまでその攻撃に気づかず、気づいたときには、重要なデータがシステムによってログ記録されておらず、存在する情報をシステムのビジネスレベルのビューに相関させる方法がないという事実により、調査や問題解決が困難になります。</p>
  <h1>ソリューションの例</h1>
  <p>電子商取引サイトでは1時間に数百ものトランザクションが行われ､すべてのユーザーとセキュリティ関連のイベントを監視する別のセキュリティログと共に、ウェブおよびデータベースレベルでデータをログ記録しています。 ログは運用チームによって 24 時間 365 日監視されます。この運用チームは、攻撃にすばやく対処し、必要であれば開発者に連絡します。 攻撃者がアプリケーションのセキュリティ･ロジックに脆弱性を発見した場合､異常トランザクションがすぐにセキュリティログに現れ、監視チームがすぐにトランザクションを取り消し、攻撃者をブロックし、開発チームと協力して修正を施します。</p>
  <h1>その他のリソース</h1>
  <ul>
    <li>監査のベスト プラクティスの詳細については、「<a href="http://technet2.microsoft.com/WindowsServer/en/library/5658fae8-985f-48cc-b1bf-bd47dc2109161033.mspx?mfr=true">セキュリティ イベントの監査のベスト プラクティス」を参照してください。</a></li>
  </ul>
  <h1>関連する項目</h1>
  <ul>
    <li>
      <a href="/article/56a1ea9e-8981-4315-a048-127a2bea2285">ガイドライン：特権付きアカウントの使用を監視する</a>
      <li>
        <a href="/article/0256b587-e8b1-46e0-8b87-f62b9f816c45">ガイドライン：ログ ファイルを保護する</a>
        <li>
          <a href="/article/8dfc3d3e-7a00-4273-bd89-ff918f5eb8fb">チェックリスト項目：重要なセキュリティ運用がログ記録されている</a>
        </li>
      </li>
    </li>
  </ul>
  <hr />
  <p>出典: Microsoft Patterns &amp; Practices ガイダンス </p>]]></Data>
  </Content>
</TeamMentor_Article>