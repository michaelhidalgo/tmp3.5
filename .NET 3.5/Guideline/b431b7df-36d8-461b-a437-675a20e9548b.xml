<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="667009135" Content_Hash="1044216181">
  <Metadata>
    <Id>b431b7df-36d8-461b-a437-675a20e9548b</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>データベースに渡された全入力を検証する</Title>
    <Category>入力とデータの検証</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>行うべき事柄</h1>
  <p>データベースに渡される前に、すべての入力を検証します。</p>
  <h1>理由</h1>
  <p>未検証の入力により、蓄積型クロスサイト スクリプティング、SQL インジェクション、その他の脆弱性に継続的にさらされる状況を生み出し、攻撃者の機微データへの認可されていないアクセスを許すことになります。</p>
  <h1>状況</h1>
  <p>アプリケーションがバックエンドのデータベースサーバを使用する場合。</p>
  <h1>対策</h1>
  <p>データベースに渡される入力を適切に検証するには:</p>
  <ol>
    <li>
      <p>
        <strong>アプリケーション入力を特定します。 </strong>入力ソースの可能性があるものには以下が含まれます。</p>
      <ul>
        <li>URL ベースのパラメーター <li>フォームベースのパラメーター <li>隠しフィールド <li>Cookie<li>ローカル ファイル システム <li>JavaScript 変数 </li></li></li></li></li></li>
      </ul>
      <li>
        <p>
          <strong>データベース エントリ ポイントを識別します。</strong> システム内でデータがクエリを通じて直接的に、もしくは（ログ エントリ等を通じて）間接的にデータベースにプッシュされる場所をすべて探し出します。 データベース エントリ ポイントをすべて追跡して、外部入力を含む可能性があるパスを探し出します。</p>
        <li>
          <p>
            <strong>バリデータのセットを作成してください:</strong> 他のデータの一般的な検証スキームやシステムがデータベースとやりとりする仕方を含めて、問題となるデータを処理しシステム アーキテクチャに適合するバリデータのセットを構築してください。 <a href="/article/f29fac90-c626-41d6-9184-acd6007696cf">長さ､範囲、フォーマットおよび型用の入力を検証する</a> ガイドラインを使用して、各バリデータにおける適切な検証を決定してください｡ バリデータを集中化します。システム全体に散っている検証コードの量が制限されてコードを強化しやすくなり、監査が簡単になります。 データベース入力パスにバリデータを配置します。できるだけ初期データ入力に近い場所に配置するのが理想的です。 データベース サーバへ送信される前に、すべてのデータがバリデータ経由で渡されるようにお勧めします。</p>
          <li>
            <p>
              <strong>Type-Safe なパラメータを SQL ステートメントに使用:</strong> ストアド プロシージャおよびパラメータ化されたクエリは、SQL インジェクションをベースにした攻撃に対するアプリケーションの頑丈さを強化します。 <a href="/article/4be4ed09-ed2f-4f05-9e63-e20708807542">SQL クエリを構築する時は､Type-Safe な SQL パラメータを使用</a>のガイドラインを参照してください</p>
            <li>
              <p>
                <strong>エントリ パスを監査します。</strong> 生産に移行する前に、対象となるコードの開発を担当していないレビュー担当者に全入力パスをチェックさせて、バリデータが正しく実装されていること、バリデータが正しく適用されていること、そして全ての入力パスが確認されていることを確認します。</p>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <h1>問題の例</h1>
  <p>以下のコードでは、特定のユーザー名およびパスワードに基づいてユーザーが検証されます。 パスワードをランダムなソルトでハッシュします。 その後、ユーザー名と生成されたハッシュが、バックエンド データベースに格納されているデータと比較されます。 ただし、SQL クエリがユーザーの入力を使用して動的に作成されています。 適切な入力検証機能が存在しない場合、攻撃者は SQL インジェクションを使用して、アプリケーションのデータベース サーバーにアクセスできてしまいます。</p>
 <pre>public boolean validateUser(String user, char&amp;#91;&amp;#93;pass)<br />&amp;#123;<br />      byte&amp;#91;&amp;#93;salt = MyApp.generateSalt();<br />      String passHash;<br />      SqlConnection cn;<br />      SqlCommand sqlCommand;<br />      String query;<br />      passHash = hashCredentials(pass, salt);<br />      // The application crafts the SQL query based on user's input<br />      cn = MyApp.getDBConnection();<br />      sqlCommand = new SqlCommand("select user from myappUsers where user = \""<br /><br />      &amp;#43;user &amp;#43; "\" and pass = \"" &amp;#43; passHash &amp;#43; "\" and login_attempts &lt; 3;", cn);<br />      SqlDataReader reader = sqlCommand.ExecuteReader();<br />      updateLastLoginAttempt(user);<br />      ...<br />&amp;#125;</pre>
  <p>ユーザーが'foo\" or 1 = 1; drop table &amp;#42;; --'ユーザー名のログイン要求を送信すると、システムはユーザーをまず認証してから、データベース内のすべてのテーブルを削除します。</p>
  <h1>ソリューションの例</h1>
  <p>以下のコードでは、特定のユーザー名およびパスワードに基づいてユーザーが検証されます。 パスワードをランダムなソルトでハッシュします。 その後、ユーザー名と生成されたハッシュが、バックエンド データベースに格納されているデータと比較されます。 アプリケーションはパラメータのプロパティを使用しているため、攻撃者は SQL インジェクションを使用することによってアプリケーションのデータベース サーバにアクセスするのがはるかに難しくなります。 </p>
 <pre>public boolean validateUser(String user, char&amp;#91;&amp;#93;pass)<br />&amp;#123;<br />   byte&amp;#91;&amp;#93;salt = MyApp.generateSalt();<br />   String passHash; <br />   SqlConnection cn;<br />   SqlCommand sqlCommand;<br />   String query;     <br />   passHash = hashCredentials(pass, salt);<br />   // The application crafts the SQL query based on user's input<br />   cn = MyApp.getDBConnection();<br />   sqlCommand = new SqlCommand("select user from myappUsers where user = &amp;#64;user and <br />                    &amp;#43;pass = &amp;#64;passHash and login_attempts &lt; 3;", cn);<br />   sqlCommand.Parameters.Add("&amp;#64;user", SqlDbType.VarChar, user.Length).Value = user;<br />   sqlCommand.Parameters.Add("&amp;#64;passHash ", SqlDbType.VarChar, passHash.Length).Value = passHash;<br />   SqlDataReader reader = sqlCommand.ExecuteReader(); <br />   updateLastLoginAttempt(user);  <br />   ...<br />&amp;#125;</pre>
  <p>ユーザーがユーザー名やパスワードとして任意の文字列を渡しても、クエリを変更したり、その他データベースに影響を与えたりすることができません。 さらに効果的なソリューションとしては、パラメータ化コマンドに代えてストアド プロシージャを使用する方法があります。こうするとデータベースをさらにロックダウンすることができます。</p>
  <h1>その他のリソース</h1>
  <ul>
    <li>入力検証に正規表現を使用する方法については、<a href="http://msdn2.microsoft.com/en-us/library/ms998267.aspx"> ASP.NET で入力を制約するために正規表現を使用する方法</a> を参照してください｡</li>
  </ul>
  <h1>関連する項目</h1>
  <ul>
    <li>
      <a href="/article/4be4ed09-ed2f-4f05-9e63-e20708807542">ガイドライン: SQL クエリを構成する際にはType-Safe SQL パラメータを使用します</a>
      <li>
        <a href="/article/5865cd19-5ead-401d-abd7-7e54cd2c1fc1">ガイドライン: ストアド プロシージャを使用する</a>
        <li>
          <a href="/article/8062c64d-ca73-428b-b35a-e7e5952b9da5">攻撃: SQL インジェクション攻撃</a>
          <li>
            <a href="/article/110cc11a-5a28-4fc2-a269-4210069b8865">攻撃：サーバ側コード インジェクション攻撃</a>
            <li>
              <a href="/article/94f9b38a-392e-4eaf-a764-158694bbdf26">チェックリスト項目: すべてのデータベース入力が検証されること</a>
              <hr />
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>出典: Microsoft Patterns &amp; Practices ガイダンス </p>]]></Data>
  </Content>
</TeamMentor_Article>