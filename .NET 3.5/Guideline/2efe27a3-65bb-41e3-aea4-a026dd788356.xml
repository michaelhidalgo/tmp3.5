<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-1463126606" Content_Hash="1279868326">
  <Metadata>
    <Id>2efe27a3-65bb-41e3-aea4-a026dd788356</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>セッションの有効期間の制限</Title>
    <Category>セッション管理</Category>
    <Phase>設計</Phase>
    <Technology>Web アプリケーション</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用対象</h1>
  <ul>
    <li>Web アプリケーション</li>
  </ul>
  <h1>行うべき事柄</h1>
  <p>セッション ハイジャックおよび反復攻撃のリスクを緩和するために、セッションの有効期間を減らしてください。</p>
  <h1>理由</h1>
  <p>SSL を使用している場合でも、セッション ハイジャックおよび反復のリスクが存在します。 セッション トークンを盗むための帯域外の方法は他にも多数あります。&nbsp; セッション タイムアウトの時間が短いほど、アプリケーションにアクセスするために攻撃者がセッション Cookie をキャプチャして使用できる時間が短くなります。</p>
  <h1>状況</h1>
  <p>すべてのアプリケーションにてセッションの長さを注意深く検討する必要があり、機微情報を保護するアプリケーションではできるだけ短くすべきです。</p>
  <h1>対策</h1>
  <p>セッションの有効時間を制限するために処理しなければならない情報が 2 つあります。&nbsp; 1 つは実際のセッション Cookie、もう 1 つはサーバー側セッション状態です。&nbsp; ほとんどのフレームワークでは、ユーザーがサイトでアクションを実行すると、サーバー側セッション状態のセッション Cookie および対応するフィールドのタイムスタンプは両方とも現在の時刻にリセットされます。&nbsp; 期限切れの Cookie を誰かが使用しようとした場合、そのセッションに対するサーバー側セッション状態のタイムスタンプがチェックされ、要求は許可されません。&nbsp; サーバー側状態が削除された状態になるほどセッションが古い場合は、直ちに拒否されます。&nbsp; Web ファームでは、単一で明確なセッション状態テーブルを保持する必要性からサーバーを解放するために、タイムスタンプが Cookie に埋め込まれていて暗号署名されている場合があります。</p>
  <p>ほとんどの Web アプリケーション フレームワークは詳細を処理できるため、必要なのは単純なタイムアウト値を指定するだけです。&nbsp; 状況によっては、各アクションの後でセッション タイマーをリセットするかどうか (デフォルトで、アイドル タイマー)、または初回ログインから単一の固定タイマーにすべきかどうか (絶対タイマー) を選択できます。&nbsp; 後者は、高速トランザクションの場合に便利で、特にセキュリティ クリティカルな状況に有益です。</p>
  <p>ほとんどの状況では、許可されるアイドル セッションの最大は 30 分です。&nbsp; 機微情報を処理するサイトの場合は、10 分がより適切です。&nbsp; ユーザーによるサイトのブラウジングを許可し、セッションが長時間実行して独自の機能を保持するようにする場合は、サイトのカスタマイズを制御する Cookie を、より機微な情報または機能性へのアクセスを制御する Cookie から分離することが可能です。 カスタマイズ Cookie は、実際のセッションが期限切れになっても永続できます。</p>
  <h1>問題の例</h1>
  <p>Web サイトは、Web アプリケーション フレームワークによって設定されたデフォルト (1 時間) のセッション時間を使用します。&nbsp; あるユーザーがインターネット カフェでログオフするのを忘れた場合、このユーザーの後にマシンを使用する攻撃者はサイトをブラウジングし、古いセッションを使用して被害者の機微情報へのアクセスを取得することができます。</p>
  <h1>ソリューションの例</h1>
  <p>Web サイトは、セッション タイムアウトを 10 分に制限し、Web アプリケーション フレームワークによって設定されたデフォルトを上書きします。&nbsp; あるユーザーがインターネット カフェでログオフするのを忘れても、セッションは期限切れになるため、このユーザーの後にマシンを使用する攻撃者がサイトをブラウジングし、古いセッションを使用して被害者の機微情報へのアクセスを取得することはできません。</p>
  <h1>その他のリソース</h1>
  <ul>
    <li>詳細については、「Chapter 4 - Design Guidelines for Secure Web Applications (第 4 章 - セキュリティ保護された Web アプリケーションの設計ガイドライン)」(<a href="http://msdn2.microsoft.com/en-us/library/aa302420.aspx">http://msdn2.microsoft.com/en-us/library/aa302420.aspx</a>) を参照してください。&nbsp; </li>
  </ul>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>