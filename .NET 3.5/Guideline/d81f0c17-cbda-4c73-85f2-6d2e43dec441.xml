<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-1426359057" Content_Hash="1900613381">
  <Metadata>
    <Id>d81f0c17-cbda-4c73-85f2-6d2e43dec441</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>機微データをクエリ文字列内に置かない</Title>
    <Category>パラメータ操作</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>行うべき事柄</h1>
  <p>ユーザーが機微データを送信する場合、クエリ文字列ではなく HTTP POST のフォーム フィールド経由で送信するようにします。&nbsp;&nbsp;データを編集する必要がある場合以外には、機微データを往復させないようにして、可能な限り問題を完全に回避するようにします。&nbsp; その代わり、機微セッションデータはサーバ側に保管するようにします。&nbsp; 機微データをユーザー経由で送信する必要がある場合、クエリ文字列パラメータではなく暗号化された状態表示を使います。 </p>
  <h1>理由</h1>
  <p>クエリ文字列にある機微データはウェブプロキシがログ記録する場合があり、これはユーザーのブラウザの履歴、ならびにウェブサーバログにも記録されます。&nbsp; 更に、ユーザーを通して機微内容のコンテンツを送信する場合、クエリ文字列はコンテンツをユーザーによる読み取りまたはタンパリングから保護する簡単な手段を提供しません。 </p>
  <h1>状況</h1>
  <p>機微データは絶対にクエリ文字列に現れないようにしてください。 </p>
  <h1>対策</h1>
  <ol>
    <li>
      <p>ユーザーが提供する機微データの取扱いには HTTP GET ではなく、HTTP POST （フォーム送信）を使用します。&nbsp; これでデータがウェブプロキシやウェブサーバのログ、またはブラウザの履歴等に記録されることがなくなります。 </p>
      <li>
        <p>機微データはクエリ文字列パラメータで繰返し受渡しをするのではなく、データ サーバ側に保存してください。&nbsp; 機微情報を守るための最善の方法はアクセスできない場所に置いておくことです。 </p>
        <li>
          <p>サーバ移行の際、機微データをユーザーを通して送信する必要がある場合はクエリ文字列パラメータではなく暗号化されたViewState（状態表示）で送信します。&nbsp; ViewState（状態表示）は完全性および機密性を必要に応じてサポートするために設計されたものであり、ユーザーを通して送信する際に機微データが絶対に改ざんされたり公開されないようにできる最善の方法です。 </p>
        </li>
      </li>
    </li>
  </ol>
  <h1>問題の例</h1>
  <p>電子商取引サイトの注文フォームえの発注には GET を使用しています。&nbsp; 支払いページで生成される URL は次のフォームです:</p>
 <pre>http://www.example.com/cart.aspx?orderID=[...]&name=[...]&creditCard=[...]&address=[...]</pre>
  <p>顧客が公共端末から発注をかけると、攻撃者がそのクレジット カード番号および住所をブラウザ履歴から読み出します。&nbsp; 脆弱なサイトを見つけると攻撃者は複数のプロキシ サーバにセキュリティ侵害をかけて、更に多くのクレジット カード番号をそれぞれのログから盗み出します。</p>
  <h1>ソリューションの例</h1>
  <p>電子商取引サイトの注文フォームは全てのトランザクションに POST を使用し、全てのフォームは ViewStateUserKey を使用し、機微データは全て SSL 経由で送信されてクライアントから繰返し送信されるのではなくサーバに保存されます。&nbsp; POST を使用することによって、データがウェブ プロキシ、ウェブ サーバ ログ、またはブラウザの記録に残らないようにします。&nbsp; ViewStateUserKey を使用することによって、傍受されたフォーム送信が再生できないようにします。&nbsp; SSL を使用して、機微データを&nbsp;eクライアントと繰返しやり取りしないことによって情報がスニッフィングされることも XSS 経由で盗まれることもないようにします。&nbsp; 顧客が注文フォームを公共端末から送信しても、攻撃者は送信データをブラウザ履歴からもプロキシ サーバからも読み取ることができません。</p>
  <p />
  <hr />
  <p>出典: Microsoft patterns & practices guidance </p>]]></Data>
  </Content>
</TeamMentor_Article>