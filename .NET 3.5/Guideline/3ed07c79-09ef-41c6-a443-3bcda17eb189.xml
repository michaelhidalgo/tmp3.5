<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1786424123" Content_Hash="-933526436">
  <Metadata>
    <Id>3ed07c79-09ef-41c6-a443-3bcda17eb189</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>重要なビジネス ロジックへのアクセスをインストルメント化する</Title>
    <Category>監査とログ記録</Category>
    <Phase>設計</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>行うべき事柄</h1>
  <p>ASP.NET ヘルス モニタリングを使用して重要なビジネスオペレーションを追跡し、特に高感度の方法やビジネス ロジックへのアクセスをアプリケーションが記録するようにします。 </p>
  <h1>理由</h1>
  <p>多くのビジネスルールを実施する上で、ビジネス ロジックへのアクセスを記録することは不可欠です。&nbsp; ロギングは詐欺防止や論争ソリューションの重要な鍵となります。&nbsp; 更に、侵入が起きようとしている、或いはおきてしまった場合にはどのような被害が発生した可能性があるかを調べるために科学捜査を活用することが必要です。&nbsp; ASP.NET ヘルス モニタリングは、統合され使いやすく、管理しやすいビルトインのロギング フレームワークです。</p>
  <h1>状況</h1>
  <p>ロギングの判断項目は後から再度作成できるものでなくてはならず、すべてのアプリケーションは、ビジネスによって重要な一連のアクションが備わっています。&nbsp; 拒絶不可および偽造不可である必要のあるシステム内のアクションとは?&nbsp; 追跡の必要なアクションとは?&nbsp; ユーザーにこれらのアクションを許可するインターフェイスはロギングの第一の対象です。 </p>
  <h1>対策</h1>
  <p>ビジネス ロジックへのアクセスは簡単にログ記録できます。&nbsp; 以下の手順で行います。</p>
  <ol>
    <li>
      <p>
        <strong>アプリケーション内の重要なビジネス ロジックを特定します。</strong>&nbsp;業務アクティビティを正しくログ記録するには、まず、アプリケーションで実行されるどのアクティビティが重要であるかと、それぞれ何をログ記録する必要があるかを理解する必要があります。&nbsp; この情報は、アプリケーションの業務要件から直接得られます (その情報が存在しない場合は、アプリケーションの要件資料に追加する必要があります)。&nbsp; アプリケーションの業務アクティビティに関する適切な分析がない場合、脅威モデルの要件モデリング フェーズで分析するのが良い方法です。&nbsp;</p>
      <li>
        <p>
          <strong>各アクティビティが必要とするログ記録のレベルを決定します。</strong> 各アクティビティについてどの程度の情報が必要になるかは、そのアクティビティの発生後、そのアクティビティの発生について説明する必要がある内容によります。&nbsp; ログ記録には大まかに、追跡、確認、否認不可の 3 レベルがあり、そのレベルの順に、ログ記録する必要がある内容の要件が増えます。</p>
        <ul>
          <li>
            <p>
              <strong>追跡のためのログ記録。</strong> 追跡用のログ記録が適しているのは、処理についての統計データ (頻度、タイミングなど) を提供することだけが必要な場合です。 統計情報は正確である必要があるため、特に収集される実際の統計情報に柔軟性が必要な場合は、イベントごとにログを記録することもやはり適切です。</p>
            <li>
              <p>
                <strong>検証のためのログ記録。 </strong>確認用の場合はもう少し詳細になります。 処理についての該当する基本的な情報をすべて記録する必要があります。&nbsp; このレベルでのログ記録の目的は、処理を手動で再作成するために十分な、処理の完全な記録を提供することです。&nbsp;&nbsp;ほとんどの業務ロジックの場合に、これがログ記録のデフォルト レベルです。</p>
              <li>
                <p>
                  <strong>非否認のログ記録。</strong> 否認不可では基準が非常に高くなります。&nbsp; この場合の目的は、ある処理の当事者の 1 人がその処理に対して異議を唱えた場合に、処理の妥当性の証拠を提供できることを保証することです。&nbsp; この証拠を提供できるかどうかは、アーキテクチャレベルの課題です。それができることは、多くのセキュリティ関連の設計課題、特に認証において意味がありますが、その課題は根本的にログ記録に関するものです。&nbsp; 否認不可の難しい点は、十分なデータがシステムに存在することを保証することです。&nbsp; 否認不可をサポートするように設計されているログ ファイルには、処理に関連するすべてのデータが含まれている必要があります。&nbsp; 理想的には、このデータには暗号化署名が含まれいる必要があり、タンパリングを防止するためにそのデータ自体が署名されていて、セキュアに格納されている必要があります。</p>
              </li>
            </li>
          </li>
        </ul>
        <li>
          <p>
            <strong>そのロジックへのすべてのアクセスが、十分なデータとともにログ記録されるようにしてください。&nbsp;</strong>アクセスをログ記録する必要があるすべてのロジック、およびログを記録するレベルが決まったら、これらのロジックへのすべてのアクセス方法を列挙する必要があります。&nbsp; 多くのアプリケーションでは、指定されるロジックに対するエントリ ポイントは 1 つですが、より複雑なアプリケーションには複数のエントリ ポイントがある場合があります。&nbsp; また、複数レベルでのログ記録は、高いレベルの機能が迂回された場合に備えた、ある種の多層防御になります。&nbsp; N 層システムはこの良い例です。その場合、通常のエントリ ポイントは Web フロントエンドを介しますが、ミドルウェア レイヤーおよびデータベース レイヤーでのログ記録は、通常のエントリ ポイントの迂回を検出する上で非常に重要です。&nbsp; 複数レベルでログ記録するとき、または、階層的でない複数のシステムを連携させるときは、業務レベルのログ記録により、それらの異種データを単一のビューに統一する方法を提供することが不可欠です。</p>
          <p>ASP.NET アプリケーションはデフォルトでヘルス モニタリングが有効になっており、すべての Web インフラストラクチャ エラー イベント (<b>System.Web.Management.WebErrorEvent</b> から継承) およびすべての監査失敗イベント (<b>System.Web.Management.WebFailureAuditEvent</b> から継承) がイベント ログに書き込まれます。&nbsp; デフォルト構成は、マシンレベルの Web.config ファイルの<b>&lt;healthMonitoring&gt;</b> エレメントに定義されています。&nbsp; 追加イベントを監査するには、いずれかの組み込みタイプから派生させたカスタム イベント タイプを作成してください。 </p>
          <p />
          <p>ヘルス モニタリング機能にはプロバイダーが組み込まれており、これらのプロバイダーによって、電子メール メッセージ (<b>SimpleMailWebEventProvider</b>、<b>TemplatedMailWebEventProvider</b>)、SQL Server (<b>SqlWebEventProvider</b>) 、イベントログ (<b>EventLogWebEventProvider</b>)、ASP.NET のトレース出力 (<b>TraceWebEventProvider</b>)、あるいは Windows Management Instrumentation (WMI) Web イベント プロバイダー (<b>WMIWebEventProvider</b>) へイベントを記録することができます。ヘルス モニタリングはマシンまたはアプリケーションWeb.configファイルで設定できます。ログ記録されるイベントを選んだり、それらがログ記録される方法を設定できます。</p>
          <p>データベース内ログ記録は、データと相互処理するために使用するストアド プロシージャ内で、またはトリガーによって実装できます。&nbsp; ストアド プロシージャ外で (たとえば、 SQL インジェクション脆弱性により) 発生するデータの差し替えもログ記録されるため、トリガーによるログ記録が好ましい場合があります。&nbsp; データベース内ログ記録を実装するときは、通常ログ エントリを生成するプロセスがそれらを上書きできないように注意を払う必要があります。</p>
          <li>
            <p>
              <strong>ログは監視してください。</strong>&nbsp;次のステップは、ログが監視されていて、その中の情報に対して対応が取られることを保証することです。&nbsp; ログ記録は、その結果が日の目を見なければ、何の役にも立ちません。&nbsp; アプリケーションを管理する操作チームと共に、ログ イベントを監視し対応する計画を立てます。&nbsp; 状況に応じて、計画をゼロから立てる必要がある場合もあれば、既存のフレームワークに組み込める場合もあります。 </p>
            <p>監視フレームワークをゼロから定義する場合に、検討する必要がある事柄を以下に示します: </p>
            <ul>
              <li>
                <p>ログをいつ監視する必要があるか。アプリケーションによっては、常時監視する必要がありますが、多くは 1 日 8 時間、週 5 日間で十分です。 </p>
                <li>
                  <p>どの程度の頻度でログを監視するか。アプリケーションが大きな電子商取引サイトの場合、ログを監視する専門チームが必要かもしれませんが、小規模な Web アプリケーションでは、シスアドが 1 日に 2、3 回確認すれば十分安全です。 </p>
                  <li>
                    <p>どのくらいの応答時間が必要ですか。サイトに深刻な問題がある場合、最初にログにそれが現れます。 問題に対する許容値は、数分ですか、数時間ですか、数日ですか。 </p>
                    <li>
                      <p>潜在的な課題に対して、どのような手順で対処しますか。 </p>
                      <li>
                        <p>ログやログから導かれる情報に対するアクセスをどのように制御しますか。 それは、どの程度機微な情報と考えられますか。 </p>
                        <li>
                          <p>ログ監視チームにはどのような応答機能がありますか。&nbsp; ログの情報に対処できなければ、ログ監視はそれ自体意味がありません。疑わしいイベントを調査して、アカウントを凍結する必要があります。</p>
                        </li>
                      </li>
                    </li>
                  </li>
                </li>
              </li>
            </ul>
            <li>
              <p>
                <strong>ログ記録における潜在的な危険を避けてください。 </strong>業務レベルで情報をログ記録することは、特定の関数呼び出しのログ、Web サーバー トラフィックのログ、またはデータベース クエリのログなど実装レベルのログを提供するよりも困難です。&nbsp; これらの全く異なる情報源をすべて組み合わせて、業務レベル イベントの一貫性のあるビューを提供することを保証すると同時に、それらのイベントを構成する要素となる実装レベルのログ エントリを簡単に見つけられるようにすることは、簡単なことではありません。&nbsp; アプリケーションの複雑さによっては、このようなレベルでログ記録を統合する必要がない場合があります。たとえば、指定されたデータベース クエリがどの業務イベントの一部であるかを簡単に判断できる場合は、おそらく、こういったことを自動化する必要ありません。&nbsp; ただし、もっと大規模で複雑なアプリケーションでは、このようなログ記録の連係が必要です。</p>
              <p>あまりにも多くの情報をログ記録すると、それ自体が問題になる可能性があります。&nbsp; アプリケーションから確認しているログ イベントのボリュームの見当が付いたら、何らかのログ調整を実施して、対処できる割合まで情報の流れを減らすことは試みる価値があります。&nbsp; 適切なログ調整は、冗長な情報のみを排除し、最も重要な情報を最初に表面化させる方法になります。 </p>
              <p>異常な状況の検出に基づいて自動的に対処することは、非常に危険であり、避けるべきです。&nbsp; イベント (たとえば、ログイン試行) が発生する速度を調整することは理にかなっていますが、そのアクションを防止すると、実施が容易な DoS 攻撃をアプリケーションが受ける可能性があります。 </p>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <h1>問題の例</h1>
  <p>電子商取引サイトは、1 時間に何百ものトランザクションを行いますが、基本的なウェブ およびデータベースのログしか持っていません。&nbsp; 攻撃者がビジネス ロジックの実装の一部に欠陥を見つけた場合、ビジネス ロジックは特にログ記録されていないため、その他のすべてのサイト トラフィックのノイズに埋もれてしまいます。&nbsp; 財政状態が急激に落ち込むまでその攻撃に気づかず、気づいたときには、重要なデータがシステムによってログ記録されておらず、存在する情報をシステムのビジネスレベルのビューに相関させる方法がないという事実により、調査や問題解決が困難になります。</p>
  <h1>ソリューションの例</h1>
  <p>電子商取引サイトは、1 時間に何百ものトランザクションを処理し、データウェブおよびデータベース レベルでログ記録し、またすべてのデータを相関させる別のビジネスレベル ログ (およびセキュリティ関連アクティビティを特定して引き出す、別のセキュリティ ログ) を記録します。&nbsp; ログは運用チームによって 24 時間 365 日監視されます。この運用チームは、攻撃にすばやく対処し、必要であれば開発者に連絡します。&nbsp; 攻撃者がビジネス ロジックに脆弱性を見つけると、異常トランザクションがすぐにビジネスレベル ログに現れ、監視チームがすぐにトランザクションを取り消し、攻撃者をブロックし、開発チームと協力して修正を施します。</p>
  <p />
  <hr />
  <p>出典: Microsoft patterns & practices guidance </p>]]></Data>
  </Content>
</TeamMentor_Article>