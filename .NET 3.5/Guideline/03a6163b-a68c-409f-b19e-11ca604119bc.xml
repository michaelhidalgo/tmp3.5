<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-1568503334" Content_Hash="-1051805425">
  <Metadata>
    <Id>03a6163b-a68c-409f-b19e-11ca604119bc</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>アンマネージ API 呼び出しをラッパー アセンブリで分離する</Title>
    <Category>アンマネージ コード</Category>
    <Phase>実装</Phase>
    <Technology>.NET 3.5</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>行うべき事柄</h1>
  <p>お使いのコードの維持管理およびレビューを簡単にするため、アンマネージ API 呼び出しをすべてラッパー アセンブリ内に配置してください。</p>
  <h1>理由</h1>
  <p>こうすることで、以下のことが可能になります。</p>
  <ul>
    <li>アプリケーションが依存するアンマネージ APIのセットを簡単に識別できます。 <li>非管理の呼び出しを単一のアセンブリに分離します。 <li><b>UnmanagedCodePermission </b>を単一のアセンブリに分離します。</li></li></li>
  </ul>
  <h1>対策</h1>
  <p>アンマネージ API 呼び出しをすべてラッパー アセンブリ内に分離してください。&nbsp;コードの開発およびレビューをする場合は、命名規則を使用してネイティブ コード リスクを念頭に置くようにしてください。 アンマネージ コードを分類し、prefix を使用して、アンマネージ API のカプセル化に使用する型を指定してください。 </p>
  <p>どのようなコード (悪意のあるコードまたはそれ例外のコードにかかわらず) で呼び出してもセキュリティ上の脅威とならず無害なコードは、「<i>Safe (安全)</i>」という語を使用して識別してください。 安全なクラスには <b>SuppressUnmanagedCodeSecurity</b> 属性を注釈として付けることができます。この属性によってコードアクセス セキュリティ権限の完全信頼要求がオフになります。 </p>
 <pre>[SuppressUnmanagedCodeSecurity]<br />class SafeNativeMethods {<br />&nbsp;&nbsp;&nbsp; DllImport("user32")]<br />&nbsp;&nbsp;&nbsp; internal static extern void MessageBox(string text);<br />}  </pre>
  <p>安全でない可能性があるが、アンマネージ コードのアクセス許可に対するフル スタック ウォーキング要求で保護されているアンマネージ コードは、「<i>Native (ネイティブ)</i>」という語を使用して識別してください。 これらは、<b>SuppressUnmanagedCodeSecurity</b> 属性で禁止されている場合を除き、相互運用レイヤーによって黙示的に作成されます。 </p>
 <pre>class NativeMethods {<br />&nbsp;&nbsp;&nbsp; [DllImport("user32")]<br />&nbsp;&nbsp;&nbsp; internal static extern void FormatDrive(string driveLetter);<br />}  </pre>
  <p>危険な可能性があり、アンマネージ コードのアクセス許可に対するセキュリティ要求が宣言的に禁止されているアンマネージ コードは、「<i>Unsafe (危険) </i>」という語を使用して識別してください。 スタック ウォークが実行されないため、これらのメソッドに対する全ての呼び出し元で、使用法が安全であることを確認するために完全なセキュリティ レビューを実施する必要があります。 </p>
 <pre>[SuppressUnmanagedCodeSecurity]<br />class UnsafeNativeMethods {<br />&nbsp;&nbsp;&nbsp; [DllImport("user32")]<br />&nbsp;&nbsp;&nbsp; internal static extern void CreateFile(string fileName);<br />}</pre>
  <h1>&nbsp;</h1>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>