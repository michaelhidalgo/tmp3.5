<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1466086169" Content_Hash="846773027">
  <Metadata>
    <Id>5865cd19-5ead-401d-abd7-7e54cd2c1fc1</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>ストアド プロシージャを使用する</Title>
    <Category>データ アクセス</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>行うべき事柄</h1>
  <p>データベースと相互処理する際は、常にストアド プロシージャを使用してください。 これにより、パフォーマンスが向上し、SQL インジェクション攻撃が成功するリスクが減少します。</p>
  <h1>理由</h1>
  <p>攻撃者は <a href="/article/8062c64d-ca73-428b-b35a-e7e5952b9da5">SQL インジェクション攻撃</a>を使用して、予期しない方法でデータベースを操作できます。 SQL インジェクションは攻撃者がデータベースへの接続に使用される SQL アカウントの Credential 情報を装って、任意にデータを読読み取り、書込み、更新したり、削除することができるようになってしまいます。 セキュリティが不適切なデータベースの場合、これはオペレーティングシステムのコマンド挿入を直接行えるようなストアドプロシージャを介した、遠隔コード実行につながる可能性もあります。</p>
  <h1>状況</h1>
  <p>データベースと相互処理する必要がある場合はいつでも</p>
  <h1>対策</h1>
  <p>まず、データベースにストアド プロシージャを作成する必要があります。この操作は下記の SQL 構文を使用して行います。</p>
 <pre>CREATE PROCEDURE <br />sp_AddNewUser( &amp;#64;UserName nvarchar(255), &amp;#64;Email  nvarchar(255), <br />&amp;#64;FirstName nvarchar(255), &amp;#64;LastName nvarchar(255)) AS</pre>
 <pre>-- INSERT the new user<br />INSERT INTO Users_Table(UserName, Email, FirstName, LastName)<br />VALUES(&amp;#64;UserName, &amp;#64;Email, &amp;#64;FirstName, &amp;#64;LastName)<br />--This will return the new user&amp;#8217;s IDSELECT SCOPE_IDENTITY()</pre>
  <p>ここで、ストアド プロシージャを呼び出すには、下記の .NET コードを使用します。</p>
 <pre>//create a new connection using our connection string<br />SqlConnection myConnection = new SqlConnection(connection string)<br />;myConnection.Open();<br />//create a new command that specifies our store procedure<br />SqlCommand myCommand = new SqlCommand("sp_AddNewUser", myConnection);<br />//Specify our command is a stored proceduremy<br />Command.CommandType = Command<br />Type.StoredProcedure;<br />//Create a new parameter to carry the username<br />SqlParameter UserParameter = new SqlParameter("&amp;#64;UserName", SqlDbType.VarChar);<br />UserParameter.Direction = ParameterDirection.Input;<br />UserParameter.Value = "TestUser";<br />//Add the parameter to the command<br />myCommand.Parameters.Add(UserParameter);<br />//Repeat this code to add commands for each parameter in the SPROC<br />//Execute the command on the Database<br />myCommand.ExecuteNonQuery();</pre>
  <h1>問題の例</h1>
  <p>SQL インジェクション脆弱性を起こす方法は数多くあり、それはストアドプロシージャを使って実行することも可能です。 バウンド パラメータを持たない SQL 文を動的に作成することで脆弱性が生じます。 下の例では、開発者はユーザーの提供した入力とあわせて文のコンポーネントを追加することで、SELECT 文を組み立てたものです。</p>
  <p>開発者が次のコマンドを実行する場合&amp;#91;ユーザー名&amp;#93; が、返信したいメールのユーザーの送信者である場合。</p>
 <pre>SELECT Email from Users_Table where <br />UserName = &amp;#91;username&amp;#93;;<br /></pre>
 <pre>The following code will create that statement an execute it on the database:<br />//create a new connection using our connection string<br />SqlConnection myConnection = new SqlConnection(connection string);<br />myConnection.Open();<br />//create a new command that specifies our store procedure<br />string selectCommand = "SELECT Email from Users_Table WHERE UserName = "<br />         &amp;#43;userNameBox.Text;<br />SqlCommand myCommand = new SqlCommand(selectCommand);<br />//Execute the command on the Database<br />SqlDataReader myReader = myCommand.ExecuteReader();</pre>
  <h1>ソリューションの例</h1>
  <p>まず、データベースにストアド プロシージャを作成する必要があります。下記の SQL 構文を使用して上記と同じ SELECT 文を作成することができます。</p>
 <pre>CREATE PROCEDURE sp_ReturnEmail( &amp;#64;UserName nvarchar(255)) <br />ASSELECT Email FROM Users_Table where UserName = &amp;#64;UserName;</pre>
  <p>下記のコードを使用して、ストアド プロシージャを使用してデータベースにクエリすることができます。</p>
 <pre>//create a new connection using our connection string<br />SqlConnection myConnection = new SqlConnection(connection string);<br />myConnection.Open();<br />//create a new command that specifies our store procedure<br />SqlCommand myCommand = new SqlCommand("sp_ReturnEmail", myConnection);<br />//Specify our command is a stored procedure<br />myCommand.CommandType = CommandType.StoredProcedure;<br />//Create a new parameter to carry the username<br />SqlParameter UserParameter = new SqlParameter("&amp;#64;UserName", SqlDbType.VarChar);U<br />serParameter.Direction = ParameterDirection.Input;UserParameter.Value = &amp;#91;username&amp;#93;;<br />//Add the parameter to the command<br />myCommand.Parameters.Add(UserParameter);<br />//Execute the command on the Database<br />SqlDataReader myReader = myCommand.ExecuteReader();</pre>
  <h1>その他のリソース</h1>
  <ul>
    <li>ストアド プロシージャの詳細について知りたい場合は、「<a href="http://en.wikipedia.org/wiki/Stored_procedure">ストアドプロシージャ</a>」を参照してください。 <li>ストアドプロシージャの使用に関する更なる情報については: <a href="http://aspnet.4guysfromrolla.com/articles/062905-1.aspx">Returning a Scalar value from a Stored Procedure</a>（格納手続きからスカラー値を返す）にアクセスしてください。</li></li>
  </ul>
  <h1>関連する項目</h1>
  <ul>
    <li>
      <a href="/article/b431b7df-36d8-461b-a437-675a20e9548b">ガイドライン: データベースに渡される全ての入力を検証します</a>
      <li>
        <a href="/article/a4e7f10a-b051-43d6-8bc3-3495773450b8">チェックリストアイテム: 使用される安全な SQL パラメータの種類</a>
      </li>
    </li>
  </ul>
  <hr />
  <p>出典: Microsoft Patterns &amp; Practices ガイダンス</p>]]></Data>
  </Content>
</TeamMentor_Article>