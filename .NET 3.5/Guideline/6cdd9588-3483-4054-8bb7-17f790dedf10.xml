<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-1605318251" Content_Hash="1776769548">
  <Metadata>
    <Id>6cdd9588-3483-4054-8bb7-17f790dedf10</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>入力を制約、拒否、サニタイズする</Title>
    <Category>入力とデータの検証</Category>
    <Phase>設計</Phase>
    <Technology>Web アプリケーション</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用対象</h1>
  <ul>
    <li>
      <div>Web アプリケーション</div>
    </li>
  </ul>
  <h1>行うべき事柄</h1>
  <p>型、長さ、形式、および範囲に関して検証することにより、既知の有効なデータであるかどうかをチェックしてください。 既知の無効な入力については、拒否してサニタイズしてください。</p>
  <h1>理由</h1>
  <p>チェックされていない入力の安全性に関して信頼性を仮定することはできません。 アプリケーションレベルの攻撃のほとんどでは、悪意のある入力が関与します。 入力を検証しなかった場合、データベース インジェクション攻撃がデータに含まれている可能性を無視することを意味します。</p>
  <h1>状況</h1>
  <p>すべてのアプリケーションにより入力が制限およびサニタイズされる必要があります。</p>
  <h1>対策</h1>
  <p>推奨される入力検証方法は、許可する内容を最初から制約しておくことです。 既知の不適切な文字を探すことでデータを検証するより、既知の有効な型、パターン、範囲でデータを検証するほうがはるかに簡単です。 アプリケーションを設計するときは、アプリケーションに入力されるデータを把握しておきます。 通常、有効なデータの範囲は、潜在的に悪意のある入力より限定されます。 ただし、多層防御のためには、既知の不適切な入力を拒否してから入力をサニタイズしたい場合があります。 推奨の戦略については、図 4.4 に示されています。</p>
  <p>
    <b>
      <i>入力検証戦略: 入力の制限、拒否、およびサニタイズ</i>
    </b>
  </p>
  <p />効果的な入力検証方法を作成するには、次のアプローチとそのトレードオフに注意します。<ul><li><b>入力を制限</b>します。<li><b>型、長さ、形式、および範囲に関してデータを検証</b>します。<li><b>既知の無効な入力を拒否</b>します。<li><b>入力をサニタイズ</b>します。</li></li></li></li></ul><h2>入力を制約する</h2><p>入力を制約するとは、適切なデータを許可することです。 これは推奨されるアプローチです。 ここでの考え方は、型、長さ、形式、および範囲を使用して、許容入力のフィルターを定義することです。 アプリケーションのフィールドに対する許容入力は何かを定義し、強制します。 それ以外は不適切な入力として拒否します。</p><p>入力の制約には、その地域の言語 に適切な方法で入力の正規化形式を確立できるように、サーバに文字セットを設定することなども含まれることがあります。</p><h2>データの型、長さ、形式、範囲でデータを検証する</h2><p>入力データを操作し処理するのに使用されるクラス内やデータ アクセス ルーチン内などのように、可能な場合には必ず、入力データに対して強力な型チェックを行います。 たとえば、入力フィールドの強力な型チェックを利用するため、パラメータ化されたストアド プロシージャをデータ アクセスに使用します。</p><p>文字列フィールドは、長さをチェックする必要もあり、多くのケースでは適切な形式であるかどうかもチェックされます。 たとえば、郵便番号や暗証番号 (PIN) などには、明確に定義された形式があり、正規表現を使用して検証できます。 徹底したチェックは、プログラミングの習慣として良いというだけではありません。 攻撃者がコードをエクスプロイトするのが一層難しくなります。 攻撃者は型チェックを通過できても、長さチェックによってお気に入りの攻撃がしにくくなる場合もあります。</p><h2>既知の不適切な入力は拒否する</h2><p>「不適切」なデータは拒否します。 ただし、このアプローチに頼りきりになってはいけません。 このアプローチは通常、先に説明した「許可する」アプローチほど効果的ではなく、組み合わせて使用するのが最善です。 不適切なデータを拒否するということは、悪意のある入力のバリエーションをアプリケーションがすべて把握していることを前提にしています。 文字を表現する方法には複数あることを思い出してください。 これが、「許可する」ほうが好ましいアプローチであるもう一つの理由です。</p><p>「拒否する」アプローチは、すでに展開済みのアプリケーションに対してや、大幅な変更を行う余裕がない場合には役立ちますが、一般的な攻撃の識別に使用できるパターンなどの不適切なデータは一定のままではないので、「許可する」アプローチほど堅固ではありません。 不正なデータは時が経つにつれて変化することがあるのに比べ、有効なデータは一定のままです。</p><h2>入力をサニタイズする</h2><p>サニタイズとは、潜在的に悪意のあるデータを安全にすることです。 これは、許可されている入力の範囲内であっても、入力の安全性を保証できない場合に役立ちます。 サニタイズには、ユーザーが提供した文字列の末尾からヌルを除去することから、値をエスケーピングして文字として扱われるようにすることまで含まれています。</p><p>Web アプリケーションで入力をサニタイズするその他の一般的な例は、URL エンコーディングまたは HTML エンコーディングを使用してデータを包み、実行可能なスクリプトとしてではなく、文字テキストとして扱うことです。 <b>HtmlEncode</b> メソッドは HTML 文字をエスケープして除外し、<b>UrlEncode</b> メソッドは URL をエンコードして有効な URI リクエストになるようにします。</p><h3>実践</h3><p />次に示すのは、前述のアプローチを一般的な入力フィールドに適用した例です。<ul><li><b>LastName フィールド</b><b></b>。これは、入力を制約することが適切な場合の良い例です。このケースでは、O'Dell といった名前を扱うため、ASCII の A-Z と a-z、およびハイフンとアポストロフィー (SQL にとっては重要でない) の範囲の文字列データを許可します。 長さも、予想される最も長い値に制限するといいでしょう。 <li><b>数量フィールド</b>。これは入力を制限することが有効なもう一つの例です。 この例では、単純な型と範囲の制限を使用します。 たとえば、入力データは 0 と 1000 の間の正整数である必要があるかもしれません。 <li><b>フリーテキスト フィールド</b>。例としては、掲示板のコメント フィールドなどがあります。 このケースでは文字と空白、およびアポストルフィー、カンマ、ハイフンなどの一般的な記号も許可するかもしれません。 許可されたセットには、小なり (<)、大なり (>)、ブラケット ([])、中かっこ ({}) の各記号は含まれていません。 <p />アプリケーションの中には、ユーザーが、ボールド「&lt;b&gt; 」、イタリック「&lt;i&gt; 」などの限られたスクリプト記号のセットを使用してテキストにマーク付けしたり、あるいは好みの URL へのリンクを含めたりできるものもあります。 URL の場合、検証する際には URL として扱われるように値をエンコードする必要があります。 <p>フリー テキスト フィールドの検証の詳細については、第 10 章「<a href="http://msdn.microsoft.com/library/en-us/dnnetsec/html/THCMCh10.asp">Building Secure ASP.NET Pages and Controls (セキュリティ保護された ASP.NET ページとコントロールを構築する)</a>」の「Input Validation (入力検証)」を参照してください。</p><li><b>ユーザー入力を検証しない既存の Web アプリケーション</b>。フィールドやエントリ ポイントごとにアプリケーションが許容入力を確認するのが理想的なシナリオです。 しかし、ユーザー入力を検証していない既存の Web アプリケーションがある場合、アプリケーションの入力検証方法を改善できるまで、リスクを軽減する応急対応が必要です。 入力が安全に取り扱われるかどうかは、入力源やアプリケーションでの使用法によるため、以下のいずれのアプローチも入力が安全に取り扱われることを確実に保証するものではありませんが、短期的にセキュリティを向上させる応急処置として現在、実践されています。<ul><li><b>クライアントにライトバックする際のユーザー入力の HTML エンコーディングおよび URL エンコーディング</b>。このケースでは、HTML として扱われる入力はなく、出力はすべて保護された形式で書き戻されることを前提としています。 これは、サニタイズに相当します。 <li><b>悪意のあるスクリプト文字の拒否</b>。これは既知の不適切な入力を拒否するケースです。 このケースでは、悪意のある文字の設定可能なセットが、入力を拒否するために使用されます。 先に説明したように、このアプローチの問題は、何が不適切なデータかは状況によって変わるということです。 </li></li></ul></li></li></li></li></ul><p>入力コーディング、正規表現の使用、および ASP.NET 検証制御の詳細と例については、第 10 章「Building Secure ASP.NET Pages and Controls (セキュリティ保護された ASP.NET ページとコントロールを構築する)」の「Input Validation (入力検証)」(<a href="http://msdn2.microsoft.com/en-us/library/aa302426.aspx">http://msdn2.microsoft.com/en-us/library/aa302426.aspx</a>) を参照してください。</p><h1>その他のリソース</h1><ul><li>詳細については、「Chapter 4 - Design Guidelines for Secure Web Applications (第 4 章 - セキュリティ保護された Web アプリケーションの設計ガイドライン)」(<a href="http://msdn2.microsoft.com/en-us/library/aa302420.aspx">http://msdn2.microsoft.com/en-us/library/aa302420.aspx</a>) を参照してください。&nbsp; </li></ul><hr /><p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>