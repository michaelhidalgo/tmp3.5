<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1799929828" Content_Hash="675854995">
  <Metadata>
    <Id>3edf7432-bc87-4540-9cbd-cba9af9eefe5</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>セキュリティ設計ガイドラインを適用する</Title>
    <Category>セキュリティ工学</Category>
    <Phase>設計</Phase>
    <Technology> 任意</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>行うべき事柄</h1>
  <p>実績のある設計技法、パターン、原則を使用して、不適切な設計によって導入される多くの脆弱性を排除します。 実績のある設計原則を採用し、他者の間違いから学習することで、最初からアプリケーションの安全を確保することができます。</p>
  <h1>理由</h1>
  <p>セキュリティ設計ガイドラインを採用して一般的な脆弱性に対処することにより、設計の独自の部分に集中できるため、結果として Attack Surface (攻撃対象領域) が軽減します。</p>
  <h1>状況</h1>
  <p>開発ライフサイクルのアーキテクチャおよび設計の段階で、セキュリティ設計ガイドラインを適用します。</p>
  <h1>対策</h1>
  <p>次のアクションを実行し、プロジェクトで利用するセキュリティ設計ガイドラインを用意します。</p>
  <ol>
    <li>
      <p>
        <strong>ガイドラインの品質要件を確立します。</strong> 次の必要条件を満たしている場合にのみ、各ガイドラインをプロジェクトで採用します。</p>
      <ul>
        <li>
          <p>
            <strong>実用性。</strong> このガイドラインを採用することにより、脆弱性が軽減されなければなりません。</p>
          <li>
            <p>
              <strong>関連性。</strong> 実際にアプリケーションに影響を与えることが確認されている脆弱性に関連していなければなりません。</p>
            <li>
              <p>
                <strong>十分な効果。</strong> 広範囲の影響を与えるエンジニアリング上の重要な決定を表していなければなりません。</p>
            </li>
          </li>
        </li>
      </ul>
      <li>
        <p>
          <strong>脆弱性の関連カテゴリを特定します。</strong> 設計ガイドラインは、一般的なアプリケーション脆弱性カテゴリ別に整理されています。カテゴリには、入力/データ検証、認証、認可、構成管理、機微データ、暗号化、例外管理、監査とログ記録があります。 カテゴリは、間違いが最も起こりやすい、アプリケーション セキュリティ設計の主要な領域を表しています。 </p>
        <li>
          <p>
            <strong>アプリケーション固有のガイドラインを特定します。</strong> 設計するアプリケーションに応じて、対処しなければならない問題の種類が変わります。 たとえば、安全な Web アプリケーションを設計する場合は、ユーザーを効果的に認証および認可して、公共のネットワークに送信する機微データを保護し、セッション ハイジャックなどの攻撃を防止するガイドラインに従うことが重要です。 安全でスマートなクライアント アプリケーションを設計する場合は、この種類のアプリケーションで発生する最も危険な脅威に対処するように、一連のガイドラインが変更されます。 </p>
          <li>
            <p>
              <strong>展開上の考慮事項を特定します。</strong> アプリケーションの設計フェーズで、会社のセキュリティ ポリシーおよび手順とともに、アプリケーションを展開するインフラストラクチャをレビューすることをお勧めします。 多くの場合、アプリケーションを展開する環境には厳格な制約があり、アプリケーション設計でもその制約を反映する必要があります。 たとえば、プロトコルやポートの制約、または特定の展開トポロジーが原因で、 設計面において妥協が必要になる場合もあります。 後で不都合が発生しないように、設計フェーズの初期段階で制約を特定します。ネットワーク チームとインフラストラクチャ チャームのメンバーにこのプロセスを支援してもらいます。</p>
            <li>
              <p>
                <strong>セキュリティ フレームを用意します。</strong> 一連のガイドラインから、パターンベースのセキュリティ フレームまたはフレームワークを抽出します。このフレームまたはフレームワークにおいて、不適切な設計によりセキュリティ上の脆弱性を引き起こす可能性のあるすべての領域を記述します。 このセキュリティ フレームでは、ガイドラインを追加したり、新しく発見された脆弱性に基づいて既存のガイドラインを絞り込んだりすることができます。 このセキュリティ フレームはパターンベースの情報モデルであり、設計しているアプリケーション タイプ専用の一連のセキュリティ関連カテゴリを定義します。 このカテゴリは、セキュリティ上の間違いが最も起こりやすい領域を表しています。</p>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <h1>その他のリソース</h1>
  <ul>
    <li>詳細については、<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/THCMCh04.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/THCMCh04.asp の「セキュリティ保護された Web アプリケーションの設計ガイドライン」を参照してください。</a></li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>