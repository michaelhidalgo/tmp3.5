<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1727473855" Content_Hash="1472701215">
  <Metadata>
    <Id>8c23cde8-ec0b-4d00-8661-fd8ac632683f</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>フォーマット、範囲や長さの検証にスキーマの正規表現を使用する</Title>
    <Category>入力とデータの検証</Category>
    <Phase>実装</Phase>
    <Technology>WCF 3.5</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用対象</h1>
  <ul>
    <li>Microsoft® Windows Communication Foundation (WCF) 3.5 
<li>Microsoft Visual Studio® 2008</li></li>
  </ul>
  <h1>行うべき事柄</h1>
  <p>書式、範囲や長さを検証するためのスキーマで正規表現を使うことを検討します。</p>
  <h1>理由</h1>
  <p>検証用のスキーマで正規表現を使用すると、複雑な検証コードを実装する必要なしに、複雑な検証ロジックを使用できるようになります。 また、それはビジネス ロジックから検証ロジックを分離できるようになります。</p>
  <h1>状況</h1>
  <p>すべての入力は、そのソースに関わらず、検証される必要があります。 静的であるはずのデータベースにあるデータでも、データがローカル コードベースの対象範囲内で静的でない限り、悪意のあるユーザーにより編集可能です。 </p>
  <h1>対策</h1>
  <p>スキーマ検証は、書式、長さ、型に関する妥当性チェックのために、XML ルールを使用してデータ型の検証を作成する方法を提供します。 それは正規表現を使用してサポートします。 正規表現なしでは、複雑な検証コードが必要になります。</p>
  <p>以下のスキーマ例は、1 ～ 5 の値を持つ整数、長さ 5 の文字列、社会保障番号、および有効な形式による郵便番号の検証を例示しています。</p>
 <pre>&lt;xs:schema elementFormDefault="qualified" targetNamespace="<a href="http://microsoft.patternpractices.wcfguide/">http://Microsoft.PatternPractices.WCFGuide</a>" xmlns:xs="<a href="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</a>" xmlns:tns="<a href="http://microsoft.patternpractices.wcfguide/">http://Microsoft.PatternPractices.WCFGuide</a>"&gt;<br />  &lt;xs:element name="GetData"&gt;<br />    &lt;xs:complexType&gt;<br />      &lt;xs:sequence&gt;<br />        &lt;xs:element minOccurs="1" name="CustomerInfo" nillable="false" type="tns:CustomerData" /&gt;<br />      &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br />  &lt;/xs:element&gt;<br />  &lt;xs:complexType name="CustomerData"&gt;<br />    &lt;xs:sequence&gt;<br />      &lt;xs:element name="CustomerID" type="tns:CustIDLimitor"&gt;<br />      &lt;/xs:element&gt;<br />      &lt;xs:element name="text" type="tns:CustomerN"&gt;<br />      &lt;/xs:element&gt;<br />      &lt;xs:element name="ssn" type="tns:SSN"&gt;<br />      &lt;/xs:element&gt;<br />      &lt;xs:element name="zip" type="tns:us-zipcode"&gt;<br />      &lt;/xs:element&gt;<br />    &lt;/xs:sequence&gt;<br />  &lt;/xs:complexType&gt;<br />  &lt;xs:simpleType name="SSN"&gt;<br />    &lt;xs:restriction base="xs:token"&gt;<br />      &lt;xs:pattern value="[0-9]{3}-[0-9]{2}-[0-9]{4}"/&gt;<br />    &lt;/xs:restriction&gt;<br />  &lt;/xs:simpleType&gt;<br />  &lt;xs:simpleType name="us-zipcode"&gt;<br />    &lt;xs:restriction base="xs:string"&gt;<br />      &lt;xs:pattern value="[0-9]{5}(-[0-9]{4})?"/&gt;<br />    &lt;/xs:restriction&gt;<br />  &lt;/xs:simpleType&gt;<br />  &lt;xs:simpleType name="CustomerN"&gt;<br />    &lt;xs:restriction base="xs:string"&gt;<br />      &lt;xs:minLength value="1" /&gt;<br />      &lt;xs:maxLength value="5" /&gt;<br />    &lt;/xs:restriction&gt;<br />  &lt;/xs:simpleType&gt;<br />  &lt;xs:simpleType name="CustIDLimitor"&gt;<br />    &lt;xs:restriction base="xs:int"&gt;<br />      &lt;xs:minInclusive value="1" /&gt;<br />      &lt;xs:maxInclusive value="5" /&gt;<br />    &lt;/xs:restriction&gt;<br />  &lt;/xs:simpleType&gt;<br />  &lt;xs:element name="GetDataResponse"&gt;<br />    &lt;xs:complexType&gt;<br />      &lt;xs:sequence&gt;<br />        &lt;xs:element minOccurs="1" name="GetDataResult" nillable="false" type="tns:CustomerData" /&gt;<br />      &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br />  &lt;/xs:element&gt;<br />&lt;/xs:schema&gt;<br /></pre>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>