<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-313158263" Content_Hash="-2076968706">
  <Metadata>
    <Id>dd1a00d0-7951-43f8-8f13-a719348b1b02</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>アプリケーションを異常なアクティビティにインストルメント化する</Title>
    <Category>監査とログ記録</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>行うべき事柄</h1>
  <p>アプリケーションを装備して、異常、または怪しいアクティビティを監視してください。&nbsp; 異常なアクティビティには、古い認証チケットのリプレイや一定期間における非常に多いログインの試行などが挙げられます。 </p>
  <h1>理由</h1>
  <p>不審なアクティビティの分析により、潜在的な問題を検出し素早い対応が可能になります。</p>
  <h1>状況</h1>
  <p>全てのアプリケーションは異常なアクティビティをログ記録しますが、ログの内容はアプリケーションのセキュリティ基盤によって異なります。&nbsp; 異常なアクティビティの定義はシステムに依存するものですが、認証プロトコルおよびその他のシステム詳細に関する特定セキュリティは特定カテゴリで指定されるものです。&nbsp; 異常なアクティビティの追加カテゴリにはビジネス プロセスも含まれます。</p>
  <h1>対策</h1>
  <p>全ての異常なアクティビティがログ記録されるようにするのはきちんと注意さえすれば簡単なことです。&nbsp; そのプロセスには次のステップに従ってください。</p>
  <ol>
    <li>
      <p>
        <strong>通常とは異なるアクティビティをアプリケーションに定義します。</strong> 初めに行うべき最も重要な手順は、アプリケーションにとって不審なアクティビティがどのようなものであるかを理解することです。&nbsp; 各アプリケーションのビジネスの焦点は独特なものであり、多くは各アプリケーション毎に検討しなければならない詳細内容が存在します。&nbsp; たとえば、ロギングはより大きな詐欺防止キャンペーンの一部である可能性があります。&nbsp; 広範囲の様々なアプリケーションタイプにわたって、不審とされるアクティビティがあります。</p>
      <ul>
        <li>繰り返される認証試行の失敗<li>古いセッションに関する情報または認証チケットの使用を試みている<li>大きな、素早いトランザクション<li>通常の時間外に発生するトランザクション<li>アプリケーションのエラー、特にユーザーによって簡単に起きにくいもの、または深い階層で発生するもの</li></li></li></li></li>
      </ul>
      <li>
        <p>
          <strong>十分なデータをログ記録します。</strong> アプリケーションの異常なアクティビティとは何か、それを一端理解できれば、それが適切にログ記録されるようにしなければなりません。&nbsp;ログ記録される個別のデータにより、正しいロギングは異なります。 以下に例を示します:</p>
        <p>古い認証チケットを再利用すると自動的に失効チケット障害イベントが発生します。&nbsp; ログイン回数が多すぎる場合のイベントを発生させるためには、イベント ハンドラーを<b>Login</b> （ログイン制御）の <b>Login</b>（ログイン エラー）イベントに書込む必要があります。&nbsp; ハンドラーで<b>Membership.GetUser(Login1.UserName).IsLockedOut</b> を呼び出し、ユーザーに過剰なログイン試行があるかどうかを判断します。&nbsp; その後、カスタム イベントを立ち上げ、アカウントがロックアウトされたことを示します。&nbsp; カスタム イベントは、様々な非認証関連の異常なアクティビティにも発生させることが可能です。 </p>
        <p>その他の不審なアクティビティは、アプリケーション固有のアプローチが必要です。&nbsp; 疑わしいアクティビティのログは、既存のログ ファイルをパースして、単一のホストまたはユーザーによる非常に短い時間のトランザクション (通常は大量発注など) といった変則的なアクティビティを特定することにより、最も高い効果が得られる場合があります。</p>
        <li>
          <p>
            <strong>ログを監視するようにする。</strong> 次のステップは、ログが監視されていて、その中の情報に対して対応が取られることを保証することです。&nbsp; ログ記録は、その結果が日の目を見なければ、何の役にも立ちません。&nbsp; アプリケーションを管理する操作チームと共に、ログ イベントを監視し対応する計画を立てます。&nbsp; 状況に応じて、計画をゼロから立てる必要がある場合もあれば、既存のフレームワークに組み込める場合もあります。 </p>
          <p>監視フレームワークをゼロから定義する場合に、検討する必要がある事柄を以下に示します: </p>
          <ul>
            <li>ログをいつ監視する必要があるか。アプリケーションによっては、常時監視する必要がありますが、多くは 1 日 8 時間、週 5 日間で十分です。 <li>どの程度の頻度でログを監視するか。アプリケーションが大きな電子商取引サイトの場合、ログを監視する専門チームが必要かもしれませんが、小規模な Web アプリケーションでは、シスアドが 1 日に 2、3 回確認すれば十分安全です。 <li>どのくらいの応答時間が必要ですか。サイトに深刻な問題がある場合、最初にログにそれが現れます。 問題に対する許容値は、数分ですか、数時間ですか、数日ですか。 <li>潜在的な課題に対して、どのような手順で対処しますか。 <li>ログやログから導かれる情報に対するアクセスをどのように制御しますか。 それは、どの程度機微な情報と考えられますか。 <li>ログ監視チームにはどのような応答機能がありますか。&nbsp; ログ監視だけで動作に移せる情報がなければ何の意味もありません – セキュリティ侵害のあったアカウントはロックして、マシンにはパッチをかけたり、オフラインにしたりする必要があるでしょう。</li></li></li></li></li></li>
          </ul>
          <li>
            <p>
              <strong>ログの落とし穴を避けます。</strong> あまりにも多くの情報をログ記録すると、それ自体が問題になる可能性があります。&nbsp; アプリケーションから確認しているログ イベントのボリュームの見当が付いたら、何らかのログ調整を実施して、対処できる割合まで情報の流れを減らすことは試みる価値があります。&nbsp; 適切なログ調整は、冗長な情報のみを排除し、最も重要な情報を最初に表面化させる方法になります。 </p>
            <p>異常な状況の検出に基づいて自動的に対処することは、非常に危険であり、避けるべきです。&nbsp; イベント (たとえば、ログイン試行) が発生する速度を調整することは理にかなっていますが、そのアクションを防止すると、実施が容易な DoS 攻撃をアプリケーションが受ける可能性があります。 </p>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <h1>問題の例</h1>
  <p>電子商取引サイトでは1時間につき何百件ものトランザクションが処理されますが、基本的なウェブ サーバおよびデータベース トランザクション ログしか記録に残していません。&nbsp; 攻撃者がログイン スクリプトに脆弱性を見つけて高額の取引があるいくつかのアカウントを盗んでも、商品が出荷されてしまった後にならないとその侵入には誰も気付きません。&nbsp;</p>
  <h1>ソリューションの例</h1>
  <p>電子商取引サイトにおいては1時間に数百件ものトランザクションを処理し、別のセキュリティ ログでアプリケーションの異常なアクティビティを記録しています。&nbsp; ログはサイト運営チームにより毎日24時間体制で監視され、攻撃があるとすばやく対応し、支援が必要な場合には開発者に連絡できるようになっています。&nbsp; ログには次のカテゴリーの情報が含まれます(その他多数)</p>
  <ul>
    <li>同じアカウントまたは同じ住所の複数アカウント ログイン失敗<li>顧客の経歴やサイト平均からして以上に大量のトランザクションがあった場合<li>同じ顧客から複数の高速トランザクションがあった場合<li>セキュリティが重要なシステムでの例外、HTTP エラーまたは SQL エラー</li></li></li></li>
  </ul>
  <p>攻撃者がログイン スクリプトに脆弱性を見つけていくつかのアカウントを盗もうとすると、毎日24時間体制で監視しているチームがログにその試みを発見して、アカウントを即座ロックし、攻撃者をブロックして開発者と強力して処置を実施します。</p>
  <hr />
  <p>出典: Microsoft patterns & practices guidance </p>]]></Data>
  </Content>
</TeamMentor_Article>