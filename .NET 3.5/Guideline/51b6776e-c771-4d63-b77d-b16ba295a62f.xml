<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="34502115" Content_Hash="1904811828">
  <Metadata>
    <Id>51b6776e-c771-4d63-b77d-b16ba295a62f</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>データベースの機微データを暗号化します</Title>
    <Category>機密のデータ</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <h1>行うべき事柄</h1>
  <p>データベースに保存されている機微データはどれも暗号化してください。</p>
  <h1>理由</h1>
  <p>SQL Server の暗号化されたデータが最後の砦です。 攻撃者が例えデータベースにアクセスすることに成功したとしても、データを復号化する必要があります。 鍵管理および暗号化オーバーヘッドはアプリケーションのコストや複雑性を増大させますが、休眠データの暗号化はアプリケーションの安全性を大幅に向上させることができます。 更に、これはクレジット カードの記録といったようなあるクラスのPersonally Identifiable Information（個人識別情報）で必要とされている、または必要となるもので、必要とされていない場合にでも企業責任を軽減することができます。 </p>
  <h1>状況</h1>
  <p>フィールドがかけるコストに見合った価値のあるものか、必要な保護レベルを検討して、暗号化は保護が必要な場合には使用するようにしてください。 暗号化の優秀な対象候補となるのはクレジット カード番号、パスワード、医療記録、政府 ID 番号、およびその他の機微性および/またはPersonally Identifiable Information（個人識別情報）でソルト付きハッシュとして保存できないものです。 </p>
  <h1>対策</h1>
  <p>
    <strong>データベース マスター キーのセットアップ。</strong>SQL Server をインストールすると、サービスマスター キーと呼ばれる全てのキーを直接または間接的に暗号化する対称鍵が自動的に作成されます。 これにセキュリティ侵害が発生すると、攻撃者はいずれは全てのデータベースの全ての鍵を解読してしまうことができます。 そのため、Windows の場合これはデータ保護 API (DPAPI) で保護されています。 データベースの対象範囲では、データベース マスター キーはデータベース内の全てのキー、証明書、およびデータの暗号化オブジェクトの root となるものであり、それらを使用する前にまずはデータベース鍵を（ユーザー供給パスワードと一緒に）作成する必要があります：</p>
 <pre>&amp;#9;CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'WeZ#6hv&amp;#42;XHq#akAEaqcr7&amp;#37;CUP3aQ'</pre>
  <p>結果として得られる鍵は三重 DES で暗号化され、二度保存されたものになります。 一つ目の収納場所は<strong>sys.symmetric_keys</strong>データベーステーブルで、供給されたパスワードで暗号化されており、二つ目はマスターデータベースにある<strong>sys.databases</strong>テーブルで、サービスマスター キーを使って暗号化されています。　 データベースを鍵とともに SQL Server 導入場所間で移動させるのは、サービス マスター キーが異なる為、余分な仕事となってしまいますのでご注意ください。 </p>
  <p>
    <strong>アプリケーションでの使用のためにサブキーを作成します。 </strong>データベースマスター キーが存在するようになると、必要とされる暗号化によってそれを使って３種類のキーを作成することができます：</p>
  <ul>
    <li>
      <p>非対称鍵は公開鍵と私有鍵の対で公開キ鍵暗号化に使用されます。 非対称鍵とユーザー支給のパスワードで保護された私有鍵の対は以下の通りに作成されます：</p>
 <pre>CREATE ASYMMETRIC KEY User1AsymmetricKey    AUTHORIZATION User1    WITH ALGORITHM = RSA_2048   <br />  ENCRYPTION BY PASSWORD = 'AVeryVerySecretPassword'</pre>
      <p>データベースマスター キーで保護されたものをもう一つ作成します：</p>
 <pre>CREATE ASYMMETRIC KEY User2AsymmetricKey <br />   AUTHORIZATION User1    WITH ALGORITHM = RSA_2048</pre>
      <li>
        <p>対称鍵は共用されている秘密に使用し、同じ鍵がデータの暗号化と復号化に使用されます。 対称鍵とユーザー支給のパスワードで保護された私有鍵の対は以下の通りに作成されます：</p>
 <pre>CREATE SYMMETRIC KEY User1SymmetricKey    WITH ALGORITHM = AES_256    <br /> ENCRYPTION BY PASSWORD = 'AVeryVerySecretPassword'</pre>
        <li>
          <p>公開鍵の包みとして証明書は重要なものです。 データベースマスター キーが既に存在する必要があります。 次は、データベースマスター キーで暗号化された User1 の証明書を作成します。</p>
 <pre>CREATE CERTIFICATE User1Certificate    AUTHORIZATION User1 WITH subject = 'Certificate For User1'GO</pre>
          <p>制限付きの User2 の証明書を作成します:</p>
 <pre>CREATE CERTIFICATE User2Certificate    AUTHORIZATION User2 WITH subject = 'Certificate For User2',   <br />  EXPIRY_DATE = '12/31/2005',    ENCRYPTION_PASSWORD = 'q&amp;#37;dsabciJ&amp;#QZk#wM5G&amp;#33;WB36z5m7'</pre>
        </li>
      </li>
    </li>
  </ul>
  <p>SQL Server に自己目的の証明書を作成させるか、Microsoft Certificate Server または VeriSign といったような信頼性の有る認局により発行された証明書をインポートすることができます。 オプションには私有鍵を使用するためのパスワードを設定する、SQL Server にデータベースマスター キーを使用させたり、作成および失効日付の設定が含まれています。 </p>
  <p>
    <strong>データベースのデータを暗号化します。 </strong>鍵または証明書が一端存在するようになると、暗号化をサポートする適切な T-SQL 機能を使ってデータを暗号化することができます。 次のように顧客が定義されている一覧表があるとしましょう:</p>
 <pre>CREATE TABLE Customer (    CustId int,     name nvarchar(30),     City varchar(20),   <br />   CreditCardType varbinary(300),    CreditCardNumber varbinary(300),     Notes varbinary(4000))GO</pre>
  <p>暗号化されたデータは二進ですので一覧表では<strong>varbinary型</strong>フィールドで収納する必要があります。 非対称および対称暗号化および証明書を使ってこの一覧表に列を挿入する方法は次の通りです。</p>
  <p>
    <strong>非対称暗号化の使用</strong>
  </p>
  <p>
    <strong>暗号化方法:</strong>
  </p>
 <pre>OPEN ASYMMETRIC KEY User1AsymmetricKey&amp;#9;<br />USING PASSWORD = 'AGreatPassword'INSERT INTO Customer VALUES (5, 'Sally Roe', 'Chatinika',&amp;#9;</pre>
 <pre>EncryptByKey(Key_GUID('User1AsymmetricKey'), 'Visa'),&amp;#9;<br />EncryptByKey(Key_GUID('User1AsymmetricKey'), '1234-5678-9009-8765'),&amp;#9;</pre>
 <pre>EncryptByKey(Key_GUID('User1AsymmetricKey'), 'One of our best customers. </pre>
 <pre>Treat like royalty.'))CLOSE ASYMMETRIC KEY User1AsymmetricKey</pre>
  <p>
    <strong>復号化方法:</strong>
  </p>
 <pre>OPEN ASYMMETRIC KEY User1AsymmetricKey&amp;#9;<br />USING PASSWORD = 'AGreatPassword'SELECT CustID, Name, City,&amp;#9;</pre>
 <pre>CONVERT(VARCHAR, DecryptByKey(CreditCardType)) AS CardType,&amp;#9;</pre>
 <pre>CONVERT(VARCHAR, DecryptByKey(CreditCardNumber)) AS CardNumber,&amp;#9;</pre>
 <pre>CONVERT(VARCHAR, DecryptByKey(Notes)) AS NotesFROM Customer </pre>
 <pre>WHERE CustID = 5CLOSE ASYMMETRIC KEY User1AsymmetricKey</pre>
  <p>
    <strong>対称暗号化の使用:</strong>
  </p>
  <p>
    <strong>暗号化方法:</strong>
  </p>
 <pre>OPEN SYMMETRIC KEY User1SymmetricKey&amp;#9;<br />USING PASSWORD = 'AGreatPassword'INSERT INTO Customer VALUES </pre>
 <pre>(5, 'Sally Roe', 'Chatinika',&amp;#9;</pre>
 <pre>EncryptByKey(Key_GUID('User1SymmetricKey'), 'Visa'),<br />&amp;#9;EncryptByKey(Key_GUID('User1SymmetricKey'), '1234-5678-9009-8765'),&amp;#9;</pre>
 <pre>EncryptByKey(Key_GUID('User1SymmetricKey'), 'One of our best customers. Treat like royalty.'))</pre>
 <pre>CLOSE SYMMETRIC KEY <br />User1SymmetricKey</pre>
  <p>
    <strong>復号化方法:</strong>
  </p>
 <pre>OPEN SYMMETRIC KEY User1SymmetricKey&amp;#9;USING PASSWORD = 'AGreatPassword'SELECT CustID, Name, City,&amp;#9;</pre>
 <pre>CONVERT(VARCHAR, DecryptByKey(CreditCardType)) AS CardType,&amp;#9;</pre>
 <pre>CONVERT(VARCHAR, DecryptByKey(CreditCardNumber)) AS CardNumber,&amp;#9;</pre>
 <pre>CONVERT(VARCHAR, DecryptByKey(Notes)) AS NotesFROM Customer </pre>
 <pre>WHERE CustID = 5CLOSE SYMMETRIC KEY User1SymmetricKey</pre>
  <p>
    <strong>デジタル証明書の使用:</strong>
  </p>
  <p>
    <strong>暗号化方法:</strong>
  </p>
 <pre>INSERT INTO Customer VALUES (1, 'Don Kiely', 'Fairbanks',    EncryptByCert(Cert_ID('User1Certificate'),</pre>
 <pre> 'Visa'),    EncryptByCert(Cert_ID('User1Certificate'), '1234-5678-8765-4321'),    </pre>
 <pre> EncryptByCert(Cert_ID('User1Certificate'), 'This customer is a real flake. Don''t trust him&amp;#33;'))</pre>
  <p>
    <strong>復号化方法:</strong>
  </p>
 <pre>SELECT CustID, Name, City,    CONVERT(VARCHAR,         DecryptByCert(Cert_ID('User1Certificate'),             </pre>
 <pre>CreditCardType)) AS CardType,    CONVERT(VARCHAR,         DecryptByCert(Cert_ID('User1Certificate'),            </pre>
 <pre> CreditCardNumber)) AS CardNumber,    CONVERT(VARCHAR,         </pre>
 <pre> DecryptByCert(Cert_ID('User1Certificate'),Notes)) AS NotesFROM Customer</pre>
  <h1>問題の例</h1>
  <p>電子商取引サイトは、データベースのカスタマー テーブルに次の定義を使用します。</p>
 <pre>CREATE TABLE Customer (    CustId int,     name nvarchar(30),     City varchar(20),      </pre>
 <pre>CreditCardType varchar(10),    CreditCardNumber varchar(19),    Notes varchar(4000))GO</pre>
  <p>そしてこのクエリを使用して新しいカスタマーを挿入します。</p>
 <pre>INSERT INTO Customer VALUES (1, 'Don Kiely', 'Fairbanks', 'Visa',     '1234-5678-8765-4321', </pre>
 <pre>'This customer is a real flake. Don''t trust him&amp;#33;')</pre>
  <p>サイトに SQL インジェクション脆弱性によるセキュリティ侵害があった場合、全てのクレジット カード番号を含む顧客データベース全体が攻撃者に失われてしまったことになります。</p>
  <h1>ソリューションの例</h1>
  <p>電子商取引サイトでマスター キー付きのデータベース サーバーが構成され、ユーザー証明書を作成し、データベースの顧客一覧表には次の定義が使用されています:</p>
 <pre>CREATE TABLE Customer (    CustId int,     name nvarchar(30),     City varchar(20),      </pre>
 <pre>CreditCardType varbinary(300),    CreditCardNumber varbinary(300),     Notes varbinary(4000))GO</pre>
  <p>そしてこのクエリを使用して新しいカスタマーを挿入します。</p>
 <pre>INSERT INTO Customer VALUES (1, 'Don Kiely', 'Fairbanks',    EncryptByCert(Cert_ID('User1Certificate'), </pre>
 <pre>'Visa'),    EncryptByCert(Cert_ID('User1Certificate'), '1234-5678-8765-4321'),    </pre>
 <pre> EncryptByCert(Cert_ID('User1Certificate'),         'This customer is a real flake. Don''t trust him&amp;#33;'))</pre>
  <p>サイトに SQL インジェクション脆弱性によるセキュリティ侵害があった場合、顧客の名前と住所だけが攻撃者に失われます。 クレジット カードの詳細情報ならびにメモ等は暗号化されていて攻撃者には読み取ることができません。</p>
  <h1>その他のリソース</h1>
  <ul>
    <li>データベース暗号化の導入に関する更なる情報については、「<a href="http://aspnet.4guysfromrolla.com/articles/022807-1.aspx">Using Asymmetric Encryption and Digital Signatures in a SQL Server 2005 Database</a>」（SQL Server 2005 での非対称暗号化およびデジタル署名の使用）の「Step by Step guide」（段階的指導）を参照してください。<li>SQL 2005 対称暗号化の使用に関する更なる情報については: <a href="http://www.sqlservercentral.com/columnists/mcoles/sql2005symmetricencryption.asp">SQL 2005 Symmetric Encryption</a>（SQL 2005 対称暗号化）にアクセスしてください。<li>アプリケーションのデータベースサーバの保護に関する更なる情報については: <a href="http://msdn.microsoft.com/en-us/magazine/cc163771.aspx">Keep Bad Guys at Bay with the Advanced Security Features in SQL Server 2005</a>（SQL Server 2005の高度なセキュリティ機能で悪者を近づけない）を参照してください。</li></li></li>
  </ul>
  <h1>関連する項目</h1>
  <ul>
    <li>
      <a href="/article/c6f3e32d-57b8-44cf-818a-c346d0014c06">ガイドライン: 機微データはプレーンテキストで保存しません</a>
      <li>
        <a href="/article/7d83d845-cd2b-4067-bb4c-5fbb890b9c9e">攻撃: 情報漏えい攻撃</a>
        <li>
          <a href="/article/8062c64d-ca73-428b-b35a-e7e5952b9da">攻撃: SQL インジェクション攻撃</a>
          <li>
            <a href="/article/29e3d723-354f-4d82-ac7b-b004dc759c2fc">攻撃: 選択平文攻撃</a>
            <li>
              <a href="/article/340f0d7d-6226-4948-9934-84a07b3064bf">攻撃: 選択暗号文攻撃</a>
              <li>
                <a href="/article/350d9e10-d3d2-4e15-af89-f6ea84c01320">攻撃: 鍵全面攻撃</a>
                <li>
                  <a href="/article/31a429d7-7d9e-41a9-83c0-39fb8409e1bf">チェックリストアイテム: データベースの機微データは暗号化します</a>
                  <hr />
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>出典: Microsoft Patterns &amp; Practices ガイダンス</p>]]></Data>
  </Content>
</TeamMentor_Article>