<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-784163962" Content_Hash="871313349">
  <Metadata>
    <Id>de715acf-fa57-41fc-866f-b356dbc92091</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>セキュリティ アクティビティを開発ライフサイクルに統合する</Title>
    <Category>セキュリティ工学</Category>
    <Phase>設計</Phase>
    <Technology> 任意</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>行うべき事柄</h1>
  <p>セキュリティをライフサイクルに統合します。 最新のセキュリティ設計、セキュアなコーディング プラクティス、セキュリティ テストをアプリケーション開発プロセスに必須要素として組み込みます。</p>
  <h1>理由</h1>
  <p>安全なアプリケーションを設計、ビルド、展開するために、アプリケーションの開発ライフサイクルに、セキュリティを組み込みます。</p>
  <h1>状況</h1>
  <p>現在のソフトウェア エンジニアリング プロセスに明確なセキュリティ アクティビティが含まれない場合は、重要なセキュリティ アクティビティを段階的に導入することができます。 最初に導入するべきアクティビティは定められたセキュリティの目的や、現在プロセスやアプリケーションで確認されている重大な問題によって変わります。</p>
  <h1>対策</h1>
  <p>ほとんどの組織では、以下の順序でアクティビティを行うと最善の結果が得られます。</p>
  <ol>
    <li>
      <p>
        <strong>セキュリティの目的。</strong> プロセスの初期の段階でセキュリティの目的と要件を定義します。 セキュリティの目的とは、データとアプリケーションの機密性、完全性、可用性に影響を与える制約と目標です。</p>
      <li>
        <p>
          <strong>セキュリティのアーキテクチャと設計レビュー。</strong> 設計フェーズで生じたバグを後工程で修正することは最もコストがかかります。 コストのかかるやり直しをライフサイクルの後工程で行う必要が生じるのを避けるため、セキュリティに焦点を絞ったアーキテクチャと設計のレビューを導入します。</p>
        <li>
          <p>
            <strong>Threat Modeling。</strong> セキュリティ開発に集中し、ソフトウェア エンジニアリングの全体的な品質を向上し、関連する脅威に対処し、テスト チームが特定の脆弱性をテストする計画を作成するのに役立つようにするために、脅威モデルを採用します。 脅威モデルは、さまざまな役割間のコミュニケーションの中心となり、開発者と IT プロフェッショナルがともにアプリケーションをよく理解するのに役立ちます。</p>
          <li>
            <p>
              <strong>セキュリティ コード レビュー。</strong> セキュリティの脆弱性を特定することに重点を置いてコードをすべて検査します。 設計上のバグは最もコストが高いですが、実装でのバグは最も一般的です。 セキュリティの脆弱性発見を目的としてコードをレビューすることによって、後工程でのやり直しを避け、コストの高いエクスプロイトを避けるのに役立つことがあります。</p>
            <li>
              <p>
                <strong>展開のためのセキュリティ レビュー。</strong> アプリケーションの展開中に、弱い、または不適切な設定からセキュリティの脆弱性が生じないかを検証します。 アプリケーションのセキュリティは、最も弱い箇所以上の強度にはなりません。 非常に効率の良いプロセスでも、展開中の構成エラーにために未完成になることがあります。</p>
              <li>
                <p>
                  <strong>セキュリティの設計ガイドライン。</strong> 実績のある設計技法、パターン、原則を使用して、不適切な設計によって導入される多くの脆弱性を排除します。 実績のある設計原則を採用し、これまでのミスから学習することで、確実にアプリケーションを最初から安全にできます。</p>
                <li>
                  <p>
                    <strong>セキュリティのテスト。</strong> リスクベースのアプローチ脅威モデル アクティビティからのアウトプットを使用すると、テスト アクティビティの対象範囲を定義し、テスト計画を作成するのに役立ちます。</p>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>]]></Data>
  </Content>
</TeamMentor_Article>