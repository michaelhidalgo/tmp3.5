<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1271215465" Content_Hash="179999145">
  <Metadata>
    <Id>df09332b-a43b-4b5f-98b2-8e9979f40daf</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>機微データを保護するためのメカニズムを特定する</Title>
    <Category>機密のデータ</Category>
    <Phase>設計</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>行うべき事柄</h1>
  <p>機微情報をネットワーク上ならびに persistent store に保存する際に保護するメカニズムを特定します&nbsp; 機微データの最初の保護層は、それがどこに行くかを制御することです。 機微データは可能な限りクライアントにプッシュすることはせず、サーバ側のセッションや、理想的にはデータベースで直接保存してください。 </p>
  <h1>状況</h1>
  <p>機微情報を扱うアプリケーションは全て、その保護について決定する必要があります。&nbsp; ユーザーを認証するアプリケーションは全て、他に処理する機微情報がないとしても、少なくとも認証データは保護しなければなりません。 </p>
  <h1>対策</h1>
  <p>機微データの保護の援助: </p>
  <h3>保護された構成を使用して構成ファイル内の機微データを保護する</h3>
  <p>.NET保護された構成を使用して、構成ファイル内の機微データを保護します。 ASP.NET Web.config ファイルの場合、<br /> Aspnet_regiis ツールを使って特定部分を暗号化することができます。 暗号化するべき機微な情報を通常含んでいるWeb.configファイルのセクションは次のとおりです:</p>
  <ul>
    <li>&lt;<b>appSettings</b>&gt; 。 このセクションはカスタム･アプリケーション設定を含みます。 <li>&lt;<b>connectionStrings</b>&gt; 。 このセクションは接続文字列を含みます｡ <li>&lt;<b>identity</b>&gt; 。 このセクションはなりすましの Credential 情報を含む可能性があります。 <li>&lt;<b>sessionState</b>&gt; 。 このセクションはプロセス外セッション状態プロバイダー用の接続文字列を含みます｡ </li></li></li></li>
  </ul>
  <p>保護された構成は DPAPI および RSA 暗号化をサポートします。 <b>connectionStrings</b> セクションを暗号化にDPAPI プロバイダーをマシン鍵ストア(既定の構成)と使用するには、コマンドプロンプトから次のコマンドを実行します:</p>
  <p>
    <b>aspnet_regiis -pe "connectionStrings" -app "/MachineDPAPI" </b>
  </p>
  <p>
    <b>-prov "DataProtectionConfigurationProvider"</b>
  </p>
  <p>場所</p>
  <ul>
    <li>
      <b>-pe</b> は、暗号化する構成セクションを特定します。 <li>-<b>app </b>はWebアプリケーションのバーチャルパスを特定します。 アプリケーションがネストされている場合、root ディレクトリからネストされたパスを特定する必要があります。"/test/aspnet/MachineDPAPI"が例として挙げられます。<li><b>-prov</b> はプロバイダー名を特定します。 </li></li></li>
  </ul>
  <h3>メモリー内のシークレットの曝露を最小化する</h3>
  <p>シークレットを操作する際は、シークレット データがどのようにメモリーに保存されているかを考慮します。 また、シークレット データがどれだけの期間平文形式で維持されるかを考慮します。 攻撃者がアプリケーションのアドレス空間を検知できる場合、プロセスのアドレス空間にある平文 (暗号化されていない文) で記述された機密情報は脆弱です。 また、その機密情報を含むメモリのページがページ ファイルにスワップ アウトされるときに、ユーザーがそのページ ファイルにアクセスできる場合、その機密データは脆弱です。 同様に、メモリに保持されている平文で記述された機密情報は、プロセスがクラッシュするとクラッシュ ダンプ ファイルに表示されてしまいます。 メモリ内の機密情報の暴露を最小限にするために、次の方法について検討します。</p>
  <ul>
    <li>
      <b>シークレットのコピーを複数作成しないようにします</b>。機密データのコピーを複数作成することにより、Attack Surface (攻撃対象領域) が増加します。 機密データのコピーを作成するのではなく、リファレンスを渡します。 また、秘密を不変の <b>System.String</b> オブジェクトに保存する場合、各文字列操作の後に新しいコピーが作成されることを理解しておいてください。 <li><b>シークレットの暗号化できるだけ長く維持します</b>。データは、機密情報を使用する直前に復号化します。 <li><b>平文 バージョンを可能な限り削除します</b>。機密データの平文によるコピーは、使用後即座にゼロで置き換えます。 </li></li></li>
  </ul>
  <h3>可能な場合、System.String ではなく SecureString を使用する</h3>
  <p>メモリで秘密を保護するために <b>System.Security.SecureString</b> 型の使用を検討してください。 <b>SecureString</b> オブジェクトは、メモリ中に暗号化されたフォーマットでデータを保存するため DPAPI 暗号化を使用します。 アクセスされる時のみ復号されます。 データを使用するには復号する必要がありますが、<b>System.String</b> ではなく <b>SecureString</b> を使用することにより多くの利点が得られます。</p>
  <ul>
    <li>メモリ内に保持される秘密のコピーの数を最小化することができ、Attack Surface (攻撃対象領域) を減らします。 <li>プロセス メモリのアドレス空間もしくはページ ファイルにアクセスできる攻撃者に、秘密が見えている時間を軽減します。 <li>プロセスがクラッシュした場合に、平分バージョンではなく秘密を暗号化したバージョンがダンプ ファイルになる可能性を増やします。 </li></li></li>
  </ul>
  <blockquote>
    <b>注意</b>: &nbsp;&nbsp;不運にも、多くのシナリオでは、使用できる前に <b>SecureString</b> を <b>System.String</b> に変換するように強制されます。 例えば、わずかな .NET Framework API メソッドだけが、現在 <b>SecureString</b> をサポートするオーバーロードを提供します。<b>SecureString</b> の使用は、ASP.NET アプリケーションではあまり適切ではありません。 例えば、フォーム関連の API の大部分が <b>System.String</b> ではなく <b>SecureString</b> の使用を許可する関数オーバーロードを持たないため、 Web ページからクレジット カード番号を取得する際に<b>System.String</b> を経由せずに済む可能性は低いです。</blockquote>
  <p />
  <hr />
  <p>出典: Microsoft patterns & practices guidance </p>]]></Data>
  </Content>
</TeamMentor_Article>