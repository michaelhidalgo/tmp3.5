<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-1772207906" Content_Hash="1658104360">
  <Metadata>
    <Id>eae5728a-438e-4653-9376-47cc46306fd7</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>ファイル名を受け入れる場合はファイル名を検証する</Title>
    <Category>ファイル I/O</Category>
    <Phase>実装</Phase>
    <Technology>.NET 3.5</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>行うべき事柄</h1>
  <p>呼び出し元からの入力ファイル名を受け取る必要がある場合、有効かどうかが分かるように、ファイル名がしっかりとフォームされていることを確認します。</p>
  <h1>理由</h1>
  <p>ユーザーからのファイル名またはパスを受け入れると、攻撃者が任意のファイルおよびリソースへのアクセスをアプリケーションに強要する結果となる可能性があります。</p>
  <h1>状況</h1>
  <p>ユーザーからのファイルを受け取る必要がある場合、常にファイル名を確認すべきです。</p>
  <h1>対策</h1>
  <p>入力ファイルパスを検証することには 2 つの側面があります。 必要なこと:</p>
  <ul>
    <li>有効なファイル システム名を確認します。 <li>アプリケーションのコンテキストで定義されるとおりの有効な場所かチェックします。 たとえば、ファイル名はアプリケーションのディレクトリ階層内にありますか？</li></li>
  </ul>
  <p>パスおよびファイル名を検証するには、次のコード例に示されるように <b>System.IO.Path.GetFullPath</b> メソッドを使用します。 また、このメソッドは指定されたファイル名を正規化します。</p>
 <pre>using System.IO;<br />public static string ReadFile(string filename)<br />{<br />&nbsp; // Obtain a canonicalized and valid filename<br />&nbsp; string name = Path.GetFullPath(filename);<br />&nbsp; // Now read the file and return the file content.<br />}  </pre>
  <p>正規化プロセスの一環として、 <b>GetFullPath</b> は以下のチェックを行います: </p>
  <ul>
    <li>ファイル名に <b>Path.InvalidPathChars</b> に定義されるような無効な文字が含まれていないかチェックします。<li>ファイル名が、物理ドライブや名前付きパイプ、メールスロット、またはLPT1、COM1、AUXおよび他のデバイスなどのDOSデバイスのような別のデバイスの種類ではなく、ファイルを表しているかどうかをチェックします。 <li>結合されたパスとファイル名が長すぎないかをチェックします。 <li>末尾のドットなどの冗長な文字を削除します。 <li> //?/ 書式を使うファイル名を拒否します。</li></li></li></li></li>
  </ul>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>