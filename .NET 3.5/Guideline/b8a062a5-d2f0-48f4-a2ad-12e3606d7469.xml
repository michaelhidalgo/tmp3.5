<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-880847783" Content_Hash="713523604">
  <Metadata>
    <Id>b8a062a5-d2f0-48f4-a2ad-12e3606d7469</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>構造化例外処理の使用</Title>
    <Category>エラーと例外の管理</Category>
    <Phase>実装</Phase>
    <Technology>WCF 3.5</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用対象</h1>
  <ul>
    <li>Microsoft® Windows Communication Foundation (WCF) 3.5 
<li>Microsoft Visual Studio® 2008</li></li>
  </ul>
  <h1>行うべき事柄</h1>
  <p>構造化例外処理を使用し、例外条件をキャッチします。 </p>
  <h1>理由</h1>
  <p>これを行うことにより、堅牢さを向上させ、情報漏えいにつながる可能性のある一貫しない状態でアプリケーションを放置することを避けることができます。 また、DoS 攻撃からアプリケーションを保護するためにも役立ちます。&nbsp;</p>
  <h1>状況</h1>
  <p>あるプログラムでエラーまたは例外条件が発生する可能性がある場合は、必ず構造化例外を使用します。 </p>
  <h1>対策</h1>
  <p>C# では、try / catch / finally コンストラクトを使用して、構造化例外処理を実装できます。 try ブロック内にコードを置くことでこれを保護し､catch ブロックを実装して例外をログ記録し処理できます。 また、finally コンストラクトを使用して、例外状態の発生の有無に関わらず、接続のようなクリティカルなシステム リソースが閉じていることを確認してください。<br /></p>
  <h1>その他のリソース</h1>
  <ul>
    <li>例外の基準について知るには､<a href="http://msdn2.microsoft.com/en-us/library/ms733763.aspx">http://msdn2.microsoft.com/en-us/library/ms733763.aspx の「例外の基準」を参照してください｡</a><li>例外管理 Q&A については、<a href="http://www.codeplex.com/WCFSecurity/Wiki/View.aspx?title=Questions%20and%20Answers&referringTitle=Home">http://www.codeplex.com/WCFSecurity/Wiki/View.aspx?title=Questions%20and%20Answers&referringTitle=Home にある｢WCF 3.5 質疑応答｣を参照してください｡</a></li></li>
  </ul>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>