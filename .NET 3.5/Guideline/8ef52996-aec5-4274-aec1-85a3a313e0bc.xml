<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-1834050468" Content_Hash="-442260487">
  <Metadata>
    <Id>8ef52996-aec5-4274-aec1-85a3a313e0bc</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>Client-side Validationへの依存の禁止</Title>
    <Category>入力とデータの検証</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>行うべき事柄</h1>
  <p>セキュリティについてはClient-side Validationに依存しないでください。 Server-side Validationを使用してデータが安全であることを確認し、それに基づいてセキュリティに関する意思決定を実施してください。 Client-side Validation &nbsp;は&nbsp;サーバへのラウンドトリップを削減し、ユーザー エクスペリエンスを向上させるためにのみ使用されるべきです。&nbsp;&nbsp;&nbsp;&nbsp; </p>
  <h1>理由</h1>
  <p>クライアント側検証は簡単に回避できます。 たとえば､悪意のあるユーザーは JavaScript を無効にすることによりクライアント側のスクリプト ルーチンを無効にする場合があります。&nbsp;ユーザー&nbsp;はまた、カスタム html を使って独自の&nbsp;フォーム ポストを構築するか、またはHTTP プロキシを使用してフォーム ポストを変更することもできます。&nbsp;&nbsp;開発者がクライアントのユーザー インターフェイスのコントロールに依存し、バック エンドですべての結果を検証しない場合、攻撃者がデータ入力制限を回避して意図しないアプリケーション機能へのアクセス権を得ることを可能にすると思われる、インジェクションの脆弱性を取り込む場合があります。</p>
  <h1>状況</h1>
  <p>実装中、&nbsp;クライアントからの&nbsp;すべての入力は、たとえ格納されない場合でも検証されることを確認してください。</p>
  <h1>対策</h1>
  <p>不正な&nbsp;入力の&nbsp;バリエーション&nbsp;を&nbsp;すべて指定しようとするのではなく、認められる入力を指定することが重要です (ブラックリスト化に対してホワイトリスト化を行う)。&nbsp;ASP.NETバリデーターコントロールを使用してサーバ側でユーザー入力をチェックし、入力が検証要件を満たさなかった場合はユーザーにフィードバックを提供します。&nbsp;アプリケーションの各フォームページで、次の手順に従います。</p>
  <ol>
    <li>
      <p>
        <strong>必須フィールドを決定します。</strong> 必要なフィールド検証コントロールを使用して、必要なすべてのフィールドが存在していることを確認します。 必須フィールドであるASPページ内のテキストフィールドを宣言する例を次に示します。</p>
 <pre>&lt;td&gt;<br />&nbsp;&nbsp; &lt;asp:RequiredFieldValidator runat=server <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ControlToValidate=txtName<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ErrorMessage="User ID is required."&gt; *<br />&nbsp;&nbsp; &lt;/asp:RequiredFieldValidator&gt;<br />&lt;/td&gt;<br />&lt;td&gt;User ID:&lt;/td&gt;<br />&lt;td&gt;&lt;input type=text runat=server id=txtName&gt;&lt;/td&gt;</pre>
      <p>入力が空白である場合、ラベルの横に * が表示されます。 エラーメッセージが要約で報告されます。 "ControlToValidate" プロパティは、検証するコントロールのIDを指定します。 ページの先頭に検証の要約を追加することが最終ステップです：</p>
 <pre>&lt;asp:ValidationSummary runat=server <br />HeaderText="There were errors on the page:" /&gt;<br /></pre>
      <li>
        <p>
          <strong>数値の幅の制約を強制します。</strong> RangeValidator コントロールを使用して、すべての数値を特定の有効範囲に制約します。 次は、1 から 50までの有効範囲を持つ、ASP ページ中の整数フィールドを宣言する例です。</p>
 <pre>&lt;td&gt;</pre>
 <pre>  &lt;asp:RangeValidator id="Range1"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ControlToValidate="txtState"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MinimumValue="1"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MaximumValue="50"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Type="Integer"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EnableClientScript="false"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text="The value must be from 1 to 10!"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; runat="server"&gt; * </pre>
 <pre>&nbsp; &lt;/asp:RangeValidator&gt;<br />&lt;/td&gt;<br />&lt;td&gt;State:&lt;/td&gt;<br />&lt;td&gt;&lt;input type=text runat=server id=txtState&gt;&lt;/td&gt;</pre>
        <li>
          <p>
            <strong>検証フィールド検証します。</strong> パスワード入力などのフィールドは、しばしばユーザーに再入力を求めることにより検証されます。 比較して有効性/完全性を確認するにはCompareValidatorコントロールを使用します。 次は、ASP ページで適切に検証するために一致する必要がある 2 つのパスワード フィールドを宣言する例です。</p>
 <pre>&lt;asp:CompareValidator runat=server<br />            ControlToValidate=txtRePWord<br />            ControlToCompare=txtPWord<br />             ErrorMessage="Passwords do not match." /&gt;</pre>
          <p>この場合、比較される2つのフィールドは "txtPWord" と"txtRePWord"です。 2 つのフィールドが一致しない&nbsp;場合、「パスワードが一致しません」というエラー メッセージが表示され、検証は失敗します。&nbsp;</p>
          <li>
            <p>
              <strong>文字列フィールドでタイプ制約を強制します。</strong> 文字列フィールドは、受け入れ可能な文字の範囲が数字や列挙型に比べはるかに広いため、効率よく検証することが最も難しい種類の入力です。 正規表現を使用することによって、有効なパターンおよび文字を指定するための柔軟なメカニズムが得られます。 郵便番号や電話番号のような文字列ベースのフィールドでさまざまなチェックを行うにはRegularExpressionValidatorを使用します。&nbsp; 以下は、数字の桁のみからなる 5 桁の郵便番号を表すべき&nbsp;テキスト フィールド&nbsp;を ASP ページ内で宣言する例と、その制限を強制するためのバリデーターです。</p>
 <pre>&lt;input type=text runat=server id=txtZip&gt;<br />      &lt;asp:RegularExpressionValidator runat=server<br />             ControlToValidate="txtZip"<br />             ErrorMessage="Zip code must be 5 digits, all numbers."<br />             ValidationExpression="[0-9]{5}"&gt; * </pre>
 <pre>      &lt;/asp:RegularExpressionValidator&gt;</pre>
 <pre>&lt;td&gt;Zip code:&lt;/td&gt;<br />&lt;td&gt;&lt;input type=text runat=server id=txtZip&gt;&lt;/td&gt;</pre>
            <li>
              <p>
                <strong>カスタム 検証を使用して、残りの入力制約を実施します。</strong> ASP.NET に組み込まれている検証コントロールは、Web アプリケーション内で通常発生する大部分のケースを処理しますが、これらの検証コントロールだけでは対応が十分でない場合もあります。&nbsp;CustomValidator は、既存の検証システムに追加することができるカスタム検証コードを有効にします。&nbsp;次は、ASP.NET ページ中でテキスト フィールドを宣言する例です。 このテキスト フィールドの場合、満たす必要のあるビジネス ロジックがありますが、このロジックは&nbsp;他の&nbsp;検証コンストラクトによって簡単に制限できないため、テキスト フィールド&nbsp;内の&nbsp;文字列&nbsp;が「a」という文字で始まらない&nbsp;ことを保証する&nbsp;カスタム バリデーターが実装されます。</p>
 <pre>&lt;%@ Page Language="vb" %&gt;<br />&lt;script runat=server&gt;</pre>
 <pre>public sub CheckID(source as Object, args as ServerValidateEventArgs)<br />&nbsp;&nbsp;&nbsp; args.IsValid = args.Value.substring(0, 1).tolower() &lt;&gt; "a"<br />end sub </pre>
 <pre>&lt;/script&gt;</pre>
              <p>この関数を呼び出すには、そのチェックを実行するよう開発者コードを呼び出すために設計されたCustomValidatorを追加します。 以下が宣言です:</p>
 <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:CustomValidator runat=server<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; controltovalidate="txtName" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; errormessage="ID is already in use." <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnServerValidate="CheckID" /&gt;</pre>
              <p>注目に値するのは、この操作が RegularExpression 検証制御を用いて実行することができた可能性もありますが、この場合は単純なバターン一致よりも明らかに複雑である高レベル検証が定義されることになるため (検証ルールがアプリケーションの状態に応じて変更されるかもしれないなど)、カスタム検証を使用するほうがより有効であるという点です。&nbsp;</p>
              <li>
                <p>
                  <strong>Regex クラスを使って他のソースを検証する</strong>
                </p>
                <p>多くのウェブ アプリケーションは、HTML コントロール、サーバ コントロール、クエリ文字列、およびCookieなどのさまざまなソースからの入力を受け入れます。 インジェクション攻撃を防ぐために、これらすべてのソースからの入力を検証します。 入力を検証するには正規表現を使用します。 以下の例は<b>正規表現</b> クラスの使用法を示しています。 </p>
 <pre>using System.Text.RegularExpressions ;<br /> // Instance method:Regex reg = new Regex(@"^[a-zA-Z'.\s]{1,40}$");<br />Response.Write(reg.IsMatch(Request.QueryString["Name"]));<br />// Static method:<br />if (!Regex.IsMatch(Request.QueryString["Name"],@"^[a-zA-Z'.\s]{1,40}$"))<br /> {<br />   // Name does not match expression<br /> }</pre>
                <p>頻繁に使用する正規表現をキャッシュできない場合は、パフォーマンス上の理由から不要なオブジェクト生成を避けるために、可能ならスタティック型<strong>IsMatch</strong> メソッドを使用するようお勧めします。</p>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <h1>問題の例</h1>
  <p>オンラインショッピングカート用の非常にシンプルなフォームを考えてみましょう。 カートコンポーネントは2つのコンポーネントから成ります：</p>
  <ol>
    <li>
      <p>注文処理のため送信するすべてのフィールドを含むHTMLフォーム:</p>
 <pre>&lt;html&gt;<br />  &lt;head&gt;<br />    &lt;title&gt;Widget shopping cart&lt;/title&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />&nbsp;&nbsp;  &lt;H1&gt;welcome to the most boring shopping cart on the web!&lt;/H1&gt; </pre>
 <pre>    A widget's current price is $19.95 USD. Please use the following form to submit an order.</pre>
 <pre>    &lt;form action="process_order.aspx" method="POST"&gt;   <br />      &lt;p&gt;Please enter the number of widgets you would like to purchase:&lt;/p&gt;<br />&nbsp;&nbsp;&nbsp;   quantity:&lt;br/&gt;<br />&nbsp;&nbsp;&nbsp;  &nbsp;&lt;select name="WidgetQuantity"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp; &lt;option value="1"&gt;1&lt;/option&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   &lt;option value="2"&gt;2&lt;/option&gt; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   &lt;option value="3"&gt;3&lt;/option&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   &lt;option value="4"&gt;4&lt;/option&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;  &lt;/select&gt;</pre>
 <pre>      ...<br />      &lt;input type="submit" value="order"/&gt;<br />    &lt;/form&gt;</pre>
 <pre>  &lt;/body&gt;<br />&lt;/html&gt;</pre>
      <li>
        <p>フォームの送信を処理し、注文を作成するために必要なステップを実行するASP.NET ページ</p>
 <pre>int&nbsp;dQuantity = Request("WidgetQuantity");<br />double dPrice = 19.95;</pre>
 <pre>double dCost = dQuantity * dPrice;</pre>
        <p>数量フィールドが正しいかを確認するための検証を欠いているため、このサーバ側のページには問題があります。&nbsp;注文数量の範囲制約が常に有効であることを数量フィールドが保証するので、ユーザーが規則通りにふるまい、示されているようにフォームを送信する場合には、アプリケーションは正常に動作します。&nbsp;しかし、賢いユーザーが自分だけのフォームを構築することを決め、負の数のWidgetQuantity フィールドを送信すると、マイナス残高が発生します。 使用する電子商取引システムによっては、これによりユーザーのアカウントにクレジットが発生する可能性があります。 また、このアプリケーションでは、会社の棚卸資産 からマイナス残高が差し引かれる可能性もあり、後日になって多大な悪影響やコストの発生をもたらす懸念があります。</p>
      </li>
    </li>
  </ol>
  <h1>ソリューションの例</h1>
  <p>フォームの送信を処理して、注文を作成するために必要な手順を実行する、次のASP.NETページを考えてみましょう。</p>
 <pre>&lt;%@ Page Language="vb" %&gt;<br />&lt;script runat=server&gt;<br />public sub OnSubmit(source as Object, e as EventArgs)<br />&nbsp;&nbsp;&nbsp; if Page.IsValid then<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Now we can perform our transaction.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int dQuantity = Request("WidgetQuantity");<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double dPrice = 19.95;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double dCost = dQuantity * dPrice;<br />&nbsp;&nbsp;&nbsp; end if<br />end sub<br />&lt;/script&gt;<br />&lt;html&gt;<br />&lt;head&gt;<br />&lt;title&gt;Validation Sample&lt;/title&gt;<br />&lt;/head&gt;<br />&lt;body&gt;</pre>
 <pre>&lt;form runat=server&gt;<br />&lt;asp:ValidationSummary runat=server headertext="There were errors on the page:" /&gt;</pre>
 <pre>&lt;table&gt;<br />&nbsp; &lt;tr&gt;<br />&nbsp;&nbsp;&nbsp; &lt;td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:RequiredFieldValidator runat=server <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; controltovalidate="WidgetQuantity"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; errormessage="WidgetQuantity is required."&gt;*<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/asp:RequiredFieldValidator&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/td&gt;<br />&nbsp;&nbsp;&nbsp; &lt;td&gt;A widget's current price is $19.95 USD. Please use the following form to submit an order.&lt;/td&gt;<br />&nbsp;&nbsp;&nbsp; &lt;td&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;select name="WidgetQuantity"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;option value="1"&gt;1&lt;/option&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;option value="2"&gt;2&lt;/option&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;option value="3"&gt;3&lt;/option&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;option value="4"&gt;4&lt;/option&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/select&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:RegularExpressionValidator runat=server display=dynamic<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; controltovalidate="WidgetQuantity"&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; errormessage="WidgetQuantity must be a non-zero, positive integer." <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; validationexpression="[1-9]{1}[0-9]{0,7}" /&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp; &lt;/td&gt;<br />&nbsp; &lt;/tr&gt;<br />...<br />&lt;/table&gt;&lt;br&gt;<br />&lt;input type=submit runat=server id=cmdSubmit value=Submit onserverclick=OnSubmit&gt;<br />&lt;/form&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;</pre>
  <p>ASP.NET Validator 制御は、サーバへのラウンドトリップを削減し、ユーザー エクスペリエンスを向上させるために Client-side Validation を提供するだけでなく、ウィジェット数量フィールドが&nbsp;正の整数であることを保証する&nbsp;&nbsp; Server-side Validation を提供します。 それはまた、注文の提出前に提供されなければならない必須フィールドとして検証されます。</p>
  <h1>その他のリソース</h1>
  <ul>
    <li>
      <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnaspp/html/pdc_userinput.asp"> ASP.NET&nbsp;におけるユーザー入力検証</a>
      <li>
        <a href="http://msdn2.microsoft.com/en-us/library/e5a8xz39.aspx">検証サーバ制御構文 </a>
        <li>
          <a href="http://en.wikipedia.org/wiki/Code_injection">汎用コードインジェクションの記事 </a>
        </li>
      </li>
    </li>
  </ul>
  <h1>関連する項目</h1>
  <ul>
    <li>
      <a href="/article/a1fc05ee-63a4-4568-b273-6ad485494a05">
        <a href="/article/4cfb84e3-b640-44c1-8950-cc38262ce118">アプリケーションは要求検証に依存しない</a>
      </a>
    </li>
  </ul>
  <hr />
  <p>出典: Microsoft patterns & practices guidance </p>]]></Data>
  </Content>
</TeamMentor_Article>