<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-744627110" Content_Hash="-76261245">
  <Metadata>
    <Id>e89cee5e-5ea9-4418-8955-8140ca44b020</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>セキュリティ コード レビューを実行する</Title>
    <Category>セキュリティ工学</Category>
    <Phase>実装</Phase>
    <Technology> 任意</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author>J.D. Meier, Srinath Vasireddy, Ashish Babbar, Rico Mariani, and Alex Mackman</Author>
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>概要</h1>
  <p>ここでは、セキュリティ コード レビューを実行する方法について説明します。 このモジュールは、アクティビティに関連する手順と結果を分析するための手法を示します。 </p>
  <h1>目的</h1>
  <p>このモジュールの目的は以下のとおりです。</p>
  <ul>
    <li>セキュリティ問題のコードを効果的に分析する方法を学習する。 <li>コードがもつセキュリティ問題の種類を特定する。 <li>コードで見つかった、優先的に修正する必要があるセキュリティ問題のリストを作成する。 </li></li></li>
  </ul>
  <h1>概要</h1>
  <p>適切に実施されたコード レビューは、他のどんなアクティビティよりもコードの安全を守ります。 コード レビューを実施することで、コードをテストまたは出荷する前にたくさんのセキュリティ問題を発見し、修正できます。 また、コード レビュー プロセスにより、開発チームはセキュリティのベスト プラクティスと経験を共有し、将来のセキュリティ問題を防止できます。 </p>
  <p>コード レビューを実行する前に、排除するべき不適切なコードのパターンを理解する必要があります。 パターンを理解することで、注意すべき点を明確に意識してコードをレビューできます。 レビューしているアプリケーションがセキュリティ上の目的を提示している場合、十分に理解しておく必要があります。 セキュリティ上の目的により、優先度が高くなる脆弱性の種類と、対象範囲から外してもよい脆弱性の種類があります。 </p>
  <p>プロジェクトの終了後にすべてをまとめてレビューするのではなく、重要な変更があった場合にその都度コードをレビューすることをお勧めします。 こうすることで、すべてのセキュリティ問題をまとめて確認するのではなく、変更内容に関連する問題を集中的に確認することができます。 </p>
  <p>コードや機能領域の一部に時間をかけ過ぎていることがわかった場合 (特に優先度が高くないものの場合)、後からレビューできるようにフラグ付けし、次に進みます。 </p>
  <h1>このモジュールの使用方法</h1>
  <p>このモジュールは、セキュリティのための効果的なコード レビューを実行するために使用します。 このモジュールを使用する際は、以下のことに留意する必要があります。</p>
  <ul>
    <li>
      <p>
        <b>レビューの目的を明確に設定する</b>: レビューは、集中的に行うことで効果が高まります。 レビューの最初の段階では、レビューしているコードに存在する可能性のあるセキュリティ問題を理解することに時間をかけます。 </p>
      <li>
        <p>
          <b>レビューの制限時間を設定する</b>: コード レビュー中、詳細な項目が多過ぎるあまりに、確認するべき高レベルのセキュリティの脆弱性を見失ってしまう場合があります。 レビューに適切な時間制限を設定し、時間制限に応じてレビューを最適化します。 一部の領域に時間をかけ過ぎていることがわかった場合 (特に優先度が高くない領域または目的の場合)、後からレビューできるようにフラグ付けし、次に進みます。 </p>
        <li>
          <p>
            <b>段階的かつ反復的にレビューする</b>: レビューの対象を、扱いやすい小さな部分のコードに限定します。 これにより、集中的なレビューを素早く行い、コードに存在する多数のセキュリティ問題を確認できます。 </p>
          <li>
            <p>
              <b>セキュリティのみをレビューする</b>: レビューの目的が多くなると、それぞれを達成しにくくなります。 コード レビューでは、セキュリティ上の個別の目的セットを設定し、それらに集中してください。 それぞれのレビューで、パフォーマンス、信頼性、機能の問題に集中します。 </p>
            <li>
              <p>
                <b>アプリケーションのアーキテクチャーを理解する</b>: アプリケーションのアーキテクチャーを十分に理解することで、効果的なコード レビューが可能になります。 レビューを開始する前には、少なくともコンポーネントのアーキテクチャーを理解しておく必要があります。 ユーザーからのデータフロー、コンポーネント間のデータフロー、あらゆるデータ レポジトリへのデータフローも、理解しておくとレビューの際に役立ちます。 </p>
              <li>
                <p>
                  <b>コーディング標準を更新する</b>: コード レビューを連続して行う場合は、繰り返し現れる主要な特徴を特定し、これらを開発部門のコーディング標準に追加します。 こうすることで、徐々に開発者の認識を高めることができます。 </p>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <h1>入力</h1>
  <p>コード レビューの実行時には、少なくともコードが利用できる状態であることが必要です。 さらに次のものも役立ちます。</p>
  <ul>
    <li>アーキテクチャーまたはコンポーネントのダイアグラム<li>データ フロー<li>データ スキーマ</li></li></li>
  </ul>
  <h1>出力</h1>
  <p>コード レビュー アクティビティの出力は、確認された脆弱性のセットに修正の優先度が付けられたものです。 </p>
  <h1>手順の概要</h1>
  <p>セキュリティ コード レビューのアクティビティには以下の手順が含まれます。</p>
  <ul>
    <li>
      <p>
        <b>手順 1:  セキュリティ コード レビューの目的を特定する</b>: レビューの目標と制約を設定します。 </p>
      <li>
        <p>
          <b>手順 2:  事前スキャンを実行する</b>: 静的解析を利用し、最初に見つけたいくつかのセキュリティ問題を基に、コードをより完全にレビューするときにセキュリティ問題を発見できそうな場所についてより良く理解します。 </p>
        <li>
          <p>
            <b>手順 3:  コードのセキュリティ問題をレビューする</b>: 多くのアプリケーションに共通のセキュリティ上の脆弱性を見つける目的でコードを徹底的にレビューします。 ステップ 2 の結果を利用し、集中的に分析します。 </p>
          <li>
            <p>
              <b>手順 4:  アーキテクチャー固有のセキュリティ問題をレビューする</b>: アプリケーション固有のアーキテクチャに関連するセキュリティ問題を探し、最終分析を完了します。 独自のセキュリティ メカニズムを実装している場合や、既知のセキュリティ上の脅威を軽減するために特に設計された機能を実装している場合、このステップは最も重要です。 </p>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <h1>手順 1:  セキュリティ コード レビューの目的を特定する</h1>
  <p>この手順の目的は、コード レビューの目標と制約を設定することです。 目的の設定に時間をかける必要はありませんが、確認する対象を理解せずにコードの広範囲な項目をレビューすることは推奨されません。 目標を設定せずにコード レビューを実行することは可能ですが、コードのどの部分を確認するかを見失い、セキュリティ問題を見つけにくくなります。 </p>
  <p>目的を設定する際は、レビューするアプリケーションに共通のセキュリティ問題の種類とともに、レビューが必要な特定のコードの変更点も理解しておく必要があります。 たとえば、ソース ファイルを初めてレビューする際は、次のカテゴリーのサブセットが関心の対象となる場合があります (レビュー中のコードの機能によります)。</p>
  <ul>
    <li>SQL インジェクション<li>クロスサイト スクリプティング<li>入力/データ検証<li>認証<li>認可<li>機微データ<li>コード アクセス セキュリティ<li>例外管理<li>データ アクセス<li>暗号化<li>危険なアンマネージ コードの使用<li>構成<li>スレッディング<li>文書化されていないパブリック インターフェイス</li></li></li></li></li></li></li></li></li></li></li></li></li></li>
  </ul>
  <p>後から行うレビューでは、直前のレビュー以降に加えられた変更に基づいて、これらのカテゴリーのさらに小さなサブセットが関心の対象となるでしょう。 </p>
  <p>効果的なセキュリティコード レビューを行うために、以下の目標と制約を設定します。</p>
  <ul>
    <li>
      <p>
        <b>時間</b>: 制限時間を設定します。 制限時間を決めることで、1 つの問題に時間をかけ過ぎることがなくなります。 長いレビューを 1 回行うよりも、短いレビューを複数回行うほうが効果的です。 </p>
      <li>
        <p />
        <b>問題の種類: </b>: 確認する問題の種類を決定します。 たとえば、以下の問題を検討します。<ul><li>機密性、完全性、可用性に影響する一般的な問題 <li>アプリケーションのサービス要件のセキュリティ品質に関連する問題 <li>アプリケーションのコンプライアンス要件に関連する問題 <li>アプリケーションが使用する技術に関連する問題 <li>アプリケーションが暴露する機能性に関連する問題 <li>脅威モデルで見つかった問題 (このアクティビティを行っている場合) Threat Modeling の手順については、<a rel="nofollow" href="http://msdn.com/ThreatModeling" title="http://msdn.com/ThreatModeling">http://msdn.microsoft.com/library/ms978516.aspx</a> を参照してください。</li></li></li></li></li></li></ul><li><b>対象範囲外の項目</b>: レビューの対象外にする項目を特定します。 これらの項目を対象範囲外にする理由を説明します。 たとえば、アプリケーションとデータベースの間に相互作用が無い場合、SQL インジェクションの確認は重要ではありません。 </li></li>
    </li>
  </ul>
  <h2>コード レビューの目的の決定</h2>
  <p>レビューの目的を決定する際は、以下の問題を検討します。</p>
  <ul>
    <li>
      <p>
        <b>レビュー中のコードに適用される一般的なコードディング エラーはどれか: </b> アプリケーションで使用されている技術のリストを作成します。 アーキテクチャーを確認する際は特に注意し、アプリケーションとの相互作用がある他のコンポーネントを特定します。 データベースが存在するかどうか。 コンポーネントが Web  ページにデータを表示するかどうか。 コンポーネントとネイティブ コードの間に相互作用があるかどうか。  コンポーネントに対して、直接的または媒介を利用して、ユーザーの入力があるか。 このリストを使用すると、確認が必要な問題を集中して探すことができます。 </p>
      <li>
        <p>
          <b>レビューの対象範囲は何か: </b> レビューするコードとレビューしないコードを理解しておくことが重要です。 </p>
        <li>
          <p>
            <b>脅威モデルがある場合、特定された脅威のうち、レビュー中のコードに適用されるものはどれか: </b> 適用される脅威を確認した後は、リスクが軽減されているものとされていないものの 2 つのカテゴリーに脅威を分類できます。 リスクが軽減されている脅威のリストを作成します。 対策として作成したコードはすべて、セキュリティ コード レビューに含める必要があります。 </p>
        </li>
      </li>
    </li>
  </ul>
  <h2>セキュリティ上の目的の例</h2>
  <p>以下はセキュリティ コード レビューの目的の例です。</p>
  <ul>
    <li>
      <p>コンポーネントへの信頼できない入力のすべてが、使用前に検証ルーティンに渡されることを確認する。 </p>
      <li>
        <p>エラー処理により、例外がソースの近くで確実にキャッチされることを確認する。 </p>
        <li>
          <p>計算の結果がメモリ割り当てやバッファ アクセスに使用される場合、数値オーバーフローやアンダーフローをチェックする。 </p>
          <li>
            <p>暗号化ルーティンにより、機密情報が素早く消去されることを確認する。 </p>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>コードの一部に限定した短いレビューを複数回行うことをお勧めします (チェックイン時など)。 レビュー対象のコードのバックログが大量にある場合は、レビュー時間を制限することがさらに重要になります。 コード レビューは細部に渡り、骨の折れる作業であるため、何時間も継続するとミスが起こりやすくなります。 また、制限時間を決めないと、特定の実装に時間をかけ過ぎてしまうことがあります。 制限時間を決めることで、他の場所のより重要な問題の確認へと意識的に進むことができます。 コード レビューのもう 1 つのコツに、パートナーとともに行うことが挙げられます。 レビューを行う人間が増え、議論が生まれることで、1 人で行う場合よりも長い時間レビューに集中できるようになります。 </p>
  <p>コード レビューは、集中的に行うことで効果が高まります。 コードを調べる際は、明確な目標と制限時間を定め、確認すべき問題を理解しておく必要があります。 これらを実践することで、レビューの成功率が大幅に高まるだけでなく、時間を軽減することもできます。 </p>
  <h1>手順 2:  事前スキャンを実行する</h1>
  <p>この手順では、コードのスキャンを実行してサンプルとなるセキュリティ問題のセットを見つけ出し、後続の手順でさらなるセキュリティ問題が発生しやすいと考えられる場所を特定します。 以下の 2 種類のスキャンを実行しなければならない場合があります。</p>
  <ul>
    <li>自動スキャン<li>手動スキャン</li></li>
  </ul>
  <p>これらのスキャンを組み合わせるか、どちらか一方のみを行うかは、制限時間やレビューの目的によって異なります。 </p>
  <h2>自動スキャン</h2>
  <p>自動スキャンの目的は、手動レビューで見逃される可能性のあるセキュリティ問題を見つけ出すことです。 ただし、自動スキャンでは多くの誤判定が出る可能性があり、手動レビューで検出されるセキュリティ問題をすべて見つけ出すことはできません。 </p>
  <p>コードの自動スキャンを行うには、静的解析ツールを使用します。 静的解析ツールを使用すると、サンプルとなるセキュリティ問題のセットを見つけ出し、手動で検出できる問題の傾向を深く理解することができます。 理論的には、静的解析ツールで見つけ出すことができる問題はすべて、手動レビューでも見つけ出すことができます。 しかし、静的解析ツールは、外部状態を一切把握も要求もせずにコードをテストするところに特徴があります。 静的解析ツールはアプリケーションや関数の目的を理解しないため、開発者やコード レビューの担当者が立てる可能性のある仮定を立てません。 静的解析ツールは、エラー ハンドラーの欠落、空の catch ブロック、整数オーバーフロー、スコープの問題などの不注意なコードのプラクティスの検出に向いています。 </p>
  <p>静的解析ツールを利用できない場合は、findstr コマンドライン ツールを使用するなどして、コードベースにテキスト検索を実行できます。 </p>
  <p>セキュリティ問題は、クラスターする傾向があることに注意してください。 スキャンで特定のコンポーネントや関数に大量のセキュリティ問題が見つかった場合、その領域を注意深く調べ、最初のパスで見逃されていた可能性のあるセキュリティ問題を発見します。 </p>
  <ul>
    <li>
      <p>
        <b>マネージ コードの考慮事項</b>
      </p>
      <p>マネージ コードは、スキャナーで検出されやすいセキュリティ問題の多くに対応します。 ネイティブ コードでは、バッファ オーバーラン、書式文字列の問題、潜在的に危険な Win32 API の使用、メモリ リークなどを十分な精度でスキャンできます。 マネージ コードは一部のセキュリティ問題を排除しますが、スコープの問題、整数オーバーフロー、クローニングの欠如、例外処理、データの切り詰め、ヌルチェックの欠如、メモリ割り当てやバッファ アクセスに使用される値の未確認など、他にも多くの潜在的な問題が存在します。 </p>
      <li>
        <p>
          <b>自動スキャンの限界</b>
        </p>
        <p>自動スキャンには、表面的なエラーの検出以外は期待できません。 自動スキャンは手動レビューを補うものであり、 代用とはなりません。 優れたスキャナーにも文脈上の問題は存在します。 コードの単一行によって引き起こされるセキュリティ問題の検出には優れ、単一の関数のコードの複数行に及ぶ問題の検出にも適していますが、複数の関数に対象範囲が及ぶセキュリティ問題の検出には一般的に適しません。 </p>
        <li>
          <p>
            <b>誤判定と検出漏れ</b>
          </p>
          <p>プログラムとしての正確性により、静的解析では手動レビューでは見逃される問題も検出される場合があります。 しかし、これらの解析ツールでは頻繁に誤判定が出ます。 誤判定は面倒ではありますが、自動スキャンの結果を確認することで、レビュー中のコードに対する理解を深めることができます。 結果を確認することで誤判定の理由を理解し、制御やデータフローを含めて、コードを詳細に理解できます。 一方で、自動スキャンでコードのセキュリティ問題が検出されなかったとしても、検出漏れに注意する必要があります。 セキュリティ問題が検出されない場合でも、コードにセキュリティ上の脆弱性がまったくないことにはなりません。 </p>
        </li>
      </li>
    </li>
  </ul>
  <h2>手動スキャン</h2>
  <p>コードに対して手動スキャンを実行することで、コードに対する理解を深め、手順 3 で役立つパターンを見つけ出す必要があります。 手動スキャンは、コード レビューの合計時間の 10 パーセント内に収まる素早いものでなければいけません。 レビューの際は特に以下の点に留意する必要があります。</p>
  <ul>
    <li>
      <p>
        <b>入力データの検証 </b>:  アプリケーションに入力検証のアーキテクチャーが存在するかどうか。 検証がクライアント、サーバ、またはその両方で実行されるかどうか。 一元化された検証メカニズムが存在するのか、それとも検証ルーティンがコード ベース全体に広がっているのか。 </p>
      <li>
        <p>
          <b>ユーザーを認証および認可するコード</b>: アプリケーションでユーザーを認証するかどうか。 ユーザーのロールと相互作用の方法。 カスタムの認証コードや認可コードが存在するかどうか。 </p>
        <li>
          <p>
            <b>エラー処理コード</b>: 一貫したエラー処理アーキテクチャーが存在するかどうか。 アプリケーションが構造化した例外のキャッチとスローを実行するかどうか。 特にデンスまたはスパースなエラー処理のあるコードの領域が存在するかどうか。 </p>
          <li>
            <p>
              <b>複雑なコード</b>: 特に複雑なコードの領域が存在するかどうか。 </p>
            <li>
              <p>
                <b>暗号化</b>: アプリケーションが暗号化を使用するかどうか。 </p>
              <li>
                <p>
                  <b>interop</b>: アプリケーションがネイティブ コードの呼び出しに interop を使用するかどうか。 </p>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>このスキャンの結果は、手順 3 でさらに分析するべき領域のセットになります。 </p>
  <h1>手順 3:  セキュリティ問題のコード レビュー</h1>
  <p>この手順では、コードを手動でレビューしてセキュリティ上の脆弱性を見つけ出します。 アプリケーション アーキテクチャー特有のものでない、一般的なセキュリティ上の脆弱性を調べる必要があります。 コード内で、セキュリティ問題を露呈する可能性の高いこれらのパスを追跡してレビューを行います。 制御フロー解析やデータフロー解析などの手法と組み合わせて質問方式のアプローチを使用することができます。 </p>
  <p>注記:これらの手法は、組み合わせて使うことで最大の効果を発揮します。 </p>
  <h2>手法</h2>
  <p>コードをレビューする際は、以下の手法を組み合わせます。 </p>
  <ul>
    <li>
      <p>
        <b>制御フロー解析</b>: 制御フロー解析は、コードの論理条件を段階的に通過するために使用されるメカニズムです。 プロセスは以下のとおりです。</p>
      <ul>
        <li>
          <p>関数を調べ、各分岐条件を確認します。 これには、ループ、switch ステートメント、if ステートメント、try/catch ブロックが含まれます。 </p>
          <li>
            <p>各ブロックが実行される条件を理解します。 </p>
            <li>
              <p>次の関数に進んで、この作業を繰り返します。 </p>
            </li>
          </li>
        </li>
      </ul>
      <li>
        <p>
          <b>データフロー解析</b>: データフロー解析とは、入力ポイントから出力ポイントまでデータを追跡するために使用されるメカニズムです。 アプリケーションには多くのデータフローが存在するため、コード レビューの目的と、手順 2 でのフラグ付けに基づいて集中的に作業を行います。 プロセスは以下のとおりです。</p>
        <ul>
          <li>
            <p>各入力場所で、入力ソースの信頼性を確認します。 疑わしい場合は信頼しないようにします。 </p>
            <li>
              <p>潜在的な出力について、データフローを追跡します。 データ検証のあらゆる試みをメモします。 </p>
              <li>
                <p>次の入力に移動して、続行します。 </p>
              </li>
            </li>
          </li>
        </ul>
      </li>
    </li>
  </ul>
  <h2>入力と出力</h2>
  <p>データフロー解析を実行すると同時に、入出力のリストを確認してレビューが必要なコードと照合します。 以下に共通ソースとシンクの例を示します。</p>
  <ul>
    <li>パブリック インターフェイス<li>ユーザー インターフェイス<li>データベースとの相互作用<li>ソケットとの相互作用<li>ファイル I/O<li>パイプ</li></li></li></li></li></li>
  </ul>
  <p>注記: コードが信頼境界を超える領域はすべて優先度を設定します  (コードが信頼レベルを変更するなど)。 </p>
  <h2>信頼境界</h2>
  <p>各入力ソースの信頼性を判断することは困難な場合があります。 コードがコンポーネント外からの入力を信頼せず、すべてのデータを検証するようにする必要があります。 しかしパフォーマンスやメンテナンス上の理由から、これが現実的でない場合もあります。 一般的には、よく知っているコードや、企業のコードは信頼できますが、あまり知らないコードは信頼できません。 以下は信頼境界の判断の例です。 </p>
  <ul>
    <li>
      <p>
        <b>以下の信頼度を「高」とします。</b>
      </p>
      <ul>
        <li>
          <p>コンポーネント内でレビュー中のコードからの入力 </p>
          <li>
            <p>既知の良好で厳密名のついた管理アセンブリ、または署名付き/ハッシュ化されたネイティブ ライブラリからの入力 </p>
            <li>
              <p>他のコンポーネントでは使用されず、適切な検証が行われていることを証明できるデータを含むデータベースからの入力 </p>
              <li>
                <p>既知の良好なソースによって署名され、IPSec や SSL で保護されたネットワーク データ </p>
              </li>
            </li>
          </li>
        </li>
      </ul>
      <li>
        <p>
          <b>以下の信頼度を「中」とします。</b>
        </p>
        <ul>
          <li>
            <p>厳密名がなく署名もされていないものの、サーバに対してローカルな、既知の良好なアセンブリまたはネイティブ ライブラリからの入力 </p>
            <li>
              <p>信頼できるユーザーのみがアクセス可能なパブリック インターフェイスからの入力 </p>
              <li>
                <p>信頼できるユーザーのみがアクセス可能なユーザー インターフェイス コンポーネントからの入力 </p>
                <li>
                  <p>データセンター内部でセグメント化された LAN など、信頼できないユーザーがアクセスできないネットワーク データ </p>
                </li>
              </li>
            </li>
          </li>
        </ul>
        <li>
          <p>
            <b>以下の信頼度を「低」とします。</b>
          </p>
          <ul>
            <li>
              <p>クライアントに配置された、厳密名がなく署名もされていないアセンブリやネイティブ ライブラリからの入力 </p>
              <li>
                <p>クライアント コードからの入力 </p>
                <li>
                  <p>ネットワークを介した入力 </p>
                  <li>
                    <p>ファイルからの入力 </p>
                    <li>
                      <p>任意のユーザーがアクセス可能なパブリック インターフェイスからの入力 </p>
                      <li>
                        <p>任意のユーザーがアクセス可能なユーザー インターフェイス コンポーネントからの入力 </p>
                        <li>
                          <p>他のアプリケーションと共有されているデータベースからの入力 </p>
                        </li>
                      </li>
                    </li>
                  </li>
                </li>
              </li>
            </li>
          </ul>
        </li>
      </li>
    </li>
  </ul>
  <p>追跡を実行する際は、コードを慎重に調べ、信頼度が低の入力に対しては厳密に、信頼度が中の入力に対しては適切に、入力検証が実行されていることを確認します。 信頼されていないデータを受信したアプリケーションがすぐに呼び出せる共通の検証ルーティンが必要です。 この検証ルーティンにより、アプリケーションの検証領域は一元化され、新しい情報が発見された際に更新できます。 </p>
  <p>データフロー解析を実行する際は、解析されたデータが複数の出力場所に移動する可能性のある領域に注目します。 また、中間の出力場所にも注意します。 たとえば、入力はデータベースに保存された後、Web ページのコンテンツとして配置される場合があります。 データのソースをたどり、一番弱いところに基づいて信頼度を割り当てます。 </p>
  <h2>ホットスポット テーブル</h2>
  <p>
    <table>
      <tbody>
        <tr>
          <td>
            <p>
              <b>ホットスポット</b>
            </p>
          </td>
          <td>
            <p>
              <b>コード内の確認項目</b>
            </p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <i>SQL インジェクション</i>
            </p>
          </td>
          <td>
            <p>信頼できない入力が予期せぬ方法で SQL クエリーの動作を変更できる場合、SQL インジェクション攻撃が発生します。 コードをレビューする際は、SQL クエリーがパラメータ化され、SQL クエリーで使用されているすべての入力が検証されていることを確認します。 </p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <i>クロスサイト スクリプティング</i>
            </p>
          </td>
          <td>
            <p>攻撃者がアプリケーションにスクリプト コードを注入することができ、スクリプト コードがエコー バックされてアプリケーションのセキュリティ コンテキストで実行される場合、クロスサイト スクリプティングが発生します。 クロスサイト スクリプティングにより、攻撃者はフォーム データや Cookie などのユーザー情報を盗むことができます。 この脆弱性は、Web アプリケーションがフィルタリングされていないユーザー入力を Web コンテンツにエコー バックする場合は常に存在する可能性があります。 </p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <i>データ アクセス</i>
            </p>
          </td>
          <td>
            <p>データベース接続文字列が不適切に保存されていないかどうか、データベースの認証が適切に行われているかどうか確認します。 </p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <i>入力/データ検証</i>
            </p>
          </td>
          <td>
            <p>Server-side Validation で裏打ちされない Client-side Validation、不十分な検証の手法、セキュリティ上の判断を下す際のファイル名やその他の安全でないメカニズムへの依存の有無を確認します。 </p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <i>認証</i>
            </p>
          </td>
          <td>
            <p>弱いパスワード、平文の Credential 情報、過度に長いセッション、その他の一般的な認証の問題の有無を確認します。 </p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <i>認可</i>
            </p>
          </td>
          <td>
            <p>データベース アクセスを制限していないこと、特権の不適切な分割、その他の一般的な認可の問題の有無を確認します。 </p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <i>機微データ</i>
            </p>
          </td>
          <td>
            <p>エラー メッセージ、コード、メモリ、ファイル、ネットワーク内の機密情報の曝露による機微データの管理不良の有無を確認します。 </p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <i>安全でないコード</i>
            </p>
          </td>
          <td>
            <p><b>/unsafe</b> スイッチでコンパイルされたあらゆるコードに特に注意を払います。 このコードは、通常のマネージ コードが持つすべての保護を持っていません。 バッファ オーバーフロー、配列の境界外エラー、整数アンダーフロー/オーバーフロー、データ切り詰めエラーの可能性の有無を確認します。 </p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <i>アンマネージ コード</i>
            </p>
          </td>
          <td>
            <p>安全でないコードのチェックに加えて、アンマネージ コードのスキャンでは、<b>strcpy</b> や <b>strcat</b>&nbsp; などの潜在的に危険な API の使用の有無を確認します。interop 呼び出しとともにアンマネージ コードそのものもレビューし、マネージ コードからアンマネージ コードに実行制御が渡される際に不適切な仮定がないことを確認してください。 </p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <i>ハードコード化された機密情報</i>
            </p>
          </td>
          <td>
            <p>"<b>key</b>"、"<b>password</b>"、"<b>pwd</b>"、"<b>secret</b>"、"<b>hash</b>"、"<b>salt</b>" などの変数名の有無を確認し、ハードコード化された機密情報を確認します。</p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <i>不適切なエラー処理</i>
            </p>
          </td>
          <td>
            <p>エラー ハンドラが欠如していたり、空の catch ブロックがある関数の有無を確認します。 </p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <i>Web.config (ASP.NET のみ)</i>
            </p>
          </td>
          <td>
            <p>Web.config ファイルの構成管理設定を調べ、Forms Authentication チケットが適切に保護されていることや <b>machineKey</b> エレメント内で適切なアルゴリズムが指定されていることなどを確認します。 </p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <i>コード アクセス セキュリティ</i>
            </p>
          </td>
          <td>
            <p>アサート、リンク要求、<b>allowPartiallyTrustedCallersAttribute</b> (APTCA) の使用を検索します。 </p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <i>暗号化を使用するコード</i>
            </p>
          </td>
          <td>
            <p>機密情報の削除の欠如や、暗号化 API の不正使用の有無も確認します。 </p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <i>文書化されていないパブリック インターフェイス</i>
            </p>
          </td>
          <td>
            <p>文書化されていないインターフェイスのほとんどは、アプリケーションで使用するべきではありません。また、他のコードと同レベルで設計やテストが監視されることはほとんどありません。 </p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <i>スレッディングの問題</i>
            </p>
          </td>
          <td>
            <p>競合状態やデッドロックを確認します（特に静的メソッドやコンストラクター）。 </p>
          </td>
        </tr>
      </tbody>
    </table>
    <br />
  </p>
  <h1>手順 4:  アーキテクチャー固有のセキュリティ問題をレビューする</h1>
  <p>この手順では、コード レビューの目的のリストを確認し、まだレビューされていない項目をすべて調べます。 この手順は、アプリケーションがカスタムのセキュリティ メカニズムを使用していたり、既知のセキュリティ上の脅威を軽減するメカニズムを備えていたりする場合には特に重要です。 この最終コード レビューのパスを使用し、アプリケーション アーキテクチャー固有のセキュリティ機能を検証します。 質問形式のアプローチを使用すると、最適な結果が得られます。 以下の質問を検討します。</p>
  <ul>
    <li>
      <p>
        <i>アーキテクチャにカスタム セキュリティ実装が存在しているかどうか。 </i>
      </p>
      <p>カスタム セキュリティ実装は、以下の理由でセキュリティ問題が存在する可能性が高い場所です。</p>
      <ul>
        <li>
          <p>セキュリティ問題が存在することが既に確認されているために、カスタムのセキュリティ コードが作成されている。 </p>
          <li>
            <p>製品の他の領域と異なり、機能上の問題がセキュリティ上の脆弱性に結びつく可能性が高い。 </p>
          </li>
        </li>
      </ul>
      <li>
        <p>
          <i>具体的に軽減された既知の脅威が存在するかどうか。</i>
        </p>
        <p>既知の脅威を軽減するコードは、軽減を回避するために使用される可能性がある問題について、慎重にレビューする必要があります。 </p>
        <li>
          <p>
            <i>アプリケーションに固有のロールがあるかどうか。</i>
          </p>
          <p>ロールの使用は、他のユーザーよりも権限の低いユーザーが存在することを想定したものです。 あるロールが他のロールの権限になりすませるような問題がコードにないことを確認します。 </p>
        </li>
      </li>
    </li>
  </ul>
  <h2>ロール</h2>
  <p>複数のユーザー ロールをサポートするコードをレビューする際は、各ロールの権限を理解しておく必要があります。 権限を行に、ロールを列にしたロール マトリックスを準備します。 ロールに許可された権限に一致する各セルをマークしてください (表 2 に例を示します)。</p>
  <p>マトリックスを完成させた後は、マトリックスにあてはまらないコードをレビューします。 明確にロールが定められた設計の優れたシステムであっても、ロールの実装での不適切な仮定や論理ミスによって破られる場合があります。 </p>
  <h2>ロール マトリックスの例</h2>
  <p>
    <table>
      <tbody>
        <tr>
          <td>
          </td>
          <td>
            <strong>目的</strong>
          </td>
          <td>
          </td>
          <td>
          </td>
          <td>
          </td>
          <td>
          </td>
        </tr>
        <tr>
          <td>
            <strong>対象</strong>
          </td>
          <td>
            <em>ユーザー作成</em>
          </td>
          <td>
            <em>アクセス許可の変更</em>
          </td>
          <td>
            <em>オブジェクトの作成</em>
          </td>
          <td>
            <em>オブジェクトの削除</em>
          </td>
          <td>
            <em>オブジェクトの読み取り</em>
          </td>
        </tr>
        <tr>
          <td>
            <em>管理者</em>
          </td>
          <td>x</td>
          <td>x</td>
          <td>
          </td>
          <td>
          </td>
          <td>
          </td>
        </tr>
        <tr>
          <td>
            <em>コンテンツ作成者</em>
          </td>
          <td>
          </td>
          <td>
          </td>
          <td>x</td>
          <td>x</td>
          <td>x</td>
        </tr>
        <tr>
          <td>
            <em>リーダー</em>
          </td>
          <td>
          </td>
          <td>
          </td>
          <td>
          </td>
          <td>
          </td>
          <td>x</td>
        </tr>
        <tr>
          <td>
            <em>匿名</em>
          </td>
          <td>
          </td>
          <td>
          </td>
          <td>
          </td>
          <td>
          </td>
          <td>x</td>
        </tr>
      </tbody>
    </table>
  </p>
  <h1>次の作業</h1>
  <p>コード レビューの完了後は、以下の作業を行います。</p>
  <ul>
    <li>
      <p>
        <b>検出されたセキュリティ問題に優先度を設定する</b>: 優先度設定は、セキュリティ問題が顧客に与える影響に基づいて行ってください。 起こり得る最悪の被害を想定し、どの顧客が影響を受けるかを判断してください。 </p>
      <li>
        <p>
          <b>セキュリティ問題の修正にともなうリスクを評価する</b>: セキュリティ問題の修正には、新しい未知のセキュリティ問題の発生が常にともないます。 既知のセキュリティ問題が、新しく発生するセキュリティ問題よりも危険性が低い場合もあります。 </p>
        <li>
          <p>
            <b>失敗から学習する</b>: 犯した失敗と、その検出方法と修正方法について、チームで継続的に話し合います。 セキュリティ問題のないコードの作成を目指してください。 </p>
        </li>
      </li>
    </li>
  </ul>
  <h1>コード レビューのシナリオ</h1>
  <p>コード レビューの実行には、以下のようにいくつかの方策があります。</p>
  <ul>
    <li>
      <b>個別レビュー</b>: この方策では、1 人の人間がコードをレビューします。 <li><b>チーム レビュー</b>: この方策では、複数の人間が同じコードをレビューします。 非常に効果的なコード レビューとなりますが、成功させるには組織の追加が必要です。 </li></li>
  </ul>
  <p>いずれの方策でも、コードに慣れたレビュー担当者を選択することも、慣れていないレビュー担当者を選択することもできます。 </p>
  <p>コードの予備知識がないレビュー担当者には、コードに慣れた人間が立てる仮定を立てる可能性が少なく、新鮮な目でコードを調べることが期待できるという利点があります。 </p>
  <p>コードに関する知識を持ったレビュー担当者には、レビューするアプリケーションの専門知識が必要な微妙なエラーを発見できるという利点があります。 </p>
  <h1>チーム ロール</h1>
  <p>コード レビューには複数の作業があります。</p>
  <ul>
    <li>
      <p>
        <b>目的の提示</b>: アプリケーション/コンポーネントの目的とセキュリティ上の目的を記述します。 </p>
      <li>
        <p>
          <b>コードの提示</b>: コードを調べて、使用方法と目的を記述します。 </p>
        <li>
          <p>
            <b>コードのレビュー</b>: コードをレビューし、セキュリティ上の問題を見つけ出します。 </p>
          <li>
            <p>
              <b>メモ作成</b>: 見つかったセキュリティ問題、未解決の問題、後から調査が必要な領域についてメモを取ります。 </p>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>一般的には、以下のロールが関係します。</p>
  <ul>
    <li>
      <p>
        <b>ビジネス アナリスト</b>: ビジネス アナリストはアプリケーションの目的とセキュリティ上の目的を説明します。 ビジネス上の観点からの目的の提示を担当することが一般的です。 </p>
      <li>
        <p>
          <b>アーキテクト</b>: アーキテクトは、アプリケーションの目的とコンポーネントのアーキテクチャーを説明します。 システム アーキテクチャーの観点から目的の説明を担当することが一般的です。 </p>
        <li>
          <p>
            <b>開発者</b>: 開発者はコードの詳細を説明し、コードをレビューし、セキュリティ問題を見つけ出します。 コードの提示を担当することが一般的です。</p>
        </li>
      </li>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>