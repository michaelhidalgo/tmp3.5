<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="91631531" Content_Hash="-1097574220">
  <Metadata>
    <Id>143b29d2-d297-43d3-958d-276f01fb524e</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>セッション ステート データへのアクセスを限定する</Title>
    <Category>セッション管理</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>行うべき事柄</h1>
  <p>認可されていないユーザーが読み取る、またはタンパリングできないように、セッション データへのアクセスを制約してください。 </p>
  <h1>理由</h1>
  <p>セッション 状態データは、機微な情報、またはアプリケーションの適切な操作に必須な情報を含むことが頻繁にあります。&nbsp; 認証と認可に関連するデータはセッション状態に含まれることが頻繁にあります。&nbsp; この情報へのアクセスを制約することができないと、最低でもアプリケーションが内部的にどのように作動するかを攻撃者が知ることができるようになり、別の正当なユーザーに偽装し、またはシステム内での特権を別の形で引き上げることができてしまう可能性があります。&nbsp; 攻撃者がセッション状態変数に書き込むことができる場合、実行する意図のあるアプリケーションおよびビジネス プロセス両方の完全性はおそらく破壊されます。 </p>
  <h1>状況</h1>
  <p>セッション状態データを使用するすべてのアプリケーションは、確実にそれが保護されるようにします。 </p>
  <h1>対策</h1>
  <p>セッション状態を保持するには、プロセス内、プロセス外、および SQL Server 内の3 つの主要な方法があります。&nbsp; 以下で順に議論されます。 </p>
  <ol>
    <li>
      <p>
        <strong>プロセス内のセッション状態を保護する。</strong> プロセス内のセッション状態は、他のアプリケーションがプロセスのメモリを読み取ることができないはずなので、通常はかなり安全なデフォルトです。&nbsp; しかし、まだ取ることができる、そして取るべきステップがあります:</p>
      <ol>
        <li>
          <p>状態が特に機微である場合、 <strong>cryptProtectMemory</strong> 関数を使用して、プロセスのメモリが仮想メモリ経由で暗号化されずにディスクに書き込まれないことを確認することをお勧めします。 </p>
          <li>
            <p>プロセスがファイルを使用して任意の状態を持続させる場合、それらのファイルが適切に ACL 化されていることを確認する必要があります。また、RSA 経由で手動で、もしくは EFS を使用してファイルを暗号化しておきたいことがあります。 </p>
          </li>
        </li>
      </ol>
      <li>
        <p>
          <strong>プロセス外の状態サービスを保護する。</strong>  <b>&lt; sessionState&gt;</b>エレメントの <b>mode=StateServerを </b>使用する場合、セッション状態を確保するために次の推奨条件を使用してください:</p>
        <ol>
          <li>
            <p>
              <b>最低限の特権のアカウントを使用して状態サービスを実行する。</b>&nbsp; デフォルトでは、状態サービスはNetwork Service のローカルで最低の特権のアカウントを使用して実行されます。&nbsp; この設定を変更する必要はありません。 </p>
            <li>
              <p>
                <b>チャンネルを保護する。</b>&nbsp; 状態サービスがリモート サーバにあり、ネットワーク盗聴の脅威が懸念される場合、ユーザー状態がプライベートであり変更されないことを保証するため、IPSec を使用してリモート状態ストアへのチャンネルを保護してください。 </p>
              <li>
                <p>
                  <b>デフォルトのポートの変更を検討する。</b>&nbsp; ASP.NET 状態サービスは、ポート 42424 をリッスンします。&nbsp; デフォルトの、周知のポートの使用を避けるには、次のレジストリ キーを編集することでポートを変更します:</p>
                <p />
 <pre>HKLM\SYSTEM\CurrentControlSet\Services\aspnet_state\Parameters</pre>
                <p />
                <p>ポート番号はポートの名前が付いた値で定義されます。&nbsp; レジストリでのポート番号を、例えば 45678 に変更する場合、<b>&lt; sessionState&gt; エレメントの接続文字列も </b>以下のように変更する必要があります。</p>
                <p />
 <pre>stateConnectionString="tcpip=127.0.0.1:45678"</pre>
                <p />
                <li>
                  <p>
                    <b>状態接続文字列を暗号化する。</b>&nbsp; このエレメントにはサービス接続の詳細が含まれるので、保護された構成プロバイダーの 1 つを使用して暗号化することをお勧めします。&nbsp; </p>
                </li>
              </li>
            </li>
          </li>
        </ol>
        <li>
          <p>
            <strong>SQL Server セッション状態を保護する。</strong>  <b>&lt; sessionState&gt;</b> エレメントの<b>mode="SQLServer" を使用する場合、 </b>セッション状態を保護するために次の推奨条件を使用してください。</p>
          <ol>
            <li>
              <p>
                <b>データベースに Windows 認証 を使用する。</b>&nbsp; これは、パスワードがネットワーク上でデータベースに送信されないことを意味します。&nbsp; また、ユーザー名とパスワードをデータベース接続文字列に保存しなくてもいいことも意味します。 </p>
              <li>
                <p>
                  <b>&lt;sessionState&gt;セクションを暗号化する。</b>&nbsp; このエレメントにはデータベース接続の詳細が含まれるので、保護構成プロバイダーのいずれかを使用することにより暗号化することをお勧めします。&nbsp; </p>
                <li>
                  <p>
                    <b>データベースにおいてアプリケーションのログインを制限する。</b>&nbsp; 必要な状態テーブルおよびデータベースをクエリするため、および ASP.NET が使用するストアド プロシージャへのアクセスにのみ使用されるように、データベースでのログインを制約してください。&nbsp; これを行うには、ASP.NET のプロセス アカウントの SQL Server ログインを作成し、次に状態ストア データベースのデータベース ユーザーへそのログインをマップしてください。&nbsp; データベース ユーザーをデータベース ロールに割り当て、ASPState データベースで提供されるストアド プロシージャへの実行アクセス許可を付与してください。 </p>
                  <li>
                    <p>
                      <b>チャンネルを保護する。</b>&nbsp; 機微なセッション状態を Web サーバとリモート状態ストア間のネットワーク上で保護するには、IPSec または SSL を使用して 2 つのサーバに接続されているチャンネルを保護してください。&nbsp; こうすることで、セッション状態データのプライバシーと完全性がネットワーク全体で提供されます。&nbsp; SSL を使用する場合は、データベース サーバにサーバ証明書をインストールしなければいけません。 </p>
                  </li>
                </li>
              </li>
            </li>
          </ol>
        </li>
      </li>
    </li>
  </ol>
  <h1>問題の例</h1>
  <p>ある銀行のウェブ サイトは、SQL Server セッション状態を使用しています。&nbsp; そのセッション状態は、社会保障番号、クレジット カード番号情報、銀行の口座情報などを含む、非常に機微な情報を大量に扱っています&nbsp;現実の財務情報は別の場所にありますが、アカウントの構成情報およびセッション状態ついては同一のサーバを使用します。&nbsp; データベース サーバへ接続するのに使用するアカウントは、データベース サーバ全体にわたるかなり広範なアクセス許可を持っています。&nbsp; 攻撃者がカスタマイズ コードのわずかな破片にSQL インジェクションを見つけたら、セッション状態の読み書き両方ができるようになり、機微な情報を盗み、トランザクションを改変できます。</p>
  <h1>ソリューションの例</h1>
  <p>ある銀行のウェブ サイトは、SQL Server セッション状態を使用しています。&nbsp; そのセッション状態は、社会保障番号、クレジット カード番号情報、銀行の口座情報などを含む、非常に機微な情報を大量に扱っています&nbsp;2 つの異なるデータベース サーバを使用します。1 つはセッション状態だけを取り扱い、もう 1 つは他の価値が低い情報を取り扱います。&nbsp; セッション状態 DB サーバへ通信するアカウントは厳しくロックダウンされており、システムが正しく作動するために要求される、ストアド プロシージャの特定のセットのみを呼び出すことしかできません。&nbsp; 攻撃者がカスタマイズ コードのわずかな破片にSQL インジェクションを見つけても、セッション状態のデータベースには一切触れることができず、効率的に阻止されます。&nbsp;</p>
  <p />
  <hr />
  <p>出典: Microsoft patterns & practices guidance </p>]]></Data>
  </Content>
</TeamMentor_Article>