<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-511131628" Content_Hash="1948815992">
  <Metadata>
    <Id>fcc89057-e931-4a37-8f84-32cd3666841b</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>封印キーワードの使用を検討する</Title>
    <Category>設計上の考慮事項</Category>
    <Phase>実装</Phase>
    <Technology>.NET 3.5</Technology>
    <Type>ガイドライン</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>行うべき事柄</h1>
  <p>ベース クラスを誰にも拡張されたくない場合は、それを <b>sealed</b> キーワードで示す必要があります。</p>
  <h1>理由</h1>
  <p>クラスが拡張される予定ではないものの封印されていない場合、それは悪意のあるユーザーにクラスを拡張し、コードに対して攻撃&nbsp;を開始する機会を提供します。&nbsp;</p>
  <h1>状況</h1>
  <p><b>sealed</b> キーワードをクラス レベルで使用する前に、慎重に拡張性要件を評価する必要があります。 次の状況ではクラスをシールすることが特に重要です：</p>
  <ul>
    <li>クラスが、保護された API を介してアクセス可能なパスワードなどのセキュリティ上の秘密を含んでいる。 <li>クラスにシールできない多くの仮想メンバーが含まれていて、タイプはサード パーティが拡張できるようには設計されていない。</li></li>
  </ul>
  <h1>対策</h1>
  <p>クラスおよびメソッドレベルで <b>sealed</b> キーワードを使うことができます。 Visual Basic .NET では、クラスレベルで <b>NotInheritable</b> キーワードを、あるいはメソッド レベルで <b>NotOverridable</b> を使用することができます。 </p>
  <p>また、クラス内の個々のメソッドとプロパティをシールすることもできます。 例えば、仮想メンバーを持つベース クラスから派生していて、派生クラスの機能をだれにも拡張してほしくない場合、派生クラスで仮想メンバーをシールすることを検討できます。 仮想メソッドをシールすることは、仮想メソッドをインライン化およびその他のコンパイラ最適化の候補とするため、パフォーマンス上の利点があります。</p>
  <p>次の例を考えてみます。</p>
 <pre>public class MyClass{ <br />&nbsp; protected virtual void SomeMethod() { ... }<br />}<br />次のように、派生クラスでメソッドをオーバーライドしてシールすることができます。</pre>
 <pre>public class DerivedClass : MyClass { <br />&nbsp; protected override sealed void SomeMethod () { ... }<br />}</pre>
  <p>このコードは、仮想オーバーライドのチェーンを終了し、 <b>DerivedClass.SomeMethod</b> をインライン化の候補にします。</p>
  <blockquote>
    <b>注意</b>: &nbsp;&nbsp;クラスのシールはコンパイル時にのみ適用されます。 悪意のあるコードが完全に信頼された環境で実行されるとき、この制約をバイパスするために反射またはアンマネージ ポインターを使用することができます。</blockquote>
  <h1>&nbsp;</h1>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>