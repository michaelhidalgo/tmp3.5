<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1773313697" Content_Hash="-86370980">
  <Metadata>
    <Id>4cfb84e3-b640-44c1-8950-cc38262ce118</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>アプリケーションは要求検証のみに依存しない</Title>
    <Category>入力とデータの検証</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>チェックリスト項目</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>チェック対象</h1>
  <p>アプリケーションが、悪意のある入力を防ぐために、ASP.NET 要求検証のみに依存していないことを確認してください。</p>
  <h1>理由</h1>
  <p>要求検証は、一部の攻撃を検知しますが、 基本的な入力検証しか行いません。 これに依存しないでください。 独自の入力検証に加えて、追加の予備対策として使用してください。 アプリケーションで有効な入力が何かを定義できるのはあなただけです。 </p>
  <h1>チェック方法</h1>
  <p>この問題があるかどうかをチェックするには、アプリケーションが入力およびデータの検証を提供するために要求検証のみに依存しているかどうかを判別する必要があります。 以下の手順を行います。</p>
  <ol>
    <li>
      <p>
        <strong>アプリケーション内のすべての入力ソースを見つけてくだい。</strong> 設計時に、アプリケーションへの潜在的な入力ソースをすべて特定してください。 ソース コードを十分に調べて、設計段階で見落としている可能性のある入力のソースを見つけます。 次の手順において利用できるリストをコンパイルします。 </p>
      <li>
        <p>
          <strong>検証ルーチンを特定します。</strong> 各入力ソースには、データ検証ルーチンが関連付けられているはずです。&nbsp;理想的には、入力がアプリケーションに到達すると同時に検証を開始します。 共有された検証ルーチンは、コード ベース全体に分散した多くの検証ルーチンを作成するよりも優れているため、テストに使いやすく 1 回限りのバグを減らせるように、ルーチンを統合できないか検討してください。 入力ソースに検証ルーチンが関連付けられていない場合は、修正するようにフラグを設定します。</p>
        <p />
        <li>
          <p>
            <strong>検証ルーチンの品質を確保します。</strong> 検証ルーチンは、長さ、範囲、形式、型をチェックします。 検証では、まず既知の有効で安全なデータをチェックし、次に悪意のある危険なデータをチェックします。 悪意のあるすべてのデータをフィルタリングする方法に頼らないでください。見落とす可能性があります。 Client-side Validation は簡単にバイパスできるため、Client-side Validation のみに依存しないでください。</p>
          <p />
        </li>
      </li>
    </li>
  </ol>
  <h1>修正方法</h1>
  <p>既知の有効なデータをチェックして、型、長さ、形式、および範囲を検証することによって入力を制限します。&nbsp;プロパティ入力検証経由のインジェクション攻撃に対する防御策の詳細は、<a href="http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGHT000003.asp">How To: ASP.NET でインジェクション攻撃から保護する方法‎を参照してください。&nbsp;</a>正規表現を使用した入力検証の詳細は、<a href="http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGHT000001.asp">How To: ASP.NET への入力を制約するために正規表現を使用する方法</a> を参照してください。</p>
  <p>
    <strong>注意</strong>: 入力を検証したとしても、出力をフォーマットする、クエリをパラメータ化する、またはユーザー入力を慎重に扱う必要性がなくなるわけではありません。</p>
  <h1>問題の例</h1>
  <p>ASP.NET アプリケーションはForms Authenticationを使用しますが、 ユーザーによって入力されたユーザー名とパスワードの形式の検証を要求検証で行っています。&nbsp;アプリケーションには、入力の長さ、範囲、形式、および型をチェックする検証ルーチンがありません。</p>
  <h1>ソリューションの例</h1>
  <p>ASP.NET アプリケーションはForms Authenticationを使用し、ユーザーとの相互処理にさまざまな入力フィールドを用意しています。&nbsp; 要求検証は予備対策として残されていますが、 悪意のある入力に対する防御メカニズムとしては不十分です。 アプリケーションの開発者は、すべての信頼されない入力およびデータをアプリケーションが使用する前に渡す検証ルーチンを含めています。</p>
  <h1>関連する項目</h1>
  <ul>
    <li>
      <div>
        <a href="/article/5f6a8e60-f809-4038-a725-c5019f1dc993">ガイドライン: すべてのソースからの入力を検証する</a>
      </div>
    </li>
  </ul>
  <hr />
  <p>出典: Microsoft patterns & practices guidance </p>]]></Data>
  </Content>
</TeamMentor_Article>