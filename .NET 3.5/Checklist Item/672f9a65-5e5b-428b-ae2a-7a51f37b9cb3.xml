<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="325329194" Content_Hash="-2107921525">
  <Metadata>
    <Id>672f9a65-5e5b-428b-ae2a-7a51f37b9cb3</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>セキュリティ アクティビティは、開発ライフサイクルに統合されている</Title>
    <Category>セキュリティ工学</Category>
    <Phase>設計</Phase>
    <Technology> 任意</Technology>
    <Type>チェックリスト項目</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>チェック対象</h1>
  <p>セキュリティ アクティビティが開発ライフサイクルに統合されていることを確認します。</p>
  <h1>理由</h1>
  <p>安全なアプリケーションを設計、ビルド、展開するために、アプリケーションの開発ライフサイクルに、セキュリティを組み込みます。</p>
  <h1>チェック方法</h1>
  <p>アプリケーションのライフサイクルで不可欠なものとなっている必要のある、セキュリティ関連独特のアクティビティが多数あります。 These are:</p>
  <ol>
    <li>
      <p>
        <strong>セキュリティの目的。</strong> アプリケーションのセキュリティの目的を知らなければ、セキュリティ アクティビティで成功を収めるのは困難です。</p>
      <li>
        <p>
          <strong>セキュリティの設計ガイドライン</strong> 不適切な設計から来る脆弱性を避けるために、設計にあたって実績のある設計技法、パターン、原則を使用してください。 これらの設計パターンとプラクティスを一般的な脆弱性のカテゴリーに整理することによって、セキュリティ上の誤りを犯しやすい分野に焦点を絞ることができます。</p>
        <li>
          <p>
            <strong>Threat Modeling</strong> 脅威モデルは、特定のアプリケーションのシナリオに関連する脅威と脆弱性を理解して識別するのに役立ちます。</p>
          <li>
            <p>
              <strong>セキュリティのためのアーキテクチャと設計</strong> アーキテクチャと設計のレビュー プロセスでは、セキュリティの観点からアーキテクチャと設計を分析します。 展開とインフラストラクチャ、全体的なアプリケーションのアーキテクチャと設計、およびアプリケーションの各階層といった多様な視点から検討します。</p>
            <li>
              <p>
                <strong>セキュリティ コード レビュー</strong> すべてのコードは、セキュリティの脆弱性を特定することに重点が置かれた検査を受ける必要があります。 これは、アプリケーションのライフサイクルにおける開発、テスト フェーズで継続的に行ってください。</p>
              <li>
                <p>
                  <strong>セキュリティのテスト</strong> 設計の詳細を確認し、見落としがないことを検証するために、テストを使用してください。</p>
                <li>
                  <p>
                    <strong>セキュリティ展開レビュー</strong> アプリケーションが展開されるとき、弱い、または不適切な設定がセキュリティの脆弱性に結びつかないことを確認する必要があります。</p>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <h1>修正方法</h1>
  <p>ほとんどの組織では、以下の順序でアクティビティを行うと最善の結果が得られます。</p>
  <ol>
    <li>
      <p>
        <strong>セキュリティの目的。</strong> プロセスの初期の段階でセキュリティの目的と要件を定義します。 セキュリティの目的とは、データとアプリケーションの機密性、完全性、可用性に影響を与える制約と目標です。</p>
      <li>
        <p>
          <strong>セキュリティのアーキテクチャと設計レビュー</strong> 設計フェーズで生じたバグを後工程で修正することは最もコストがかかります。 コストのかかるやり直しをライフサイクルの後工程で行う必要が生じるのを避けるため、セキュリティに焦点を絞ったアーキテクチャと設計のレビューを導入します。</p>
        <li>
          <p>
            <strong>Threat Modeling</strong> セキュリティ開発に集中し、ソフトウェア エンジニアリングの全体的な品質を向上し、関連する脅威に対処し、テスト チームが特定の脆弱性をテストする計画を作成するのに役立つようにするために、脅威モデルを採用します。 脅威モデルは、さまざまな役割間のコミュニケーションの中心となり、開発者と IT プロフェッショナルがともにアプリケーションをよく理解するのに役立ちます。</p>
          <li>
            <p>
              <strong>セキュリティ コード レビュー</strong> セキュリティの脆弱性を特定することに重点を置いてコードをすべて検査します。 設計上のバグは最もコストが高いですが、実装でのバグは最も一般的です。 セキュリティの脆弱性発見を目的としてコードをレビューすることによって、後工程でのやり直しを避け、コストの高いエクスプロイトを避けるのに役立つことがあります。</p>
            <li>
              <p>
                <strong>展開のためのセキュリティ レビュー</strong> アプリケーションの展開中に、弱い、または不適切な設定からセキュリティの脆弱性が生じないかを検証します。 アプリケーションのセキュリティは、最も弱い箇所以上の強度にはなりません。 非常に効率の良いプロセスでも、展開中の構成エラーにために未完成になることがあります。</p>
              <li>
                <p>
                  <strong>セキュリティの設計ガイドライン</strong> 実績のある設計技法、パターン、原則を使用して、不適切な設計によって導入される多くの脆弱性を排除します。 実績のある設計原則を採用し、これまでのミスから学習することで、確実にアプリケーションを最初から安全にできます。</p>
                <li>
                  <p>
                    <strong>セキュリティのテスト</strong> リスクベースのアプローチ脅威モデル アクティビティからのアウトプットを使用すると、テスト アクティビティの対象範囲を定義し、テスト計画を作成するのに役立ちます。</p>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>]]></Data>
  </Content>
</TeamMentor_Article>