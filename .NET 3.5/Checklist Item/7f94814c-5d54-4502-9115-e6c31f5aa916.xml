<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-822138263" Content_Hash="-1078465622">
  <Metadata>
    <Id>7f94814c-5d54-4502-9115-e6c31f5aa916</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>悪意のあるトラフィックが境界内に入ることを防止するために効果的なフィルターが置かれている</Title>
    <Category>サーバの強化</Category>
    <Phase>展開</Phase>
    <Technology>Web アプリケーション</Technology>
    <Type>チェックリスト項目</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用対象</h1>
  <ul>
    <li>
      <div>Web アプリケーション</div>
    </li>
  </ul>
  <h1>チェック対象</h1>
  <p>悪意のあるトラフィックが境界内に入ることを防ぐために効果的なフィルターが置かれていることを確認してください。</p>
  <p />
  <h1>修正方法</h1>
  <p>ファイアウォールの公開ポートをフィルタリングすることは、悪意のあるパケットとペイロードをブロックする効果的および効率的な方法です。 フィルターには、ソースと送信先 IP アドレスとポート番号に基づいてネットワーク層でトラフィックを制限する簡単なパケット フィルターから、アプリケーション特有のペイロードを検査する複雑なアプリケーション フィルターまであります。 階層化フィルターを使用する多層防御のアプローチは、攻撃をブロックする非常に効果的な方法です。 さまざまな一般的な種類のファイアウォール フィルターがあります。 </p>
  <ol>
    <li>
      <p />
      <b>パケット フィルター。 </b>これらはプロトコル、ソースや送信先ポート番号およびソースや送信先アドレス、またはコンピューター名に基づいてパケットをフィルタリングできます。 IP パケット フィルターは静的であり、特定ポートを通した通信は許可されるかブロックされます。 ブロックされたパケットは通常ログされ、セキュアなパケット フィルターはデフォルトで拒否します。 <p>ネットワーク層で、ペイロードは不明で危険な可能性があります。 ペイロードを検査し、アクセス制御ルールに基づいて決定を下すために、より多くのインテリジェントな種類のフィルタリングを構成する必要があります。 </p><li><p><b>回路レベル フィルター。 </b>これらはペイロード データではなくセッションを検査します。 受信または送信クライアントがファイアウォール/ゲートウェイに対して直接リクエストを行い、その結果、ゲートウェイはサーバーとの接続を開始し、2 つの接続間のブローカーとして機能します。 アプリケーションの接続ルールの知識を備えた上で、回路レベル フィルターは有効な相互作用を保証します。 それらは実際のペイロードを検査するのではなく、フレーム数を計数してパケットの完全性を確認することで、セッション ハイジャックと反復を防止します。 </p><li><p /><b>アプリケーション フィルター。 </b>スマート アプリケーション フィルターはアプリケーションのデータ ストリームを解析して、検査、スクリーニング、ブロック、リダイレクト、およびファイアウォールを通過するときのデータの変更までも含む、アプリケーション特有の処理を提供できます。 アプリケーション フィルターは、以下のような攻撃から保護します。 <ul><li>安全でない SMTP コマンド <li>内部 DNS サーバーに対する攻撃。 <li>HTTP ベースの攻撃 (たとえば、アプリケーション特有の知識を使用するコード レッドと Nimda) </li></li></li></ul><p>たとえば、アプリケーション フィルターは HTTP DELETE をブロックし、HTTP GET を許可できます。 ウイルス検出、字句解析、およびサイト分類などのコンテンツのスクリーニングの能力により、アプリケーション フィルターは Web のシナリオでセキュリティ対策とビジネス規則の適用の両方において非常に効果的です。 </p><li><p><b>ステートフル検査。 </b>アプリケーション フィルターはパケットのペイロードの知識に制限されるため、フィルタリングの決定はペイロードのみに基づきます。 ステートフル検査は、ペイロードとそのコンテキストの両方を使用して、フィルタリング ルールを決定します。 ペイロードとパケットのコンテンツの使用は、ステートフルな検査ルールがセッションと通信の完全性を確保することを可能にします。 パケット、そのペイロード、およびシーケンスの検査は、ステートフル検査の拡張性を制限します。 </p><li><p><b>カスタム アプリケーション フィルター</b>。 これらのフィルターはアプリケーション サーバー/クライアント通信の完全性を確保します。 </p></li></li></li></li></li>
  </ol>
  <p>フィルターをネットワーク スタックの複数のレベルで使用すると、それは環境をよりセキュアにすることを助けます。 たとえば、パケット フィルターはポート80 以外のポートに送信される IP トラフィックをブロックするために使用し、アプリケーション フィルターは HTTP の動詞の性質に基づいてトラフィックをさらに制限するかもしれません。 たとえば、HTTP DELETE の動詞をブロックするかもしれません。</p>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>