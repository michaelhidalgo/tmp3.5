<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="164647587" Content_Hash="-1752912065">
  <Metadata>
    <Id>88b67dfc-8b33-4c5b-bf45-a2203c99a6eb</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>データベースには最小特権サービス アカウントを使って接続</Title>
    <Category>データ アクセス</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>チェックリスト項目</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>ASP.NET 3.5</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <h1>チェック対象</h1>
  <p>アプリケーションが最小特権アカウントを使用してデータベースに接続していることを確認します。</p>
  <h1>理由</h1>
  <p>SQL インジェクション攻撃を受けた場合、または攻撃者がアカウントの Credential 情報を取得した場合の被害を最小限に抑えるためです。</p>
  <h1>修正方法</h1>
  <p>Windows 認証では、オペレーティングシステムのアクセス許可および Windows リソースにアクセスする能力が限定された最小特権アカウントを使用します。 認証メカニズムのいかんにかかわらず、データベース内のアカウントのアクセス許可を制限します。</p>
  <p>データベースのアクセス許可を制限するには、次のパターンを使用します:</p>
  <ol>
    <li>アカウントの SQL Server ログインを作成します。 <li>必要なデータベースでのデータベースユーザーへのログインをマップしてください｡ <li>データベースロールにデータベースユーザーを置いてください｡ <li>データベースロールに対する限定されたアクセス許可を、アプリケーションがアクセスする必要のあるストアド プロシージャまたはテーブルにのみ与えてください。 </li></li></li></li>
  </ol>
  <p>理想としては、直接のテーブル アクセスを与えず、選択されたストアド プロシージャのみにアクセスを制限してください。 テーブル アクセスを与える必要がある場合は、アプリケーションが必要とする最小限のアクセスを与えてください。 たとえば、読み取りアクセスで十分な場合、更新アクセスを与えないでください。 </p>
  <p>データベース ロールを使用することにより、データベース ユーザーに直接権限を付与することを避けます。 こうするとデータベース ユーザー名が変更される可能性がなくなります。 たとえば、データベース ユーザー名を変更する場合は、新しいユーザーをデータベース ロールに追加して既存のユーザーを削除するだけで変更が可能です。</p>
  <hr />
  <p>出典: Microsoft patterns & practices guidance </p>]]></Data>
  </Content>
</TeamMentor_Article>