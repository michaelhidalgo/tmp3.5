<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1432499811" Content_Hash="-1487243613">
  <Metadata>
    <Id>c257712d-d379-4dc8-9b94-8afc9200abff</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>アンマネージ API を特定するために名前付け規則（安全、ネイティブ、危険）が使用されます。</Title>
    <Category>アンマネージ コード</Category>
    <Phase>実装</Phase>
    <Technology>.NET 3.5</Technology>
    <Type>チェックリスト項目</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>チェック対象</h1>
  <p>アンマネージ コードはマネージ コードから不適切に使用された場合に重大なリスクを示すため &nbsp; 、アンマネージ API を特定するために名前付け規則が使用されていることを確認してください。　</p>
  <p />
  <h1>修正方法</h1>
  <p>コードを開発、レビュー、または変更する場合に、ネイティブ コードのリスクが通知されるよう、名前付け規則を適用します。 アンマネージ API の種類をカプセル化する prefix を使用することで、アンマネージ コードを分類します。 以下の名前付け規則を使用します。 </p>
  <ul>
    <li>
      <b>Safe （安全)</b>。これは、コードがいかなるセキュリティ脅威も引き起こさないことを示します。 悪意のあるコードであっても、そうでなくても、呼び出すことに安全性の問題はありません。 例は、プロセッサの現在のティック カウントを返すコードです。 安全クラスには、完全な信頼に対するコード アクセス セキュリティ権限の要求をオフにする<b>SuppressUnmanagedCodeSecurityAttribute</b> で注釈を付けることができます。 <div><pre> [SuppressUnmanagedCodeSecurity]<br />class SafeNativeMethods<br /> {<br />       [DllImport("user32")]<br />       internal static extern void MessageBox(string text);<br />}  </pre></div><li><b>Native （ネイティブ）</b>. これは潜在的に危険性のあるアンマネージ コードですが、アンマネージ コードのアクセス許可がフル スタック ウォーク要求で保護されているコードです。 これらは<b>SupressUnmanagedCodeSecurityAttribute</b> で抑制されていない限り、暗示的に相互運用レイヤーによって作成されます。<div><pre>class NativeMethods<br /> {<br />       [DllImport("user32")]<br />       internal static extern void FormatDrive(string driveLetter);<br />}  </pre></div><li><b>Unsafe （危険）</b>。これは潜在的に危険性のあるアンマネージ コードで、宣言的に抑制されたアンマネージ コードのアクセス許可に対するセキュリティの要求があります。 これらのメソッドは潜在的に危険性があります。 スタック ウォークが実行されないため、これらのメソッドの呼び出し元は完全なセキュリティ レビューを行い、使用が安全で保護されていることを確認する必要があります。 <div><pre> [SuppressUnmanagedCodeSecurity]class UnsafeNativeMethods<br /> {<br />       [DllImport("user32")]<br />       internal static extern void CreateFile(string fileName);<br />}</pre></div></li></li></li>
  </ul>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>