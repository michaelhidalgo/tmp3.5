<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-97574164" Content_Hash="-1562778495">
  <Metadata>
    <Id>8d30acbe-f771-40fa-976d-3c5376d7bf08</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>ユーザーの機微データはログ記録されない</Title>
    <Category>監査とログ記録</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>チェックリスト項目</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>チェック対象</h1>
  <p>ユーザーがサイトに提出する機微データをログ記録しないことを確認します。&nbsp; 設計上の問題に起因する副作用と同様に、意図的なログ記録をチェックします。&nbsp; 機微データの例：</p>
  <ul>
    <li>ユーザー Credential 情報<li>社会保障番号またはその他の識別情報<li>クレジット カード番号やその他の財務情報<li>健康情報<li>暗号化された情報の解読に使用することができる私有鍵またはその他のデータ<li>アプリケーションをより効果的に攻撃するために使用することができる、システムやアプリケーションの情報</li></li></li></li></li></li>
  </ul>
  <h1>理由</h1>
  <p>ログデータを表示する権限は、顧客の機微データを表示する権限を意味するものではありません。&nbsp; 機微データをログ記録することで、本来ならアクセスすることができないユーザーの手にそれを委ねることになるかもしれません。</p>
  <h1>チェック方法</h1>
  <p>この問題を確認するには、以下の手順に従います。 </p>
  <ol>
    <li>
      <p>
        <strong>アプリケーション内の機微データを識別します。</strong> 設計段階で、システムが扱うすべての機微なユーザーデータの一覧を作成します。&nbsp; 共に使用することで個人を特定するマルチパート登録 Credential 情報またはフィールドなどといった、組合せが重要な、複合データエレメントを含めます。&nbsp; 機微データは様々な書式であることがあります。&nbsp; 顧客名、政府発行ID番号、クレジット カードまたはその他金融機関情報、パスワード、私有鍵はすべて機微な情報の例です。&nbsp; ヘルス ケアや銀行など一部の業界では、機密情報を定義する規制基準を設けています。&nbsp; アプリケーションに規制要件が適用される場合、規制要件に従って機微データを識別します。&nbsp; 一般的に機微データは次のように定義されます。</p>
      <ul>
        <li>他のユーザーと共有すべきではない、Personally Identifiable Information、またはPersonally Identifiable Informationを取得するために使用できる情報。 <li>ユーザーが提供する情報で、アプリケーションの他のユーザーと共有することが望まれないもの。 <li>外部の信頼できる情報源から得られた情報で、ユーザーと共有することは意図されていないもの。 </li></li></li>
      </ul>
      <li>
        <p>
          <strong>アプリケーションのログ記録を確認します。</strong> 機微データだと識別した情報をログ記録していないことを確認するため、ソースコードをチェックします。&nbsp; エラー処理コードに特別な注意を払ってください。これらはしばしば予想外に機微データをログ記録します。</p>
        <p>鍵ユーザー シナリオを実行してから、機微情報がないかログ自身をチェックします。&nbsp; エラー ログ記録コードをテストするため、エラー シナリオを必ずテストしてください。</p>
        <li>
          <p>
            <strong>外部システムでのログ記録を確認します。</strong> アプリケーションが他のシステムに依存している場合、どのデータがログ記録されるのかを理解し、機微な値が集められてしまわない様にシステムを設計します。&nbsp; GET要求の値を記録するHTTPサーバログのように、アプリケーションのコードにおいてこれらの相互処理が透過的であることにご注意ください。 </p>
        </li>
      </li>
    </li>
  </ol>
  <h1>修正方法</h1>
  <p>アプリケーションのロギング アーキテクチャを設計する時、機微データを扱うコンポーネントに特に注意を払います。&nbsp; これらコンポーネントが機微データを収集しないようにログ システムを設計します。&nbsp; システム内のトランザクションを記録する時、必要最小限の情報だけをログ記録します。&nbsp; 顧客からの新しい注文をログ記録する場合、時間、顧客ID、注文IDだけをログ記録します。&nbsp; 顧客氏名、注文商品、支払情報はトランザクション記録から再構築できるため、ログ システムから外しておくことが可能です。 </p>
  <p>しばしば問題の原因となるエラーログに特に注意を払ってください。&nbsp; 例外発生時、またはSQL トランザクションのロールバック時にログ イベントを作成する場合、ロギング前に、例外コンテキストまたはSQLエラーに存在するかもしれない機微な情報を消去します。&nbsp; システムのデバッグ時に冗長(verbose)ロギングモードを使用するのは問題ありませんが、製造時には冗長モードがオンになっていないことを確認します。&nbsp; 製造時に冗長ロギングを必要とする問題が発生すると、生成されたすべてのログを機微な情報として扱ってください。&nbsp; これが起こる可能性が高い場合は、機微データを分離して保護するようにログ システムを設計します。 </p>
  <h1>問題の例</h1>
  <p>ASP.NET アプリケーションはオンラインのオーダー エントリ システムを実装します。&nbsp; お客様は Web フロント エンドに接続して注文し、それは後で履行するためにデータベースに格納されます。&nbsp; ログ記録システムには3 つあります、フロント エンド Web アプリケーション サーバにあるIIS からのHTTP ログとアプリケーションヘルス モニタリングログの 2 つ、および データベース サーバ上にある SQL トランザクション ログです。 </p>
  <ul>
    <li>
      <p />HTTP 要求は GET および POST の混合物を介して行われ、その結果、多数の機微データ片が定期的に Web サーバ ログに表示されます。 <p /><li><p>例外は冗長にとフィルタリングされずでログ記録されるので、例外が発生したときの対象範囲内のあらゆるユーザー データは、ヘルス モニタリングログ記録されます。&nbsp; また、SQL トランザクションのロールバックは、デバッグ目的のためにすべてのクエリ データをログ記録し、その結果、機微情報がさらにログ記録されることになります。 </p><li><p>データベース側のストアド プロシージャ内部では、すべてのトランザクションがデバッグ目的でログ テーブルに書き込まれます。&nbsp; ログ テーブル内のエントリは、トランザクションのすべての詳細が含まれているため、トランザクション ログへのアクセス権を持つすべてのサポート担当者は、すべての顧客情報を見ることができます。 </p></li></li></li>
  </ul>
  <h1>ソリューションの例</h1>
  <p>ASP.NET アプリケーションは、オンライン オーダー エントリ システムを実装しています。&nbsp; お客様は Web フロント エンドに接続して注文し、それは後で履行するためにデータベースに格納されます。&nbsp; ログ記録システムには3 つあります、フロント エンド Web アプリケーション サーバにあるIIS からのHTTP ログとアプリケーションヘルス モニタリングログの 2 つ、および データベース サーバ上にある SQL トランザクション ログです。 </p>
  <ul>
    <li>
      <p>Web サーバ ログをサニタイズするために、機微情報を含むすべての HTTP 要求は GET ではなく POST を介して起こります。&nbsp; この方法では、機微データが Web サーバにログ記録されることはありません。 </p>
      <li>
        <p>アプリケーションのヘルス モニタリングログは多少複雑になります。&nbsp;&nbsp;アプリケーションは、例外またはSQLエラーが発生したこと、およびエラー発生のコンテキストのみをログ記録します。&nbsp; 選択したシステム設計に応じて、 機微データがログ記録されることはないと判断された場合に利用できるより詳細なハンドラーと、デフォルトのより冗長でないハンドラーとの 2 つの異なるログ ハンドラーを持つことができます。&nbsp; 詳細なデバッグ ダンプが必要な場合は、問題となる情報へアクセスすべきではないユーザーがそれを読み取るのを防ぐために ACL されたファイルに書き出すことができます。&nbsp; より高いセキュリティ環境では、代わりに別の暗号化されたリモート ログ記録機能を使用することができます。&nbsp; </p>
        <li>
          <p>データベース ログは単純化されており、タイムスタンプ、注文 ID、および場合によっては各トランザクションでのユーザー ID のみが含まれています。&nbsp; これによりデータは正規化されたまま保持され、管理者やサポート要員は基本的な情報のみを参照できる一方で、適切な権限を持つユーザーはすべてのデータを取得することを意味します。 </p>
        </li>
      </li>
    </li>
  </ul>
  <h1>関連する項目</h1>
  <ul>
  </ul>
  <hr />
  <p>出典: Microsoft patterns & practices guidance </p>]]></Data>
  </Content>
</TeamMentor_Article>