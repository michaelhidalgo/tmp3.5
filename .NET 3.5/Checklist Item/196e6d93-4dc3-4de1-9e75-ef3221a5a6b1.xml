<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1478945061" Content_Hash="598770812">
  <Metadata>
    <Id>196e6d93-4dc3-4de1-9e75-ef3221a5a6b1</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>高度なアプリケーション アーキテクチャを使用する</Title>
    <Category>設計上の考慮事項</Category>
    <Phase>設計</Phase>
    <Technology> 任意</Technology>
    <Type>チェックリスト項目</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>チェック対象</h1>
  <p>高度なアプリケーション アーキテクチャが使用されていることを確認します。</p>
  <h1>理由</h1>
  <p>ソフトウェアを区分化すれば、システムに及ぶ損害の程度を制限することができます。 1 つのコンポーネントが破られても、システム全体が危険にさらされることがないようにするために、システムを孤立したユニットの集まりに分割することができます。 区分化を行うことにより、リソース、データ、ユーザー、プロセスを互いに分離します。</p>
  <h1>チェック方法</h1>
  <p>次の手順に従って、高度なアプリケーション アーキテクチャが使用されていることを確認します。</p>
  <ol>
    <li>
      <p>
        <strong>ユーザーが区画化されていることを確認します。</strong> 認可を処理するコードを特定します。 コードをレビューして、ロール ベースの認可が使用されていることを確認します。</p>
      <li>
        <p>
          <strong>プロセスが区画化されていることを確認します。</strong> プロジェクトの文書をレビューして、アプリケーションが、セキュリティ要件に基づいて複数の機能モジュールに分離されていることを確認します。 コードをレビューして、設計と実装が一致していることを確認します。</p>
        <li>
          <p>
            <strong>データが区画化されていることを確認します。</strong> プロジェクトの文書をレビューして、データが、設計上のセキュリティ要件に基づいて複数の場所に保管されていることを確認します。 コードをレビューして、設計と実装が一致していることを確認します。</p>
        </li>
      </li>
    </li>
  </ol>
  <h1>修正方法</h1>
  <p>アプリケーション アーキテクチャーの設計は、プロジェクトの早い段階で行うのが最善です。 後になると、アーキテクチャーは時間とともに頑強になる可能性があります。 コンポーネント間を分離するには、次のようにします。</p>
  <ol>
    <li>
      <p>
        <strong>ユーザーを区分化してください。</strong> 決して、異なるユーザーに対し、アプリケーション リソースに対する同じ権限のセットを提供するべきではありません。 ユーザーを分離すれば、あるユーザーのアカウントが危険にさらされた場合でも、他のアカウントはセキュアに保たれます。 ロール ベースおよびユーザー ベースの認可を使用して、ユーザーを強制的に分離します。 ロールベースの認可では、ロールを定義する必要があります。 さらに、ユーザーのグループごとにアクセスできるリソースの種類を定義する必要があります。 ユーザー ベースの認可では、特定のユーザーのみがアクセスできるリソースの種類を決定します。</p>
      <li>
        <p>
          <strong>プロセスを区分化してください。</strong> アプリケーションを明確に定義された機能コンポーネントの集まりに分割してください。 これらのコンポーネントはそれぞれ、固有な独自の目的を持っているべきです。 この分離は、クレジット カードによる取引のように、重要な操作やプロセスを処理する場合にも適用されます。 アプリケーションを適切に区画化しないと、1 つのプロセスで発生したアセットや侵入が、アプリケーション全体とその資産に損害を与える場合があります。</p>
        <li>
          <p>
            <strong>データを区分化してください。</strong> データは、その機微性および目的に応じて、次のように個別に保存するべきです。</p>
          <ul>
            <li>データは、一般からのアクセスは行えないマシンのデータベースに保存してください。 <li>Web-rootは、OS のインストール先とは別のパーティションに置いてください。 <li>データは、それにアクセスするために必要な認可レベルごとにセグメント化してください (データベースのテーブル、構成ファイル、Web フォルダーなど)。 <li>データの種類ごとに保存するためにデータベース/テーブルを分離し、その必要に応じて制限された特権だけを持つようにそれぞれのデータベース ユーザーを作成してください。 <li>ファイルシステムでは、許可を注意して割り当て、特定のプロセスで必要とする特権だけを与えてください。</li></li></li></li></li>
          </ul>
        </li>
      </li>
    </li>
  </ol>
  <h1>関連ガイドライン</h1>
  <ul>
  </ul>
  <h1>関連チェックリスト</h1>
  <ul>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>