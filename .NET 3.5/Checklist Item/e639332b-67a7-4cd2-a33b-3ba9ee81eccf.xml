<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="2095837053" Content_Hash="2125357316">
  <Metadata>
    <Id>e639332b-67a7-4cd2-a33b-3ba9ee81eccf</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>セキュリティ コード レビューを実行する</Title>
    <Category>セキュリティ工学</Category>
    <Phase>実装</Phase>
    <Technology> 任意</Technology>
    <Type>チェックリスト項目</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>チェック対象</h1>
  <p>プロジェクト文書にはセキュリティ コード レビューの結果を含めるべきです。</p>
  <h1>理由</h1>
  <p>適切に実施されたコード レビューは、他のどんなアクティビティよりもコードの安全を守ります。 コード レビューを実施することで、コードをテストまたは出荷する前にたくさんのセキュリティ問題を発見し、修正できます。 また、コード レビュー プロセスにより、開発チームはセキュリティのベスト プラクティスと経験を共有し、将来のセキュリティ問題を防止できます。</p>
  <h1>チェック方法</h1>
  <p>プロジェクト文書を調べ、セキュリティ コード レビューの結果が含まれていることを確認します。 この結果には、特定された脆弱性と、修正のための優先順位を含めます。</p>
  <h1>修正方法</h1>
  <p>次のステップでセキュリティ コード レビューを実行します。</p>
  <ol>
    <li>
      <p>
        <strong>セキュリティ コード レビューの目的を確認します。</strong> レビューの目標と制約を設定します。 </p>
      <li>
        <p>
          <strong>事前スキャンを実行します。</strong> 静的解析を利用し、最初に見つけたいくつかのセキュリティ問題を基に、コードをより完全にレビューするときにセキュリティ問題を発見できそうな場所についてより良く理解します。 </p>
        <li>
          <p>
            <strong>セキュリティ問題に関してコードをレビューします。</strong> 多くのアプリケーションに共通のセキュリティ上の脆弱性を見つける目的でコードを徹底的にレビューします。 ステップ 2 の結果を利用し、集中的に分析します。 </p>
          <li>
            <p>
              <strong>アーキテクチャに固有のセキュリティ問題をレビューします。</strong> アプリケーション固有のアーキテクチャに関連するセキュリティ問題を探し、最終分析を完了します。 独自のセキュリティ メカニズムを実装している場合や、既知のセキュリティ上の脅威を軽減するために特に設計された機能を実装している場合、このステップは最も重要です。</p>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <h1>関連する項目</h1>
  <ul>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>