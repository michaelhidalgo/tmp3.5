<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-607916774" Content_Hash="-256426602">
  <Metadata>
    <Id>581e8fff-7841-49ac-8bbe-d74e44aa9bd8</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>すべての入力を、長さ、範囲､フォーマットおよび型について検証する</Title>
    <Category>入力/データ検証</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>チェックリスト項目</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>ASP.NET 3.5</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>チェック対象</h1>
  <p />検証ルーチンを通して渡されない入力があるかどうかを確認する。&nbsp; 検証ルーチンを使用して、長さ、範囲、書式、型をチェックします。 検証では、まず既知の有効で安全なデータをチェックし、次に悪意のある危険なデータをチェックします。&nbsp; <span><p /></span><h1>理由</h1><p />悪意のある入力を渡す攻撃者は、アプリケーションの脆弱性を悪用する目的で、SQL インジェクション、クロスサイト スクリプティング、およびその他のインジェクション攻撃を行うおそれがあります。&nbsp;&nbsp; 入力検証だけでは十分ではありません。 これらの攻撃を完全に防ぐには、出力エンコーディングも必要です。<span><p /></span><h1>チェック方法</h1><p>この問題をチェックするには、以下の手順を行います。</p><h2>アプリケーションですべての入力ソースを特定する</h2><p>設計時に、アプリケーションへの潜在的な入力ソースをすべて特定してください。 ソース コードを十分に調べて、設計段階で見落としている可能性のある入力のソースを見つけます。&nbsp; 次の手順において利用できるリストをコンパイルします。</p><h2>ソースからシンクまでデータを追跡する</h2><p>最終的な宛先が見つかるまで、アプリケーション全体ですべての入力ソースを追跡します。&nbsp; 最終的なシンクは、メモリ内、ハード ディスク上、ネットワークを介して送信、データベース内に保存の可能性があります。&nbsp; </p><h2>検証ルーチンを特定する</h2><p>各入力ソースには、データ検証ルーチンが関連付けられているはずです。&nbsp; 理想的には、入力がアプリケーションに到達すると同時に検証を開始します。&nbsp; 共有検証ルーチンは、多数の検証ルーチンを作成してコード ベース全体に配置するより効率的です。テストを支援する目的でルーチンの統合をチェックして、ワンオフ バグの可能性を軽減します。&nbsp; 入力ソースに検証ルーチンが関連付けられていない場合は、修正するようにフラグを設定します。</p><h2>検証ルーチンの品質を確認する</h2><p>検証ルーチンは、長さ、範囲、形式、型をチェックします。 検証では、まず既知の有効で安全なデータをチェックし、次に悪意のある危険なデータをチェックします。&nbsp;悪意のあるデータのフィルタリングは信用しないでください。フィルタリング漏れが発生します。 Client-side Validation は簡単にバイパスできるため、Client-side Validation のみに依存しないでください。</p><p /><span><p /></span><h1>修正方法</h1><p>既知の有効なデータをチェックして、型、長さ、形式、および範囲を検証することによって入力を制限します。&nbsp; サーバ コントロールから入力を取得するウェブ フォーム アプリケーションの場合は、RegularExpressionValidator、RangeValidator、および CustomValidator などの ASP.NET 検証コントロールを使用して、入力を検証および制限してください。&nbsp; すべての数値フィールドで型と範囲をチェックします。 サーバ制御を使用していない場合は、正規表現 (regex) と Regex クラスを使用できます。入力値を整数または倍精度に変換してから範囲チェックを行うことにより、数値範囲を検証できます。&nbsp; 該当フィールドで想定されるすべての入力を受け入れる、最も許容度の低い表現で入力を検証します。&nbsp; フィールドに特定の内部構造体がある場合は、それをチェックします。&nbsp; クレジット カード番号などの内部チェックサムがある場合は、それもチェックします。 </p><p>多くのウェブ アプリケーションは、HTML コントロール、サーバ コントロール、クエリ文字列、およびCookieなどのさまざまなソースからの入力を受け入れます。&nbsp; インジェクション攻撃を防ぐために、これらすべてのソースからの入力を検証します。&nbsp; 入力を検証するには正規表現を使用します。&nbsp; 以下の例は、正規表現 (Regex) クラスの使い方を示しています。 </p><pre>using System.Text.RegularExpressions ;<br /> // Instance method:Regex reg = new Regex(@"^[a-zA-Z'.\s]{1,40}$");<br />Response.Write(reg.IsMatch(Request.QueryString["Name"]));<br />// Static method:<br />if (!Regex.IsMatch(Request.QueryString["Name"],@"^[a-zA-Z'.\s]{1,40}$"))<br /> {<br />   // Name does not match expression<br />}</pre><p>正規表現を定型としてキャッシュできない場合は、不要なオブジェクトの作成を避けるため、パフォーマンスに関する理由から、できる限り、静的な IsMatch メソッドを使用するようにしてください。 </p><p>入力を検証しても、出力の書式設定、クエリのパラメータ化、またはユーザー入力を慎重に処理することが必要なくなるわけではありません。 </p><h1>問題の例</h1><p>ASP.NET アプリケーションには、複数のフィールド、具体的には、名前、住所、電話番号、商品番号、および数量を持つ、ウェブ ストアの注文フォームが含まれています。&nbsp; それぞれの商品は、データベースが型キャストを行い、単純にデータベースに追加されます。&nbsp; 適切な型へのキャストは多少は有益ですが、SQL インジェクション問題を防ぐには対処が遅すぎます。&nbsp; さらに、データの品質についての保証はありません。 </p><span></span><h1>ソリューションの例</h1><p>ASP.NET アプリケーションはウェブストアの注文を含みます。&nbsp; すべてのフォーム フィールドが検証され、収集されるデータについての保証がより確実になります。&nbsp; 電話番号は、10 桁 (数字以外の文字をすべて削除した後) の文字列、または国際番号が許容される場合には、「+」で始まる可変桁数として検証されます。&nbsp; </p><p>名前、住所、および商品番号の検証は、もう少し複雑になります。&nbsp; まず、それぞれのケースについて有効な文字セットが使用されているかどうかを判別します。&nbsp; 名前の場合は、スペース、大文字小文字 (現在のコードページのアクセント付き形式を含む)、使用可能な数字、およびピリオドで十分です。&nbsp; 住所には、最低でも、コンマ、ハイフン、番号記号を追加する必要があります。&nbsp; 商品番号の検証は単純で、整数にキャストして、結果が正しい範囲内にあることをチェックします。または、文字列内に内部書式設定があるかどうかをチェックする、より複雑な正規表現を使用する場合もあります。 </p><p>最後のオプションのデータ検証手順は、データが有効な物を参照していることの確認です。&nbsp; データは、特に、この後のチェックでデータベース クエリが必要になる場合に、まず形式について検証されなければなりません。&nbsp; 商品番号については、言うまでもなく、DB 内に存在するかどうかをチェックします。新しい注文を作成するストアド プロシージャの一部として通常行われますが、名前、住所、電話番号を同様に複数回チェックします。&nbsp; たとえば、住所フィールドが複数の部分に分かれている場合は、最低でも、都道府県情報、郵便番号、市区町村名を、既存のリストを使用して検証します。</p><p /><span><p /></span><h1>関連する項目</h1><ul><li>ガイドライン: すべての入力を検証する</li></ul><hr /><p>出典: Microsoft patterns & practices guidance </p>]]></Data>
  </Content>
</TeamMentor_Article>