<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1366280532" Content_Hash="-508122099">
  <Metadata>
    <Id>dc7aa72b-9d4f-4303-965b-6cb1c367c7c1</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>セキュリティ決定がクライアントアクセス可能なパラメータによらないものとする</Title>
    <Category>パラメータ操作</Category>
    <Phase>設計</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>チェックリスト項目</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>チェック対象</h1>
  <p>アプリケーションが、クライアントがアクセス可能なパラメータに基づいてセキュリティの決定を行わないこと、そして&amp;nbsp;すべてのセキュリティの決定がサーバに制御される情報のみに基づいて行われることを検証してください。</p>
  <h1>理由</h1>
  <p>クライアントの入力は、フォーム変数やクエ文字列パラメータなどの直接入力から、Cookieや接続情報などの非直接的な入力まで様々な形態をとります。 ファット クライアントであっても、クライアントからの情報は、攻撃者によって完全にコントロールされている恐れがあるため、これらは信頼できるものではありません。</p>
  <p>この情報のみに直接基づいてセキュリティ決定を行うと、攻撃者はそれら決定の結果を改ざんできます。 たとえば、ファット クライアントがユーザーのロールリストを送ると、ユーザーはリストを変更できます。 役割キャッシュ用Cookieがもう一つの例として挙げられます。 Cookieが署名や暗号化により耐タンパーでない限り、ユーザーはシステム内のロールを自由に変更することができます。 </p>
  <h1>チェック方法</h1>
  <p>以下の手順を使用して、アプリケーションがセキュリティ決定メカニズムの一部をクライアント側に委譲しないようにします。</p>
  <ol>
    <li>
      <p>
        <strong>クライアント側にセキュリティ決定ポイントが存在しないことを確認します。 </strong>アプリケーションの設計と要件を確認します。 アプリケーションのセキュリティ決定がクライアント側で実行されていないことを確認してください。 </p>
      <li>
        <p>
          <strong>ユーザー入力がセキュリティの決定に影響しないことを確認します。 </strong>サーバ上では、ソースからシンクまでのすべてのユーザー入力が追跡されます。 サーバ側アプリケーションのセキュリティ決定が、変更可能なユーザーの入力のみに基づいていないことを確認してください。 以下のような一般的なミスを探します。</p>
        <ul>
          <li>特権付きの機能を有効化する、ドキュメントに記載されていないパラメーター <li>Cookieに格納されたユーザー特権</li></li>
        </ul>
        <li>
          <p>
            <strong>クライアントがセキュリティの決定を改ざん可能でないか確認します。 </strong>BURP proxy &amp;#8212; のような テスト HTTP プロキシ ツール&amp;#8212; の使用により、 クライアント提供のデータをタンパリングすることがアプリケーション内部のセキュリティ決定に直接影響できないことを確認してください。 以下により、ユーザーが必要以上な特権を得ないようにします。</p>
          <ul>
            <li>URLクエリ文字列、またはフォームベースのパラメータを変更する<li>HTTP Cookieの値を追加または変更する<li>参照元やユーザーエージェント ヘッダなどといった、その他のHTTP ヘッダ変数を変更する</li></li></li>
          </ul>
          <li>
            <p>
              <strong>すべての例外がマークされていることを検証してください。 </strong>このルールに対するすべての例外が、アプリケーションのドキュメンテーションで適切に記述されていることを確認してください。 アプリケーションの開発チームがすべての例外を意識していることを確認してください。 例えば、ユーザーが URL パラメータ経由で特定のロール間の変更を許可されている場合、そのような機能性が本当に意図されたものか検証してください。</p>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <h1>問題の例</h1>
  <p>次のコードは、ユーザー提供の入力を承諾するアプリケーションを説明しています。 不運なことに、アプリケーションは、攻撃者がセキュリティ決定に影響するデータをタンパリングできるような、クライアントからのユーザー ID を取得します。</p>
  <p />
 <pre>public Profile GetProfileForUser()<br />&amp;#123;<br />      HttpRequest request = HttpContext.Request;<br />      string userID = request.Params&amp;#91;"userid"&amp;#93;;<br />      if(Roles.IsUserInRole(userID, "Administrators"))<br />      &amp;#123;<br />            ...<br />      &amp;#125;<br />       ...<br />&amp;#125;</pre>
  <h1>その他のリソース</h1>
  <p>HTTP メッセージを簡単にタンパリングするには、<a href="http://www.portswigger.net/proxy/">BURP Proxy. を参照してください。</a></p>
  <h1>関連ガイドライン</h1>
  <ul>
  </ul>
  <hr />
  <p>出典: Microsoft Patterns &amp; Practices ガイダンス </p>]]></Data>
  </Content>
</TeamMentor_Article>