<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1703420144" Content_Hash="1518228523">
  <Metadata>
    <Id>b3a939b6-732f-49d0-b204-0422dbfbdbaa</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>入力は、長さ、範囲、フォーマット、およびタイプが検証されます</Title>
    <Category>入力とデータの検証</Category>
    <Phase>設計</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>チェックリスト項目</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>チェック対象</h1>
  <p>入力は、それが期待されたフォーマットであり、入力が使用されるコンテキストに基づいており、出力時に適切にエンコードされているかを確認するために、サーバ上で検証されます。</p>
  <h1>理由</h1>
  <p>悪意のある入力を渡す攻撃者は、SQLインジェクション、クロスサイト スクリプティング、およびアプリケーション内でユーザーの脆弱性を悪用しようと他のインジェクション攻撃を試みることができます。 入力の検証は、受信した入力と期待フォーマットとの一致を保証することによって、これらのリスクを軽減します。 入力検証だけでは不十分です。 信頼性を向上させるだけでなく、これらの攻撃を十分に阻止するためには、出力エンコーディングも必要です。 検証はまた、範囲外だが無害だと考えられる入力から問題が生じないことを確保するため、可能な限り厳密である必要があります。 このプロパティが維持されていることを確実にするには、決してブロックリストではなく常に許可リストアプローチを取ることをお勧めします。</p>
  <h1>チェック方法</h1>
  <p>この問題を確認するには、以下の手順に従います。 </p>
  <ol>
    <li>
      <p>
        <strong>数値範囲が強制されていることを確認します。 </strong>数値入力を特定範囲に制約するために<em>RangeValidator</em> コントロールが使用されているかチェックします。</p>
      <li>
        <p>
          <strong>確認フィールドが検証されていることを確認します。 </strong>確認フィールドの有効性を確保するために<em>CompareValidator</em> コントロールが使用されているかチェックします。 確認フィールドの一例 であるパスワード入力フィールドでは、ユーザーに値を再入力するよう求めて、2つの値を比較検証します。 </p>
        <li>
          <p>
            <strong>タイプ制約が文字列フィールドで強制されていることを確認します。 </strong>文字列入力の検証に<em>RegularExpressionValidator</em> コントロールが使用されているかチェックします。 このバリデータは、正規表現を使って文字列入力フィールドの様々なチェックを行います。 </p>
          <li>
            <p>
              <strong>残りの入力制約を処理するためにカスタム検証が使用されていることを確認します。 </strong>内蔵のASP.NETバリデータによって処理されない制約への入力を検証するために<em>CustomValidator</em> コントロールが使用されているかをチェックします。  <strong>CustomValidator</strong> コントロールを使用するときは、入力の長さ、範囲、フォーマット、タイプが検証されているか確認することが重要です。 アプリケーションが、たとえば既存のバリデータでは強制できない特定のビジネス ロジック制約を必要とするような場合は、このバリデータを使用します。 </p>
            <li>
              <p>
                <strong>他のソースの検証に正規表現 (regex) クラスが使用されていることを確認します。 </strong>クエリ文字列パラメータやCookieなど、フォームフィールド以外のソースからの入力を検証する必要がある場合は、<strong>System.Text.RegularExpressions</strong> ネームスペース内で<strong>正規表現 (regex)</strong> クラスが使用されているかをチェックします。 </p>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <h1>問題の例</h1>
  <p>オンラインショッピングカート用の非常にシンプルなフォームを考えてみましょう。 カートコンポーネントは2つのコンポーネントから成ります：</p>
  <ol>
    <li>
      <p>注文処理のため送信するすべてのフィールドを含むHTMLフォーム:</p>
 <pre>&lt;html&gt;<br />  &lt;head&gt;<br />    &lt;title&gt;Widget shopping cart&lt;/title&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />    &lt;H1&gt;Welcome to the most boring shopping cart on the web!&lt;/H1&gt;<br />     A widget's current price is $19.95 USD. Please use the following form to submit an order.<br />    &lt;form action="process_order.aspx" method="POST"&gt;<br />       &lt;p&gt;Please enter the number of widgets you would like to purchase:&lt;/p&gt;<br />      quantity:&lt;br/&gt;<br />      &lt;select name="WidgetQuantity"&gt;<br />        &lt;option value="1"&gt;1&lt;/option&gt;<br />        &lt;option value="2"&gt;2&lt;/option&gt;<br />        &lt;option value="3"&gt;3&lt;/option&gt;<br />        &lt;option value="4"&gt;4&lt;/option&gt;<br />      &lt;/select&gt;<br />      ...<br />      &lt;input type="submit" value="order"/&gt;<br />    &lt;/form&gt;<br />  &lt;/body&gt;<br />&lt;/html&gt;</pre>
      <li>
        <p>フォームの送信を処理し、注文を作成するために必要なステップを実行するASP.NET ページ</p>
 <pre>int dQuantity = Request("WidgetQuantity");<br />double dPrice = 19.95;<br />double dCost = dQuantity * dPrice;</pre>
      </li>
    </li>
  </ol>
  <p>数量フィールドが正しいかを確認するための検証を欠いているため、このサーバ側のページには問題があります。 ユーザーがルールを守り、指示どおりにフォームを提出する場合、数量フィールドは注文数量の範囲制約が常に有効であることを保証するので、アプリケーションは正常に動作します。 しかし、賢いユーザーが自分だけのフォームを構築することを決め、負の数のWidgetQuantity フィールドを送信すると、マイナス残高が発生します。 使用する電子商取引システムによっては、これによりユーザーのアカウントにクレジットが発生する可能性があります。 それはまた、会社の棚卸資産からマイナス残高を減算するかもしれず、後で著しい悪影響と損失をもたらすことになります。</p>
  <hr />
  <p>出典: Microsoft patterns & practices guidance </p>]]></Data>
  </Content>
</TeamMentor_Article>