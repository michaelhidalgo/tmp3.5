<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1503716552" Content_Hash="1343627300">
  <Metadata>
    <Id>e2a7e430-e0fd-4443-89d4-76cd4f970d9d</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>ネットワーク上で機微データが保護されている</Title>
    <Category>機密のデータ</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>チェックリスト項目</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>チェック対象</h1>
  <p>ネットワーク経由で送信される機微データを保護するために暗号化が使用されていることを確認してください。</p>
  <h1>理由</h1>
  <p>ネットワーク経由でデータが送信される場合、通常は所定の最終目的地へ向く途上でいくつかの中間リレーを通過して行きます。 伝送中の <a href="/article/cf06603e-440e-4118-85d5-ad360817fabc">ネットワーク盗聴攻撃</a> または <a href="/article/a048eed9-ad5a-4dac-a8d3-68f42da69dbd">中間者攻撃</a> に対する保護を追加するために、情報の送信に安全なプロトコルを使用することが重要です。</p>
  <h1>チェック方法</h1>
  <p>アプリケーションがネットワーク経由で機微データを送信する場合､データ送信中にデータが盗難または改変されないように保護するための暗号化が行われていることを確かめる必要があります。 これを行うには、以下の手順に従います。</p>
  <ol>
    <li>
      <p>
        <strong>機密情報を識別します。</strong> 機微データとは、秘密に保たれており、認可されている当事者にのみ開示するべき情報のことです。 機微データの典型的な例として、以下に限定されませんが、顧客名、政府発行のID番号、クレジット カードまたその他の財務情報、パスワード、および私有鍵などが含まれます｡ ヘルス ケアや銀行など一部の業界では、機密情報を定義する規制基準を設けています。 アプリケーションに規制要件が適用される場合、規制要件に従って機微データを識別します。 機微データは次のように定義されます:</p>
      <ul>
        <li>Personally Identifiable Informationが含まれるか、またはPersonally Identifiable Informationの導出に使用できる、他者と共有すべきでない情報。 <li>ユーザーが提供する情報で、アプリケーションの他のユーザーと共有することが望まれないもの。 <li>ユーザー間で共有するように設計されていない、外部の信頼されているソースからの情報。</li></li></li>
      </ul>
      <strong>
      </strong>
      <li>
        <p>
          <strong>機微データがセキュアに送信されていることを確認します。</strong> アプリケーションが機微データをセキュアな方法で送信することを確認します。 アプリケーションが以下のアプローチを使用するか否かチェックしてください。</p>
        <ul>
          <li>
            <p>
              <strong>通信用リンクの暗号化。</strong>
              <a href="/article/dffb5d33-3dca-4cea-999c-60f0a5deff63">通信リンクは暗号化される</a> チェックリストを使用することにより、アプリケーションの通信リンクが適切に確保されているかどうかチェックしてください。</p>
            <li>
              <p>
                <strong>アプリケーション･データの暗号化｡</strong> アプリケーションがアプリケーション･データを暗号化する場合､ネットワーク経由で送信する前にアプリケーションが安全にアプリケーション･データを変換しているか否かをチェックしてください。</p>
              <ul>
                <li>
                  <p>
                    <strong>ハッシュ化 </strong>ハッシュ化は、読み取りできない方法で機微データを保存するためのメカニズムの一つです。 機微データの格納手段としてハッシュ化が使用されている場合、以下の項目が適切な状態であることを確認します。</p>
                  <ul>
                    <li>
                      <strong>ソルト</strong>:アプリケーションが <strong>RNGCryptoServiceProvider</strong> クラスを使用してソルトを生成するかどうかチェックしてください。 <li><strong>関数</strong>:アプリケーションがSHA-256、 SHA-384または SHA-512をハッシュ関数として使用するかチェックしてください｡ <li><strong>呼び出し</strong>: ハッシュ化手順を実行するために、アプリケーションが <strong>HMAC.ComputeHash</strong> メソッドを呼び出すかどうかを確認します。 <li><strong>クリーンアップ</strong>:アプリケーションが、ハッシュ化プロシージャが完了した後、機微データのすべてのインスタンスを安全に消去するかどうかチェックしてください。 詳細については、<a href="/article/48ebd4c2-b51d-47b6-8c4c-f7bc37edfb1f">「機微データは使用されなくなるとメモリーから消去される」</a>チェックリストを確認してください。</li></li></li></li>
                  </ul>
                  <li>
                    <p>
                      <strong>暗号化</strong> 暗号化は、読み取り可能な仕方で機微データを保存し、また送信するメカニズムです。 機微データの格納手段として暗号化が使用されている場合、以下の項目が適切な状態であることを確認します。</p>
                    <ul>
                      <li>
                        <strong>暗号化鍵</strong>: アプリケーションの暗号化鍵が、アプリケーションの鍵ストア内にセキュアに格納されていることを確認します。 詳細については、<a href="/article/f45de1f9-3801-4677-966e-433241bfdd91">セキュアな鍵ストア ロケーションが使用される</a> チェックリストを参照してください。 <li><strong>機能</strong>:アプリケーションが AES、 AES256、または類似の、最新の強力な対称暗号化関数を使用するかどうかチェックしてください。 3DESおよび他の旧来のアルゴリズムは新規開発時には避けなければなりません。 <li><strong>呼び出し</strong>: 暗号化手順を実行するために、アプリケーションが <strong>SymmetricAlgorithm.Create</strong> および <strong>ICryptoTransform.TransformFinalBlock</strong> メソッドを呼び出すかどうか確認します。 <li><strong>クリーンアップ</strong>: 暗号化プロシージャの完了後に、機微データとその暗号化鍵のすべてのインスタンスがセキュアにクリーンアップされるかどうかを確認します。 詳細については、<a href="/article/48ebd4c2-b51d-47b6-8c4c-f7bc37edfb1f">機微データは使用されなくなるとメモリからクリアされる</a> を参照してください。</li></li></li></li>
                    </ul>
                  </li>
                </li>
              </ul>
            </li>
          </li>
        </ul>
      </li>
    </li>
  </ol>
  <h1>問題の例</h1>
  <p>ASP.NETに書き込まれた電子商取引のアプリケーションにより、顧客は統一したブローカー経由で請求書の支払いをオンラインで行うことができます。 アプリケーションのウェブ･コンポーネントは、別のサーバに備わった独立の口座管理システムを信頼します。 ウェブ･コンポーネントはSQLソケット接続を使用して口座管理システムと通信します。 2つのサーバは、いつでも建物にアクセスできる多数の他の顧客を収容する、価格競争力のあるデータセンターに設置されています。 悪意のあるユーザーは同一の会社でホスティングサービスを購入し､ホスティング環境を探索した後、ネットワーク･スヌーピングを許容する共有バス･トポロジーを使用してホストされている口座がネットワークにつながっていることを知ります｡ 攻撃者は、SQL 接続がデフォルトでは暗号化されていないため、スニッファを設定して、アカウント管理コンポーネントと Web コンポーネント間の通信のすべてをキャプチャできます。 攻撃者は、正当なユーザーとしてアカウント管理サーバにログインし、随意に変更を行う可能性があります。</p>
  <h1>その他のリソース</h1>
  <ul>
    <li>SHA ハッシュ化関数の詳細は、<a href="http://en.wikipedia.org/wiki/SHA_hash_functions">SHA ハッシュ関数</a> を参照してください。<li>対称鍵暗号方式の詳細は、<a href="http://en.wikipedia.org/wiki/Symmetric-key_algorithm">対称鍵アルゴリズム</a> を参照してください。</li></li>
  </ul>
  <h1>関連ガイドライン</h1>
  <ul>
  </ul>
  <hr />
  <p>出典: Microsoft Patterns &amp; Practices ガイダンス </p>]]></Data>
  </Content>
</TeamMentor_Article>