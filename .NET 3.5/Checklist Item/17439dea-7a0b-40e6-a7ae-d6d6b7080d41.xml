<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-219423763" Content_Hash="1395329071">
  <Metadata>
    <Id>17439dea-7a0b-40e6-a7ae-d6d6b7080d41</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>データベース アクセスには最小特権アカウントが使用される</Title>
    <Category>データ アクセス</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>チェックリスト項目</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>チェック対象</h1>
  <p>アプリケーションが最小特権アカウントを使用してデータベースに接続することを確認してください。</p>
  <h1>理由</h1>
  <p>最小限の特権アカウントでデータベースに接続すると、SQLインジェクション攻撃を受けた場合や、攻撃者がアカウントの Credential 情報を入手した場合に被る損害が制限されます。 </p>
  <h1>チェック方法</h1>
  <p>最小限の特権の原則では、ユーザーが各自のタスクを実行するための十分な特権を与えられていることが求められます。 アプリケーションでバックエンド データベース サーバーが使用される場合、以下の手順を実行して、アプリケーションで最小特権の原則が適用されるようにします。</p>
  <ol>
    <li>
      <p>
        <strong>アプリケーションが使用するデータベース アカウントをすべて特定してください。</strong> アプリケーションが使用するさまざまなサーバ上に存在するアプリケーションのデータベース アカウントをすべて一覧表示してください。 データベース アカウント情報は通常、web.config ファイル内の接続文字列から取得することができます。 ハードコードされたアカウントの詳細がアプリケーション コード内にある場合、構成可能な接続文字列が参照先となるようにアカウントの詳細を変更する必要があります。</p>
      <li>
        <p>
          <strong>各データベース アカウントに関連付けられる役割を識別します。</strong> 各アカウントが実行するデータベース アクションを特定してください。 マトリクスを使用して、各アカウントが必要とする最小限の特権セットを特定してください。</p>
        <ul>
          <li>
            <p>
              <strong>各アカウント／ロールが必要とする最小限の特権セットを特定する：</strong>各アカウント／ロールがアクセスするテーブルとストアド プロシージャ、および各アカウント／ロールがテーブルで実行するアクション（読み取り、書き込み、ドロップ、作成等）を判別します。 これは、アプリケーションがバックエンド データベースにアクセスするコードの各セクションから判別することができます。 この情報を使用して以下のようにマトリクスを作成してください。</p>
 <pre>Accounts     Actions    Stored Proc     Users Table<br />------------------------------------------------------<br />app_admin    Connect    Always          Always<br />             Read       Always          Always<br />             Use        Always          Occasionally<br />             Modify     Never           Occasionally <br />app_normal   Connect    Always          Always<br />             Read       Always          Always<br />             Use        Always          Always<br />             Modify     Never           Never</pre>
            <li>
              <strong>各アカウント／ロールが実際に持っている特権のセットを特定してください。</strong> 各データベース アカウントに与えられている実際のデータベース アクセス特権を判別してください。 この情報はデータベース サーバから取得することができます。</li>
          </li>
        </ul>
        <li>
          <p>
            <strong>アカウントに余分な特権が付与されないようにします。</strong> 各アカウントで意図する特権を、実際の特権と比較します。 どのアカウントにも余分な特権が付与されていないことを確認します。</p>
          <ul>
            <li>直接のテーブル アクセスは与えられず、アクセスは選択されたストアド プロシージャのみに制限されます。 <li>テーブル アクセスが必要な場合、必要最小限のアクセスのみが与えられます<li>データベース ロールは、固定ユーザーにアクセス許可を直接与えるのを避けるために使用されます<li>アプリケーションが複雑な場合、データベース アクセスを異なるアカウントに区分することによって特権を分割できます。</li></li></li></li>
          </ul>
        </li>
      </li>
    </li>
  </ol>
  <h1>問題の例</h1>
  <p>以下のスニペットに、データベース アカウントとそのアクセス許可の一部のリストを示します。 残念ながら、アプリケーションのアカウント (myapp) は必要以上の特権を付与されています。 攻撃者がアプリケーションのデータベース アカウントを危険にさらした場合、データベース サーバからテーブルを落とすことができます。</p>
  <p />
 <pre>&amp;#43;----------------&amp;#43;-------&amp;#43;-------------&amp;#43;-----------&amp;#43;<br />&amp;#124; host           &amp;#124; user  &amp;#124; select      &amp;#124; drop      &amp;#124;<br />&amp;#43;----------------&amp;#43;-------&amp;#43;-------------&amp;#43;-----------&amp;#43;<br />&amp;#124; localhost      &amp;#124; sa    &amp;#124; Y           &amp;#124; Y         &amp;#124;<br />&amp;#124; 192.168.10.220 &amp;#124; myapp &amp;#124; Y           &amp;#124; Y         &amp;#124;<br />&amp;#43;----------------&amp;#43;-------&amp;#43;-------------&amp;#43;-----------&amp;#43;</pre>
  <h1>関連ガイドライン</h1>
  <ul>
    <li>
      <a href="/article/fab1733c-61d7-46a8-88c6-2617a643c0d9">ガイドライン: データベース アクセスには最小限の特権アカウントを使用する</a>
    </li>
  </ul>
  <hr />
  <p>出典: Microsoft Patterns &amp; Practices ガイダンス </p>]]></Data>
  </Content>
</TeamMentor_Article>