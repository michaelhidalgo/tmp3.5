<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1258091331" Content_Hash="-1763004880">
  <Metadata>
    <Id>f8ddaf82-215f-4cff-9bd5-ec2b6121f40a</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>必要でない限り、リダイレクトと転送は使用しない</Title>
    <Category>入力とデータの検証</Category>
    <Phase>設計</Phase>
    <Technology>Web アプリケーション</Technology>
    <Type>チェックリスト項目</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用対象</h1>
  <ul>
    <li>Web アプリケーション</li>
  </ul>
  <h1>チェック対象</h1>
  <p>必要でない限り、リダイレクトと転送が使用されていないことを確認します。</p>
  <h1>理由</h1>
  <p>攻撃者は、リダイレクトと転送を操作することにより、正当なサイトを示しているように見えるが、実際には攻撃者が管理している悪意のあるページを示しているハイパーリンクを作成することがあります。 この技法は、偽の Web サイトを信用するように人を騙すために、フィッシャーによって頻繁に使用されています。</p>
  <h1>チェック方法</h1>
  <p>次の手順に従って、必要でない限り、リダイレクトと転送が使用されていないことを確認します。</p>
  <ol>
    <li>
      <p>
        <strong>アプリケーションの設計をレビューします。</strong> プロジェクト文書を確認して、リダイレクトまたはフォワード に関する記述を探します (.NET では、転送 とも呼ばれます)。 理想的には、アプリケーションの設計にリダイレクトと転送を組み込まないことをお勧めします。</p>
      <li>
        <p>
          <strong>コードを見直します。</strong> リダイレクトまたは転送のコードを探します。 リダイレクトと転送を実装する方法は多数存在するため、全ページを確認してパラメータを処理しているコードを探し、そのコードが入力に基づいてリダイレクトまたは転送を実行していないことを確認します。</p>
      </li>
    </li>
  </ol>
  <h1>修正方法</h1>
  <p>次のアクションを実行して、リダイレクトまたは転送を利用しないようにします。</p>
  <ol>
    <li>
      <p>
        <strong>リダイレクトおよび転送の箇所を列挙します。</strong> アプリケーション コードをレビューして、アプリケーションで使用されているリダイレクトおよび転送をすべて探します。</p>
      <li>
        <p>
          <strong>アプリケーションの設計をレビューします。</strong> アプリケーションの設計でのリダイレクトおよび転送の役割を判断します。 リダイレクトおよび転送が必要ないような設計に変更することを検討します。</p>
        <li>
          <p>
            <strong>リダイレクトおよび転送を削除します。</strong> アプリケーションの設計を変更したら、不必要になったリダイレクトおよび転送を削除します。</p>
          <li>
            <p>
              <strong>残っているリダイレクトまたは転送の安全性を確保します。</strong> 一部のリダイレクトまたは転送を削除するための適切な方法がない場合は、関連するガイドラインを利用して、残っているリダイレクトまたは転送の安全性を確保します。</p>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <h1>問題の例</h1>
  <p>次に、リダイレクトが安全ではないオンライン バンキング アプリケーションについて考えてみます。</p>
 <pre>http://www.onlinebank.com/redirect.asp?url=[destination]</pre>
  <p>フィッシング詐欺の実行者は、自分のサイトに向けた次のようなハイパーリンクを作成し、それをスパム メッセージを利用して、何百万という人々に送信します。</p>
 <pre>http://www.onlinebank.com/redirect.asp?url=www.phisher.com</pre>
  <p>ユーザーは、電子メールのメッセージの中に、自分の銀行 (onlinebank.com) を示していると思われるリンクを発見し、そのリンクをクリックします。そうすると、自分の銀行のサイトとまったく同じように見える Web サイトが表示されますが、実際は認証 Credential 情報を盗むために作成されたフィッシング Web サイトなのです。 ユーザーは、自分の口座番号と PIN をその Web ページに入力します。そうすると、エラー メッセージが表示され、再度入力するように指示されます。そして、銀行の本物のサイトにリダイレクトされます。 再度 Credential 情報を入力すると、ユーザーのアカウントが正常に表示されます。 ただし、フィッシング詐欺の実行者は、すでにこのユーザーのオンライン バンキング情報を手に入れているのです。</p>
  <h1>ソリューションの例</h1>
  <p>不正なリダイレクトまたは転送に関する問題の最良のソリューションは、リダイレクトおよび転送をまったく使用しないことです。 上に示した問題例の場合は、アプリケーションの設計に必要な変更を行ってから、redirect.asp ページを削除することが簡単なソリューションです。</p>
  <h1>その他のリソース</h1>
  <ul>
    <li>リダイレクトまたはフォワードの無効化に関する詳細は、次を参照してください。<a href="http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards">http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards</a></li>
  </ul>
  <h1>関連する項目</h1>
  <ul>
    <li>
      <a href="/article/32c35abe-a470-4a9c-8bb6-54c1461d3295">URL リダイレクト攻撃</a>
      <li>
        <a href="/article/d4612e8e-78c6-444e-a252-45ab97616a0b">URL リダイレクト バグのテスト方法</a>
        <li>
          <a href="/article/c8ae222b-ed2e-4621-a46b-3671f82f5a03">フィッシング攻撃<br /></a>
        </li>
      </li>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>