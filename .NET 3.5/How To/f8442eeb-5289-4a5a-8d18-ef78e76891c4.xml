<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="2080859940" Content_Hash="1109301454">
  <Metadata>
    <Id>f8442eeb-5289-4a5a-8d18-ef78e76891c4</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>鍵の総当たりバグのテスト方法</Title>
    <Category>暗号化</Category>
    <Phase>テスト</Phase>
    <Technology> 任意</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<p />
  <p>
    <b>
      <span>
      </span>
    </b>
  </p>
  <h1>
    <span>対象</span>
  </h1>
  <p />
  <ul>
    <li>暗号化を使用するアプリケーション</li>
  </ul>
  <p>
    <b>
      <span>
      </span>
    </b>&nbsp;</p>
  <h1>
    <span>要約</span>
  </h1>
  <p>鍵の総当たり攻撃 (Brute Force Attack) は、膨大な数の候補から有効な鍵を予測することで暗号化アルゴリズムを無効化することを目的としています。<span>&nbsp; </span>この攻撃中、攻撃者は鍵空間 (鍵のすべての候補) を網羅的に検索して大量の鍵を作成し、予測した鍵を使用して暗号文を復号化しようとします。 <span>&nbsp;</span>攻撃者は、短い鍵など、有効な鍵の予測が可能な弱い暗号化システムを発見した場合にしばしばこの攻撃ルートを利用します。 実際に、暗号化の安全な鍵の長さは、鍵の総当たり攻撃 (Brute Force Attack) を妥当な時間内に実行できるかどうかによって決まります。</p>
  <p>以下の手順を実行して鍵の総当たりバグをテストします。</p>
  <ul>
    <li>手順 1: 攻撃のシナリオを理解する<li>手順 2: 原因と対策を分析する<li>手順 3: テスト ケースを実行する</li></li></li>
  </ul>
  <p>&nbsp;</p>
  <h1>
    <span>手順 1: 攻撃のシナリオを理解する</span>
  </h1>
  <p>鍵の総当たり攻撃 (Brute Force Attack) のテストの最初の手順は、関連する以下の攻撃シナリオを理解することです。<span>&nbsp; </span></p>
  <ul>
    <li>暗号の無効化<li>認証の無効化</li></li>
  </ul>
  <p>&nbsp;</p>
  <h2>
    <em>シナリオ 1: 暗号の無効化</em>
  </h2>
  <p>簡略化のため、この項目では暗号化される前のデータを、<i>プレーンテキスト</i>、暗号化されたデータを<i>暗号文</i>と呼びます。</p>
  <p>このシナリオでは、攻撃者の目的は暗号化されたメッセージをリカバリするための暗号化鍵を取得することです。<span>&nbsp; </span>前提として、攻撃者はターゲットの鍵を使用して作成された暗号文を保持している必要があります。<span>&nbsp;</span><span></span>同時にこの暗号文の作成に使用されたプレーンテキストも保持している場合もあります (既知プレーンテキスト攻撃)。<span>&nbsp; </span>その後、攻撃者は鍵のすべての候補を試し始めます。<span> </span>作成したそれぞれの鍵を使い、攻撃者は暗号文を復号化して読み取り可能なプレーンテキストを作成しようとします (既知プレーンテキスト攻撃の場合は既知のプレーンテキストを作成します)。<span> </span>攻撃者が暗号鍵をリカバリすると攻撃は成功します。</p>
  <p>詳細: </p>
  <ol>
    <li>攻撃者は暗号文とその作成に使用された暗号化アルゴリズムを発見します。<li>攻撃者は鍵空間内の鍵値のすべての候補を順に処理し、鍵値を作成します。<li>攻撃者は前の手順で予測した鍵値を使用し、暗号文の復号化を試みます。<span> </span><li>攻撃者は、読み取り可能なプレーンテキストが作成できるまで手順 2 と3 を繰り返します (既知プレーンテキスト攻撃では、攻撃者は復号化された値を既知のプレーンテキストに照らし合わせます)。</li></li></li></li>
  </ol>
  <p>プレーンテキストが既知であるかどうかによってこのシナリオが変化することに注意してください。<span> </span>プレーンテキストが既知である場合、攻撃者には手順 4 で確認するプレーンテキストがわかっています。<span> </span>この場合、攻撃者の目的は、他の不明なプレーンテキストをリカバリするための有効な鍵の取得となります。<span> </span>プレーンテキストを保持していない攻撃者は、手順 4 を実行して読み取り可能なプレーンテキストを確認する必要があります (暗号文単独攻撃)。<span> </span></p>
  <p>
    <b>
      <i>&nbsp;</i>
    </b>
  </p>
  <h2>
    <em>シナリオ 2: 認証の無効化</em>
  </h2>
  <p>アプリケーションは、メッセージへの署名やクライアントのアプリケーションへのログインの許可など、認証の目的でも鍵を使用することがあります。<span>&nbsp;&nbsp; </span>このシナリオでは、攻撃者は鍵の総当たり攻撃 (Brute Force Attack) を実行して有効な認証の鍵を見つけます。<span>&nbsp; </span><span>&nbsp;</span></p>
  <p>詳細: </p>
  <ol>
    <li>攻撃者は、鍵値に基づいて認証を実行するアプリケーションの機能を発見します。<li>攻撃者は鍵空間内の鍵値のすべての候補を順に処理し、鍵値を作成します。<li>攻撃者は、前の手順で予測した鍵値を使用して認証を試みます。<span> </span></li></li></li>
  </ol>
  <p>Credential 情報の総当たり攻撃 (Brute Force Attack) の詳細については、<i>Team Mentorの記事、「Credential 情報の総当たりバグのテスト方法」を参照してください。</i></p>
  <p>&nbsp;</p>
  <h1>
    <span>手順 2: 原因と対策を分析する</span>
  </h1>
  <p>この手順では、鍵の総当たり攻撃 (Brute Force Attack) の原因とその防止策を分析する必要があります。</p>
  <h2>
    <em>鍵の長さ</em>
  </h2>
  <p>暗号化を実行するアプリケーションは、メッセージの暗号化と復号化を行うための鍵サイズを選択する必要があります。<span>&nbsp; </span>鍵の長さはビット単位で測定されます。<span> </span>たとえば、64 ビットの鍵の組み合わせには 2&lt;SUP&gt; 64 &lt;/SUP&gt; の候補があります。<span> </span>しかし暗号化では、有効な鍵をリカバリするための試行数は鍵空間の半分になります (2&lt;SUP&gt; 63&lt;/SUP&gt;)。<span> </span>鍵が長いほど、総当たり攻撃 (Brute Force Attack) には時間がかかるようになります。 <span>&nbsp;</span>DES などの対称ブロック暗号はこの攻撃のターゲットになります。<span> </span>DES は、1998 年に総当たり攻撃 (Brute Force Attack)で無効化された 56 ビットの鍵を使用します [i]。<span> </span>鍵の総当たり攻撃 (Brute Force Attack) の対策として、128 ビット以上の鍵サイズを使用することをお勧めします。<span> </span></p>
  <p>&nbsp;</p>
  <h2>
    <em>認証の総当たり攻撃 (Brute Force Attack)</em>
  </h2>
  <p>認証を無効化する鍵の総当たり攻撃 (Brute Force Attack) に対し、開発者は追加措置を講じることができます。<span> </span>たとえば、アカウント ロックアウト ポリシーを実装し、総当たり攻撃 (Brute Force Attack) を試みるアカウントをロックアウトすることができます。<span>&nbsp; </span>しかし、攻撃者はロックアウト ポリシーを利用して正当なクライアントに対する DoS 攻撃を実行することができます。<span> </span>認証の総当たり攻撃 (Brute Force Attack) 対策の詳細については、Team Mentor の記事、<i>「Credential 情報の総当たりバグのテスト方法」</i>と<i>「アカウント ロックアウト バグのテスト方法」を参照してください。<span>&nbsp; </span></i></p>
  <p>
    <span>&nbsp;</span>
  </p>
  <h1>
    <span>手順 3: テスト ケースを実行する</span>
  </h1>
  <p>鍵の総当たり攻撃 (Brute Force Attack) の論理的要素を確認した後は、以下のテスト ケースを実行してアプリケーションの脆弱性を確認する必要があります。</p>
  <h2>
    <em>既知プレーンテキスト攻撃を使用した鍵の総当たり攻撃 (Brute Force Attack) のテスト</em>
  </h2>
  <p>以下の手順を実行して、既知プレーンテキスト攻撃を使用した鍵の総当たり攻撃 (Brute Force Attack) をテストします。</p>
  <ol>
    <li>プレーンテキスト メッセージ <i>P</i> と、鍵 <i>K</i> を使用してそれを暗号化した暗号文 <i>C を発見します (C = Encrypt(P, K))。</i><i></i><li><i>K </i>の鍵空間で、鍵値のすべての候補を順に試していきます。<span>&nbsp;</span><ul><li>各予測値<i> K’</i> について、手順 1 の暗号文を使用して復号化アルゴリズムを実行し、対応するプレーンテキストを作成します<i> (P’ = Decrypt (C, K’))。</i><li>作成したプレーンテキスト <i>P’ </i> が、最初の既知のプレーンテキストと等しいかどうかを確認します (<i>P = P’?</i>)。<span>&nbsp;</span></li></li></ul></li></li>
  </ol>
  <p>予測結果: 妥当な時間内に有効な鍵をリカバリできる場合、アプリケーションには脆弱性があります。</p>
  <p>
    <b>
      <i>&nbsp;</i>
    </b>
  </p>
  <h2>
    <em>暗号文単独攻撃を使用した鍵の総当たり攻撃 (Brute Force Attack) のテスト</em>
  </h2>
  <p>以下の手順を実行し、暗号文単独攻撃を使用した鍵の総当たり攻撃 (Brute Force Attack) をテストします。</p>
  <ol>
    <li>鍵 <i>K</i> を使用して暗号化された暗号文メッセージ C を発見します<i> (C = Encrypt(P, K))。</i><i></i><span>&nbsp; </span>プレーンテキスト <i>P</i> が不明であることに注意してください。<li><i>K </i>の鍵空間で、鍵値のすべての候補を順に試していきます。<span>&nbsp; </span><ul><li>各予測値 <i>K’ </i>について、手順 1 の暗号文を使用して復号アルゴリズムを実行し、対応するプレーンテキストを作成します<i> (P’ = Decrypt(C, K’))。</i><li>作成したプレーンテキスト <i>P’</i> が読み取り可能かどうかを確認します。<span>&nbsp; </span></li></li></ul></li></li>
  </ol>
  <p>予測結果: 妥当な時間内に有効な鍵をリカバリできる場合、アプリケーションには脆弱性があります。</p>
  <p>
    <b>
      <i>&nbsp;</i>
    </b>
  </p>
  <h2>
    <em>認証をバイパスする鍵の総当たり攻撃 (Brute Force Attack) のテスト</em>
  </h2>
  <p>以下の手順を実行し、認証をバイパスする鍵の総当たり攻撃 (Brute Force Attack) をテストします。</p>
  <ol>
    <li>暗号化鍵 <i>K </i> を使用してユーザーを認証するアプリケーションの機能を発見します。<li>鍵空間 <i>K</i> で鍵値の候補をすべて順に試します。<span> </span><ul><li>各予測値 <i>K’</i> について、<i>K’</i> を使用して、手順 1 のアプリケーションの機能を実行します。<li><i>K’</i>を使用して認証が可能かどうかを確認します。<span>&nbsp;&nbsp; </span></li></li></ul></li></li>
  </ol>
  <p>予測結果: 妥当な時間内に認証に有効な鍵をリカバリできる場合、アプリケーションには脆弱性があります。</p>
  <p>
    <b>
      <i>&nbsp;</i>
    </b>
  </p>
  <h1>
    <span>結論</span>
  </h1>
  <p>鍵の総当たり攻撃 (Brute Force Attack) は、膨大な数の組み合わせを試行して有効な鍵を発見することを目的としています。<span>&nbsp; </span>有効な鍵を発見した攻撃者は、鍵を利用して暗号化データを復号化したり、認証スキームを無効化したりできます。<span> </span>この脆弱性は、128 ビット以上の十分なサイズの鍵を備えた業界標準のアルゴリズムを使用し、鍵空間を妥当な時間内に処理できないほど大きくすることで回避できます。<span>&nbsp; </span></p>
  <p>鍵の総当たり攻撃 (Brute Force Attack) のテストは様々なテスト ケースを実行して行います。<span> </span>暗号鍵の総当たり攻撃 (Brute Force Attack) のテストを行うには、暗号文を作成するプレーンテキストが既知であるかどうかに応じて、2 種類のテスト ケースを使い分ける必要があります。<span> </span>認証鍵の総当たり攻撃 (Brute Force Attack) のテストを行うには、認証を実行し、ログイン パケットなどの外部ユーザーからアクセス可能なアプリケーションの機能を見つけて総当たり攻撃 (Brute Force Attack) を実行する必要があります。<span>&nbsp; </span></p>
  <p>
    <br />&nbsp;</p>
  <div>
    <div>
      <p>[i] <b>総当たり攻撃 (Brute Force Attack)</b>:<span> </span>Wikipedia <a href="http://en.wikipedia.org/wiki/Brute_force_attack">http://en.wikipedia.org/wiki/Brute_force_attack</a></p>
      <p>&nbsp;</p>
    </div>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>