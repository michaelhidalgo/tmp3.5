<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1095385949" Content_Hash="5937098">
  <Metadata>
    <Id>76db70f0-8d65-48a2-9ac2-6edf0ee14a57</Id>
    <Library_Id>00000000-0000-0000-0000-000000000000</Library_Id>
    <Title>情報漏えいバグのテスト方法</Title>
    <Category>情報漏えい</Category>
    <Phase>テスト</Phase>
    <Technology>Web アプリケーション</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>Andres De Vivanco</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<P>
<P><SPAN></SPAN></P>
<H1><SPAN>適用対象は次のとおりです。</SPAN></H1>
<UL>
<LI><SPAN>Personally Identifiable Information を扱うデスクトップ アプリケーション、Web アプリケーション、オペレーティング システム、API ライブラリ、およびソフトウェア プログラム。</SPAN></LI></UL>
<P><SPAN>&nbsp;</SPAN></P>
<H1><SPAN>概要</SPAN></H1>
<P><SPAN>多くのソフトウェア アプリケーションは、ユーザーの Personally Identifiable Information、銀行口座、電子メール メッセージ、などの機微データを保存および処理します。<SPAN>&nbsp;&nbsp; </SPAN>認可とロール分類モデルに基づいて、ユーザーやクライアントのためにこの機微データがシステムに表示されます。<SPAN>&nbsp; </SPAN>情報漏えいバグは、十分の権限を持たない者が機微データを読み込むことを可能にします。</SPAN></P>
<P><SPAN>たとえば、Web アプリケーションにはこのユーザーのアカウントに所有される電子メールのみがユーザーのために表示されます。<SPAN>&nbsp;&nbsp; </SPAN>さらに、このアプリケーションでは、管理者はすべてのユーザーの電子メールを読み込む権限を持っているため、管理者のためにそれらの電子メールが表示されます。<SPAN>&nbsp;&nbsp; </SPAN>情報漏えいバグは、認可を持たないにも関わらず、攻撃者がユーザー メールボックスから読み込むことを可能にします。</SPAN></P>
<P><SPAN>以下の手順に従って、情報漏えいバグのテストを実行します。</SPAN></P>
<UL>
<LI><SPAN>手順 1: <SPAN> </SPAN>攻撃のシナリオを理解する</SPAN> 
<LI><SPAN>手順 2: <SPAN> </SPAN>原因と対応策を分析する</SPAN> 
<LI><SPAN>手順 3: <SPAN> </SPAN>テストと調査を開始する</SPAN> 
<LI><SPAN>手順 4: <SPAN> </SPAN>さらなるテストの実行</SPAN></LI></UL>
<P><SPAN>&nbsp;</SPAN></P>
<H1><SPAN>手順 1: <SPAN>&nbsp; </SPAN>攻撃のシナリオを理解する</SPAN></H1>
<P><SPAN>情報漏えいバグは、アプリケーションが機微データの保護に失敗するため、発生します。<SPAN>&nbsp;&nbsp; </SPAN>このバグに関連する攻撃の種類はさまざまあります。</SPAN></P>
<UL>
<LI><SPAN>セキュアでない接続をエクスプロイトすることによる情報漏えい。</SPAN> 
<LI><SPAN>弱いアクセス許可をエクスプロイトすることによる情報漏えい。</SPAN> 
<LI><SPAN>暗号化を解読することによる情報漏えい。</SPAN> 
<LI><SPAN>過度に説明的なエラー メッセージによる情報漏えい。</SPAN> 
<LI><SPAN>間接的な情報漏えいとデータ窃盗。</SPAN></LI></UL>
<P><SPAN>&nbsp;</SPAN></P>
<H2><SPAN><EM>セキュアでない接続をエクスプロイトすることによる情報漏えい</EM></SPAN></H2>
<P><SPAN>Web アプリケーションやクライアント サーバー システムなどのネットワーク アプリケーションは、回線上で機微情報を交わす必要があります。<SPAN>&nbsp;&nbsp;&nbsp; </SPAN>一部のシステムはセキュアな接続を実装し、セキュア ソケット レイヤー (SSL)、トランスポート層セキュリティ (TLS)、または IPSec のようなセキュアなチャンネルを通して機微データを交わします。<SPAN>&nbsp; </SPAN>ただし、すべてのシステムはこれらのセキュリティ対策を配備していません。<SPAN> </SPAN>結果として、物理ネットワークにアクセスできる攻撃者はクライアントとサーバー間のネットワーク トラフィックを傍受して、回線上から簡単に機微情報を取得できます。</SPAN></P>
<P><SPAN>&nbsp;</SPAN></P>
<H2><SPAN><EM>弱いアクセス許可をエクスプロイトすることによる情報漏えい</EM></SPAN></H2>
<P><SPAN>ソフトウェア アプリケーションは、機微情報を管理するために、特定の権限およびオブジェクト アクセス許可を持つユーザー アカウントを使用します。<SPAN>&nbsp; </SPAN>たとえば、オペレーティング システムはすべてのファイルにアクセスするユーザー アカウントの権限を確認し、データベース アプリケーションはロールとアクセス許可を使用して機微なテーブルへのアクセスを制限します。<SPAN> </SPAN>この種類のアプリケーションは、すべてのオブジェクトにアクセス許可を実装して、望まれないオブジェクトへのアクセスを制限します。<SPAN> </SPAN><SPAN>&nbsp;</SPAN>ただし、時として機微データに適用されるアクセス許可は十分に強力でなくて、攻撃者がそれにできる場合があります。</SPAN></P>
<P><SPAN>&nbsp;</SPAN></P>
<H2><SPAN><EM>暗号化を解読することによる情報漏えい</EM></SPAN></H2>
<P><SPAN>多くの場合、機微情報を保護するために、アプリケーションには暗号対策が含まれています。 暗号コードは、攻撃者が機微情報をプレーンテキストではなく、暗号文としてのみ取得できることを保証します。<SPAN>&nbsp; </SPAN>ただし、暗号化は適切に実装することが困難であり、既知の平文攻撃、選択平文攻撃、選択暗号文攻撃、総当たり攻撃 (Brute Force Attack)、およびメモリからの秘密の読み込みなどの、それに対する攻撃は多くあります。<SPAN>&nbsp; </SPAN>これらの攻撃の実行に成功した攻撃者は、元のプレーンテキストを復元することができます。</SPAN></P>
<P><SPAN>&nbsp;</SPAN></P>
<H2><SPAN><EM>過度に説明的なエラー メッセージによる情報漏えい</EM></SPAN></H2>
<P><SPAN>攻撃者がアプリケーションの設計に関する機微な情報を収集するもう 1 つの方法は、アプリケーションにエラー コードを提供するように強制することです。<SPAN>&nbsp;&nbsp;&nbsp; </SPAN>多くの場合、エラー メッセージにはデータベース構造や使用中のサーバー サイド テクノロジーに関するヒントなどの役立つ情報が含まれます。 この種類の情報漏えいは、SQL インジェクションなどのもう 1 つの攻撃の一部として一般的に実行されます。<SPAN>&nbsp; </SPAN>このシナリオ中では一般的に、アプリケーション開発者は内部でデバッグ目的にエラー メッセージを使用しますが、アプリケーションの出荷前にメッセージの削除を忘れます。</SPAN></P>
<P><SPAN>&nbsp;</SPAN></P>
<H2><SPAN><EM>間接的な情報漏えいとデータ窃盗</EM></SPAN></H2>
<P><SPAN>データ窃盗は、多くの攻撃の第一目的です。 たとえば、クロスサイト スクリプティング攻撃はセッション Cookie の窃盗を目標とし、ブラインド SQL インジェクション攻撃はデータベース管理者のパスワードの推測を目的とします。<SPAN>&nbsp;&nbsp; </SPAN>これらの攻撃は他の脆弱性 (この場合では XSS と SQL インジェクション) を使用して情報漏えいのペイロードを実行します。<SPAN>&nbsp; </SPAN>間接的な情報漏えいは、一般的な攻撃シナリオの種類であり、最新のソフトウェアにとって大きな脅威であります。</SPAN></P>
<P><SPAN>&nbsp;</SPAN></P>
<H1><SPAN>手順 2: <SPAN> </SPAN>原因と対応策を分析する</SPAN></H1>
<P><SPAN>情報漏えいバクのテストを実行する次の手順は、何がそれらを発生させるか、およびそれらに対する保護方法を理解することです。</SPAN></P>
<H2><SPAN><EM>情報漏えいの原因</EM></SPAN></H2>
<P><SPAN>それぞれの情報漏えいの種類に、異なる原因があります。<SPAN>&nbsp;&nbsp; </SPAN>セキュアでない接続の場合は、アプリケーションが機微データを送信するために SSL/TSL や IPSec などのセキュアなチャンネルを採用していないことが原因です。<SPAN>&nbsp;&nbsp;&nbsp; </SPAN>TCP/IP はデフォルトでデータをプレーンテキストで送信するため、機微データは傍受者によって簡単に読み込まれる可能性があります。<SPAN> </SPAN>機微な情報が常に暗号文として送受信されるようにし、この問題に対応するために SSL/TSL や IPSec が紹介されました。<SPAN> </SPAN>弱いアクセス許可による情報漏えいは、アプリケーションまたはオペレーティング システムが機微なオブジェクトのアクセス許可を適切に設定するのに失敗することによって発生します。<SPAN> </SPAN>たとえば、Web アプリケーションでは 2 つの異なるフォルダーでクライアント用のエリアと管理者用のエリアを設けている場合があります。<SPAN> </SPAN>Web アプリケーションが管理者エリアを管理者のみに制限することでそのアクセス許可を設定しないと、いかなる管理者でないユーザーがそれを参照することができることになり、管理コマンドを実行でき恐れがあります。</SPAN></P>
<P><SPAN>不適切な暗号化の配備による情報漏えいは、小さな鍵サイズの使用、または実装エラー (私有鍵の不適切な処理や不正確な例外処理など) などの、不良な設計決定が原因である場合があります。<SPAN>&nbsp; </SPAN>設計と実装の両方において、これらの原因によって暗号化は無意味になり、攻撃者が機微データを復号することを可能にします。</SPAN></P>
<P><SPAN>エラー メッセージにおける情報漏えいの場合では、原因は (構成で) オンのままになっているデバッグ オプション、または (コードで) どのような例外データが出力されているかを確認しないことに起因すると考えられます。<SPAN>&nbsp;&nbsp; </SPAN>結果として、機微なエラー情報がデバッグ/開発環境ではなく、ライブ環境外に到達してしまいます。<SPAN> </SPAN></SPAN></P>
<P><SPAN>間接的な情報漏えいは、実行される攻撃によって、さまざまな理由で発生します。<SPAN>&nbsp; </SPAN>たとえば、SQL インジェクションによる情報漏えいの場合、原因は外部データを含む SQL ステートメントを構築する際、パラメーター内の悪意のある入力に対する検証を行わなかった (特にさらなる SQL コマンドに対して) ことに起因すると考えられます。<SPAN>&nbsp; </SPAN>XSS による情報漏えいの場合は、HTML レスポンスのサニタイジングの失敗が原因です。<SPAN> </SPAN>開発者は、機微データが攻撃者に漏れる可能性のある、すべての異なる方法を理解する必要があります。</SPAN></P>
<P><SPAN>&nbsp;</SPAN></P>
<H2><SPAN><EM>情報漏えい対策</EM></SPAN></H2>
<P><SPAN>アプリケーションはセキュアな接続を実装し、セキュアでない接続による情報の漏えいを避ける必要があります。<SPAN>&nbsp; </SPAN>傍受者が機微情報の交換を見ることのないような、クライアントとサーバー間にセキュアなチャンネルを作成するためのさまざまな業界のプロトコルとソリューションがあります。<SPAN> </SPAN>セキュアな接続のために推奨される 2 つのプロトコルは、セキュア ソケット レイヤー/トランスポート層セキュリティまたは SSL/TLS と IPSec です。<SPAN> </SPAN>両方とも、データを回線上で送信する前に暗号化し、受信されたらそれを復号することで機能し、良好な保護を提供します。</SPAN></P>
<P><SPAN>弱いアクセス許可による情報漏えいは、機微なオブジェクトのアクセス モデルとアクセス許可をレビューすることで解決されます。<SPAN>&nbsp;&nbsp; </SPAN>目的は、機微なリソースが強力なアクセス許可を持つように、システムまたはデータベースを可能な限り強化することです。<SPAN> </SPAN>これで適切なアクセス許可を持たない攻撃者は、目標のリソースへのアクセスに失敗します。<SPAN>&nbsp; </SPAN>アクセス モデルをレビューして、それが良好に機能することを確認する必要があります。<SPAN> </SPAN></SPAN></P>
<P><SPAN>不適切な暗号化の使用による情報漏えいは、設計、実装、および配備時に暗号化のエラーを避けることによって解決する必要があります。<SPAN>&nbsp; </SPAN>アプリケーション開発者は、十分な長さの鍵、および AES などの公開でレビューされた暗号化アルゴリズムを使用する必要があります。<SPAN> </SPAN>さらに、開発者は暗号化アルゴリズムの規格に従い、暗号化データを危険にさらす設計、コーディング、または配備の間違いをしない必要があります。</SPAN></P>
<P><SPAN>エラー メッセージによる情報漏えいに対する保護に関しては、2 つの異なる種類の対策があります。<SPAN>&nbsp; </SPAN>最初の対策は、構成設定がデバッグやエラーの情報を漏らさないことを確認することです。<SPAN> </SPAN>使用中のプラットフォームによって異なる設定があります。<SPAN> </SPAN>たとえば、ASP .NET <I>web.config</I><SPAN>&nbsp; </SPAN>では、デバッグ情報をブラウザーで表示する必要があるかどうかを示すためのタグがあります。<SPAN> </SPAN>2 つ目の対策は、コーディングのレベルで実行する必要があります。<SPAN> </SPAN>ここでは、開発者は製品の出荷前に、機微な情報を漏らすすべての例外を削除する必要があります。<SPAN> </SPAN>業界のベスト プラクティスでは、リリース バージョンが構築されるときに、例外処理からのすべてのメッセージが削除されるように、さまざまなコンパイラ オプションを使用することが推奨されます。<SPAN>&nbsp; </SPAN>たとえば、Visual Studio は、C++ アプリケーションではデフォルトで 2 つのバージョン (「デバッグ」と「リリース」) を使用し、デバッグ情報をリリース バージョンから離れた状態にします。</SPAN></P>
<P><SPAN>間接的な情報漏えいに対する保護においては、XSS、SQL インジェクション、API フッキングなどのさまざまな攻撃のベクトルを検討する必要があります。<SPAN> </SPAN>それぞれの異なる種類の攻撃に対し、異なる種類の保護が必要です。<SPAN> </SPAN>たとえば、XSS に対して保護するには、開発者は HTTP レスポンスでの入力送信を検証およびサニタイジングする必要があります。<SPAN> </SPAN>SQL インジェクションに対して保護するために、開発者は外部からのあらゆるパラメーターをクオートとカッコに対してサニタイジングする必要あります。利用可能な場合、パラメーター化された型安全なクエリーやストアド プロシージャを使用するとさらに良いです。<SPAN> </SPAN>API フッキングに対する保護には、ドライバーのインストールや共有メモリの変更を避けるための、権限の調整が必要です。</SPAN></P>
<P><SPAN>&nbsp;</SPAN><B><SPAN>&nbsp;</SPAN></B></P>
<H1><SPAN>手順 3: <SPAN> </SPAN>テストと調査を開始する</SPAN></H1>
<P><SPAN>情報漏えいの攻撃シナリオに、攻撃が発生する理由、およびそれらに対する保護方法について学習した上で、アプリケーションが脆弱でないことを確認するために基本的なテスト ケースを実行する必要があります。</SPAN></P>
<H2><SPAN><EM>セキュアでない接続をエクスプロイトすることによる情報漏えいのテスト</EM></SPAN></H2>
<P><SPAN>以下の手順に従って、セキュアでない接続による情報漏えいのテストを実行します。</SPAN></P>
<OL>
<LI><SPAN>テスト対象の機微データを特定します。</SPAN> 
<LI><SPAN>Wireshark またはそれに類似するネットワーク スニファをダウンロードします。</SPAN> 
<LI><SPAN>ネットワーク トラフィックの監視を開始します (アプリケーション サーバーの IP を書き留めてください)。</SPAN> 
<LI><SPAN>機微データの転送を強制します。</SPAN> 
<LI><SPAN>ネットワーク トラフィックの監視を停止します。</SPAN> 
<LI><SPAN>トラフィックのフィルタリング (サーバー IP への通信のみを監視、および機微データの転送に使用されるプロトコルを選択するには、フィルタを使用する) によってキャプチャを解析します。</SPAN></LI></OL>
<P><SPAN>予想される結果:&nbsp;<SPAN> </SPAN>アプリケーションは機微データをプレーンテキストで送信しない必要があります。 それは SSL/TLS または IPSec を使用し、機微データを暗号文で送信する必要があります。<SPAN> </SPAN>図 1 では、プレーンテキストで機微データを転送するアプリケーションを検出するために Wireshark を使用する方法が示されています。</SPAN></P>
<P><SPAN><IMG src="C:\Users\jbasirico\AppData\Local\Temp\GE\clip_image001.png"></SPAN></P>
<P><B><SPAN>図 1 - Wireshark の使用による、セキュアでない通信による情報漏えいの検出</SPAN></B></P>
<P><SPAN>&nbsp;</SPAN></P>
<H2><SPAN><EM>弱いアクセス許可をエクスプロイトすることによる情報漏えいのテスト</EM></SPAN></H2>
<P><SPAN>以下の手順に従って、弱いアクセス許可による情報漏えいのテストを実行します。</SPAN></P>
<OL>
<LI><SPAN>オペレーティング システムのファイルまたはデータベースのテーブルなどの機微な情報を含む可能性のあるリソースを特定します。</SPAN> 
<LI><SPAN>ターゲット リソースへのパスを書き留めます。</SPAN> 
<LI><SPAN>情報の表示が許可されていないアカウント (管理権限のないアカウントなど) を使用してリソースへのアクセスを試行します。</SPAN></LI></OL>
<P><SPAN>予想される結果:&nbsp;<SPAN> </SPAN>アプリケーションは権限の低いアカウントの使用によるターゲット リソースへのアクセスを許可しない必要があります。</SPAN></P>
<P><B><I><SPAN>&nbsp;</SPAN></I></B></P>
<H2><SPAN><EM>暗号化を解読することによる情報漏えいのテスト</EM></SPAN></H2>
<P><SPAN>以下の手順に従い、暗号解読で情報漏えいのテストを実行します。</SPAN></P>
<OL>
<LI><SPAN>保護する必要のある機微データを特定します。</SPAN> 
<LI><SPAN>データが暗号化されるときを特定します。</SPAN> 
<LI><SPAN>アプリケーションのデータ暗号化の責任を持つ部分を特定します。</SPAN> 
<LI><SPAN>暗号解析攻撃を使用して、鍵の復元、または機微な情報のプレーンテキストの暴露を試行します。</SPAN></LI></OL>
<P><SPAN>予期される結果: アプリケーションは既知の暗号攻撃に対抗します。</SPAN></P>
<P><B><I><SPAN>&nbsp;</SPAN></I></B></P>
<H2><SPAN><EM>エラー メッセージでの情報漏えいのテスト</EM></SPAN></H2>
<P><SPAN>以下の手順に従って、エラー メッセージでの情報漏えいのテストを実行します。</SPAN></P>
<OL>
<LI><SPAN>エラー メッセージによって漏れる可能性のある機微な情報を特定します。<SPAN>&nbsp; </SPAN>この情報は、データベース名やコードのモジュールとして含まれている可能性があります。</SPAN> 
<LI><SPAN>アプリケーションでエラー状態をトリガーする可能性の高い、間違ったタイプ、ファズ文字列、オーバーフロー値などの予期されない値をアプリケーションに提出します。 </SPAN>
<LI><SPAN>エラーがトリガーされるまで待機し、あらゆる可能性のあるエラー メッセージから記述的情報の発見を試行します。</SPAN></LI></OL>
<P><SPAN>予期される結果: アプリケーションは記述的情報をエラー メッセージで漏らさない必要があります。</SPAN></P>
<P><SPAN>&nbsp;</SPAN></P>
<H2><SPAN><EM>間接的な情報漏えいのテスト</EM></SPAN></H2>
<P><SPAN>間接的な情報漏えいのテストは、それを達成するのに使用された脆弱性に対してテストすることで実行します。<SPAN>&nbsp; </SPAN>これらの脆弱性は XSS、SQL インジェクション、XPath インジェクション、XML インジェクション、強制参照、API ハイジャッキング、ARP ポイズニング、および中間者攻撃を含みますが、これらに限定されません。 これらのトピックに関する詳細については、関連記事を参照してください。</SPAN></P>
<P><SPAN>&nbsp;</SPAN></P>
<H1><SPAN>手順 4: <SPAN> </SPAN>さらなるテストの実行</SPAN></H1>
<P><SPAN>情報漏えいバグをテストする最終手順は、テスト ケースを拡張して、配備環境では強力なアクセス許可が使用されることを確認することです。<SPAN>&nbsp; </SPAN>それぞれのシステム オブジェクトにアクセスするために必要なアクセス許可 (オブジェクトのアクセス制御リスト、または <I>ACL</I> 呼ばれる) の確認を可能にするフリーウェアのシステム ユーティリティがあります。<I><SPAN> </SPAN></I><SPAN>&nbsp;</SPAN>たとえば、Sysinternal の Process Explorer ツールを使用して、ファイル、パイプ、およびメモリ セクションなどのシステム オブジェクトの ACL を確認できます (図 2 を参照)。<SPAN> </SPAN>Unix 系では、同等の結果を生成するシステム コマンドがあります。</SPAN></P>
<P><U><SPAN><IMG src="C:\Users\jbasirico\AppData\Local\Temp\GE\clip_image002.png"></SPAN></U><U><SPAN></SPAN></U></P>
<P><B><SPAN>図 2 - Process Explorer の使用によるローカル オブジェクトのアクセス許可の確認</SPAN></B><B><SPAN></SPAN></B></P>
<P><SPAN>&nbsp;</SPAN></P>
<P><SPAN>情報漏えいの脆弱性に対してチェックするように自動テストを拡張すると良いです。<SPAN>&nbsp; </SPAN>異なるオブジェクトにアクセスするために必要なアクセス許可、およびシステムのユーザーとロールをモデリングします。<SPAN> </SPAN>次に、異なるユーザー アカウントと異なるロールでそれぞれのオブジェクトにアクセスし、モデルに対するアクセスを確認してください。<SPAN> </SPAN>この種類の自動モデル ベースのテストは、アクセスとアクセス許可システムのテスト、および情報漏えいの脆弱性の検出に効果的です。</SPAN></P>
<P><SPAN>最後に、アプリケーションのストレス テストを実行して、情報を暴露する可能性のあるエラー メッセージを生成します。<SPAN>&nbsp; </SPAN>すべてのメモリを消費したり、ネットワークをダウンにしたりすることに骨を折ることなく、低メモリ状態やネットワーク障害などの異常状態をシミュレーションするために、Holodeck などの Fault Injection ツールを使用できます。</SPAN></P>
<P><B><SPAN>&nbsp;</SPAN></B></P>
<H1><SPAN>結論</SPAN></H1>
<P><SPAN>情報漏えいバグは簡単に検出できますが、防止するのが困難です。<SPAN>&nbsp; </SPAN>ただし、ほとんどの場合、アプリケーションはセキュアな通信チャンネル、強力なアクセス許可、および適切に暗号化を使用することによって保護できます。<SPAN>&nbsp; </SPAN>情報漏えいバグを検出するには、システムがデータを送信する方法、およびシステムが内部オブジェクトのアクセス許可を処理する方法の両方を監視する必要があります。<SPAN> </SPAN>また、データが適切に暗号化されていることを確認するため、およびアプリケーションがエラー メッセージで攻撃者に役立つ可能性のある記述的情報を漏らさないことをテストするために、暗号化システムのアプリケーションの実装をテストすることも必要です。<SPAN>&nbsp; </SPAN>間接的な情報漏えいのテストは、XSS や SQL インジェクションなどのそのさまざまな攻撃ベクトルのテストを実行することによって行う必要があります。<SPAN>&nbsp; </SPAN></SPAN><B><SPAN></SPAN></B></P>
<P><SPAN>&nbsp;</SPAN></P>
<P><SPAN>&nbsp;</SPAN></P>
<P><SPAN>&nbsp;</SPAN></P>]]></Data>
  </Content>
</TeamMentor_Article>