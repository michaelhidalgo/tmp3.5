<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-61917851" Content_Hash="-1570079610">
  <Metadata>
    <Id>65b8d766-709b-449a-aa97-010856045efc</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>ASP.NET アプリケーションにサービス アカウントを作成する方法</Title>
    <Category>認証</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>ASP.NET 3.5</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用対象</h1>
  <ul>
    <li>Internet Information Services (IIS) バージョン6.0 以降<li>Microsoft Windows Server 2003 以降の&nbsp;オペレーティング システム</li></li>
  </ul>
  <h1>概要</h1>
  <p>このガイドでは、ASP.NET ウェブ アプリケーションの実行のために、最小特権をもったカスタムのサービス アカウントを作成して構成する方法を説明します。 デフォルトでは、Microsoft Windows Server 2003以降上のASP.NET アプリケーションおよび IIS は、組み込みの Network Service アカウントを使用して実行されます。 実動環境では、通常はカスタム サービス アカウントを使用してアプリケーションを実行します。  カスタム サービス アカウントを使用することにより、アプリケーションを他から独立して監査し認可できます、また、アプリケーションは、Network Service アカウントに関連づけられた特権またはアクセス許可に対して行われたすべての変更から保護されます。 カスタム サービス アカウントを使用するには、Aspnet_regiis.exe ユーティリティを <b>-ga</b> スイッチ付きで実行することによりアカウントを構成し、次にカスタム アカウントの ID を使用するカスタム アプリケーション プールで実行するようにアプリケーションを構成する必要があります。</p>
  <h1>目次</h1>
  <ul>
    <li>
      <div>目的</div>
      <li>
        <div>概要</div>
        <li>
          <div>ガイドライン</div>
          <li>
            <div>手順の概要</div>
            <li>
              <div>手順 1:  新規ユーザー アカウントの作成</div>
              <li>
                <div>手順 2:  新規アカウントに対する ASP.NET アクセス許可の割り当て</div>
                <li>
                  <div>手順 3:  テスト ASP.NET アプリケーションの作成</div>
                  <li>
                    <div>手順 4:  カスタム ID をもったアプリケーション プールの作成</div>
                    <li>
                      <div>手順 5。 新規アプリケーション プールで実行するためのアプリケーションの構成</div>
                      <li>
                        <div>手順 6。 カスタム サービス アカウントのテスト</div>
                        <li>
                          <div>カスタム アカウントとネットワーク サービスの比較</div>
                          <li>
                            <div>追加考慮事項</div>
                            <li>
                              <div>その他のリソース</div>
                            </li>
                          </li>
                        </li>
                      </li>
                    </li>
                  </li>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <h1>目的</h1>
  <ul>
    <li>最小限の特権を持つカスタム アカウントを作成してください。 <li>カスタム アカウントに必要な特権とアクセス許可を割り当ててください。 <li>アプリケーションを構成してカスタム サービス アカウントを使用して実行するようにしてください。 <li>アプリケーションが実行時に使用する ID を確認してください。 </li></li></li></li>
  </ul>
  <h1>概要</h1>
  <p>デフォルトでは、Windows Server 2003 以降および IIS 上の ASP.NET アプリケーションは、ASP.NET アプリケーション プールで実行されます。 このアプリケーション プールは組み込みの Network Service アカウントを使用します。 このアカウントには最小限の特権しか付帯しませんが、ネットワーク Credential 情報はもっています。すなわち、これを使用して、ネットワーク サーバに対して認証を行えるということです。</p>
  <p>以下のようなケースでは、ネットワーク サービス アカウントやカスタムのドメイン レベルのサービス アカウントの使用が妨げられる可能性があります。 </p>
  <ul>
    <li>ウェブ サーバがドメイン内にありません。 <li>ウェブ サーバとダウンストリーム リモート サーバは、信頼関係のない別々のドメイン内にあります。 <li>ウェブ サーバとダウンストリーム リモート サーバは、ファイアウォールで隔てられていて、NTLM や Kerberos 認証に必要なポートを開くことができません。 </li></li></li>
  </ul>
  <p>上記のケースに該当する場合、ミラーリングされたローカル アカウントを使用することができます。 このアプローチでは、両方のサーバ上で同じユーザー名とパスワードを使用する 2 つのローカル アカウントを使用します。  別の方法として、SQL 認証を使用することができます。ただし、Windows 認証から提供されるセキュリティより強度が劣るので、推奨されません。</p>
  <p>カスタム サービス アカウントと専用のアプリケーション プールを使用することには、次の利点があります。</p>
  <ul>
    <li>アプリケーションどうしを互いに分離することができます。 <li>ローカルおよびリモートのリソース上のアプリケーションごとに、別々のアクセス制御を確立することができます。 例えば、アクセスがアプリケーションのアカウントに制限されている場合、他のアプリケーションは、このアプリケーションのデータベースにアクセスすることはできません。 <li>Windows 監査を使用して、アプリケーションのアクティビティを、他のアプリケーションとは別に追跡することができます。 <li>汎用ネットワーク サービス アカウントに関連したアクセス制御またはアクセス許可に対して、意図的であってもなくても変更が加えられた場合に、アプリケーションにその影響を与えないようにすることができます。 </li></li></li></li>
  </ul>
  <h1>ガイドライン</h1>
  <p>アプリケーションを実行するためカスタム サービス アカウントを作成するとき:</p>
  <ul>
    <li>最小特権の原則を忠実に守り、アカウントに必要とされる特権とアクセス許可の最小限のセットを付与してください。 <li>SYSTEM アカウントを使用して ASP.NET を実行しないでください。 <li>アプリケーションのアカウントに、<b>オペレーティング システムの一部として機能する</b><b></b> ユーザー権利を付与しないでください。 </li></li></li>
  </ul>
  <blockquote>
    <b>注意</b>: &nbsp;&nbsp;ASP.NET のアプリケーションは、デフォルトでは偽装しません。<b></b> したがって、リソースへのアクセス制御は、エンド ユーザー アカウントまたはユーザー グループ用にではなく、アプリケーションの ID 用に構成される必要があります。</blockquote>
  <h1>手順の概要</h1>
  <p>これらのステップに従って、カスタム サービス アカウントの ID を使用する専用のアプリケーションを作成しテストしてください。</p>
  <ul>
    <li>手順 1:  新しいユーザー アカウントを作成します。 <li>手順 2:  ASP.NET アクセス許可を新規アカウントに割り当ててください。 <li>手順 3:  最小特権を新規アカウントに割り当ててください。 <li>手順 4:  テスト用の ASP.NET アプリケーションを作成してください。 <li>手順 5。 カスタム ID を持つアプリケーション プールを作成してください。 <li>手順 6。 アプリケーションを新規アプリケーション プールで実行するよう構成してください。 <li>ステップ 7 カスタム サービス アカウントをテストしてください。 </li></li></li></li></li></li></li>
  </ul>
  <h1>手順 1:  新規ユーザー アカウントの作成</h1>
  <p>新規 Windows アカウントの作成から始めます。</p>
  <p>
    <b>新規アカウントの作成 </b>
  </p>
  <ol>
    <li>新規のローカルまたはドメインのユーザー アカウントを作成します。 コントロール パネルでコンピュータ管理ツールを使用してローカル アカウントを作成してください。 コントロール パネルでActive Directory ユーザーおよびコンピュータ ツールを使用してドメイン アカウントを作成してください。 <li>アカウントに適切な名前、例えば、CustomASP を与えてください<b> </b> <b>ユーザーは次回ログオン時にパスワードを変更する必要があります</b> をクリアして、<b>パスワードは失効しません</b> を選択してください。<blockquote><b>注意</b>: &nbsp;&nbsp;アカウントには必ず強力なパスワードを使用してください。 強力なパスワードは、最低 7 つの文字を含み、大文字、小文字、数字および * 、 ? 、や $ のような他の文字の組み合わせです。</blockquote></li></li>
  </ol>
  <h1>手順 2:  新規アカウントに対する ASP.NET アクセス許可の割り当て</h1>
  <p>カスタム サービス アカウントを使用するには、IIS メタベースと、ASP.NET で使用されるファイル システム フォルダにアクセスするのに適したアクセス許可がそのアカウントになければなりません。 ASP.NET は、Aspnet_regiis.exe ユーティリティを提供します、これで適切なアクセス許可が付与されます。</p>
  <p>
    <b>新規アカウントに対する ASP.NET アクセス許可の割り当て</b>
  </p>
  <ol>
    <li>次のコマンドをコマンド ウィンドウから実行します。 <p><b>aspnet_regiis -ga <i>MachineName</i>\<i>AccountName</i></b></p></li>
  </ol>
  <blockquote>ドメイン アカウントを使用している場合、<i>MachineName </i> はサーバーまたはドメインの名前です。また、<i>AccountName</i> はカスタム アカウントの名前です。</blockquote>
  <ol>
    <li>カスタム アカウントに必要なアクセス許可を確認します。 <b>-ga</b> スイッチ付きで Aspnet_regiis.exe を実行する時、コマンドは次の権利をアカウントに付与します:<ul><li>IIS メタベースへのアクセス<li>%Windir%\Microsoft.NET\Framework\<i>version</i>\Temporary ASP.NET Files フォルダへの書き込み権限</li></li></ul><p>アカウントは、ローカルの <b>Users</b> グループのメンバーでもあります。 したがって、\Inetpub ディレクトリ ツリーへのアクセスを読み取りました(これらのディレクトリは、<b>Users</b> グループへの読み取りアクセスを付与する ACL を有します)。 </p><blockquote><b>注意</b>: &nbsp;&nbsp;<b>-ga</b> スイッチは多くのグローバルな変更を行います。 特定のフォルダへのアクセスを制限する場合、そのフォルダ上の ACL を手動で調整する必要があります。</blockquote></li>
  </ol>
  <h1>手順 3:  テスト ASP.NET アプリケーションの作成</h1>
  <p>このステップでは、アプリケーションの実行で使用する Windows ID を表示する単独のページを備えたテスト ASP.NET アプリケーションを作成します。</p>
  <p>
    <b>テスト アプリケーションの作成 </b>
  </p>
  <ol>
    <li><b>TestCustomPool</b> という名の新規Web アプリケーションを Visual Studio .NET で作成してください。<li> Default.aspx ページ読み込みイベント ハンドラーに次のコードを追加してください。 <div><pre>using System.Security.Principal;<br />...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />WindowsIdentity id = WindowsIdentity.GetCurrent();<br />Response.Write("&lt;b&gt;Windows Identity Check&lt;/b&gt;&lt;br&gt;");<br />Response.Write("Name: " + id.Name + "&lt;br&gt;");  </pre></div><li>テスト アプリケーションをコンパイルして実行します。  アウトプットに注意してください、デフォルトの Network Service アカウントのもとでアプリケーションが現在実行中であることを示しています。 <p>ブラウザには、次のような一文が表示されるはずです。</p><div><div></div><div><pre>&nbsp;Windows Identity Check<br />Name: NT AUTHORITY\NETWORK SERVICE<br />&nbsp; </pre></div></div></li></li></li>
  </ol>
  <h1>手順 4:  カスタム ID をもったアプリケーション プールの作成</h1>
  <p>このステップでは、ASP.NET アプリケーションを実行する新規アプリケーション プールを作成し、前に作成したカスタム サービスを使用するために構成します。</p>
  <p>
    <b>カスタム サービス アカウントを使用して実行するアプリケーション プールの作成</b>
  </p>
  <ol>
    <li>Internet Information Services (IIS) マネージャーを起動してください。 <li>左ペインで、ローカル コンピュータを展開して、次に <b>Application Pools</b> を展開してください。<li> <b>Application Pools</b> ノードを右クリックして、<b> </b>次に <b>Application Pool</b> をクリックしてください。<li><b>Add New Application Pool</b> ダイアログ ボックスで、<b>Application Pool ID</b> テキスト ボックスに <b>TestPool</b> と入力してください。 <b>Use default settings for new application pool(新規アプリケーション プール用にデフォルト設定を使用)</b> のオプションを選択したままにしておき、<b>OK</b> をクリックしてください。これで、<b>TestPool</b> という名の新規アプリケーション プールが作成されます。<li>新規アプリケーション プールを右クリックします。 次に <b>Properties(プロパティ)</b> をクリックしてください。<li><b>Identity( ID )</b> タブをクリックしてください。 <li><b>Application pool identity(アプリケーション プール ID )</b> セクションで、<b>Configurable(構成可能)</b> をクリックしてください。<li><b>User name</b> テキスト ボックスに <b>CustomASP</b> と入力してください。 <li> <b>Password</b> テキスト ボックスに <b>CustomASP</b> アカウントのパスワードを入力し、 <b>Apply(適用)</b> をクリックしてください。<li><b>Confirm Password(パスワードの確認)</b> ダイアログ ボックスが表示されます。 パスワードを再度入力し、<b>OK</b> をクリックし、次に再度 <b>OK</b> をクリックしてください。 </li></li></li></li></li></li></li></li></li></li>
  </ol>
  <h1>手順 5。 新規アプリケーション プールで実行するためのアプリケーションの構成</h1>
  <p>このステップでは、新規アプリケーション プールで実行するために、テスト ASP.NET アプリケーションを構成します。 これによって、実行では必ずカスタム サービス アカウント ID が使用されるようになります。  </p>
  <ol>
    <li>Internet Information Services (IIS) マネージャーへ戻ります。 <li>IIS マネージャーのコンソールの左ペインでテスト用アプリケーション<b>TestCustomPool</b>を見つけてください。 <li><b>TestCustomPool</b> を右クリックして、<b>Properties</b> をクリックしてください。<li><b>Application Settings(アプリケーション設定)</b> セクションの <b>Properties(プロパティ)</b> ダイアログ ボックス中の <b>Directory(ディレクトリ)</b> タブ上で、<b>Application pool(アプリケーション プール)</b> リストから<b>TestPool</b> を選択し、次に <b>OK</b> をクリックしてください。</li></li></li></li>
  </ol>
  <h1>手順 6。 カスタム サービス アカウントのテスト</h1>
  <p>テスト用アプリケーションの Default.aspx ページまでブラウズしてください。 そこには、カスタム サービス アカウントの名前が表示されているはずです。それによって、この ID を使用してアプリケーションが実行されていることが確認されます。 ブラウザには次が表示されます。</p>
  <div>
 <pre>Windows Identity Check<br />Name: &lt;ServerName&gt;\CustomASP   </pre>
  </div>
  <p>&lt;<i>ServerName</i>&gt は、 サーバ名です。</p>
  <h1>カスタム アカウントとネットワーク サービスの比較</h1>
  <p>アプリケーションがリソースにアクセスするのに特定の ID が必要な場合の選択肢は、大きく分けて 2 通りあります。 カスタム アプリケーション プールの ID を使用するか、またはデフォルトの Network Service ID を使用して実行し、次に <b>LogonUser</b> API を呼び出して Windows ID を作成してください。代替 ID を必要とする特定のメソッドでこのID を偽装することができます。 どちらのアプローチにも、長所と短所があります。</p>
  <h2>カスタム アカウントを使用する場合</h2>
  <p>このアプローチでは、特定の Windows ID を使用して実行するように構成されたアプリケーション プールで、アプリケーションを実行します。</p>
  <h3>長所</h3>
  <p>カスタム アカウントの使用には、次のような長所があります。</p>
  <ul>
    <li>アカウントの Credential 情報は IIS メタベースに保存され、管理者グループのSYSTEM アカウントおよびメンバーによってのみ読み取ることができます。 <li>正しく管理するのが困難な Thread セキュリティ コンテキストを、アプリケーションで管理する必要はありません。 間違いがあった場合、非同期 Thread スイッチに起因して、ハンドルの漏洩や偽装トークンの喪失につながります。 </li></li>
  </ul>
  <h3>短所</h3>
  <p>カスタム アカウントの使用には、次のような短所があります。</p>
  <ul>
    <li>アプリケーション プールの ID を変更してマシン アカウントではなくドメイン アカウントを使用する時は、ドメイン管理者が Setspnユーティリティを実行してドメインアカウントにサービス プリンシパル名 (SPN) を作成するまでは、Kerberos 認証を行えません。  別々のドメイン ID を使用する複数のアプリケーションが同一サーバ上にある場合に、Kerberos 認証を使用する必要が生じると、各アプリケーションに別の Domain Name System (DNS) 名を使用しなければならなくなります。 <li>IIS_WPG グループにカスタム アカウントを追加すること以外に、カスタム アカウントに追加のファイル システム ACL を構成する必要がおそらくあるでしょう。 <li>ファーム内の各ウェブ サーバ上で、アカウントの有効期間と Credential 情報を管理する必要があります。 <li>Web アプリケーションがカスタム ID を使用して実行する必要のあるオペレーションが拡張された特権を必要とする場合、これらの特権を使用してWeb アプリケーション全体を実行する必要があり、これは大量のコードを実行しなければならないことを意味します。 </li></li></li></li>
  </ul>
  <h2>ネットワーク サービスを使用する場合</h2>
  <p>このアプローチでは、最小限の特権の Network Service アカウントを使用してアプリケーションを実行します。 しかしながら、アプリケーションが特定の ID を使用してリソースにアクセスする,またはオペレーションを実施する必要がある時、<b>LogonUser</b> API を呼び出して新規 Windows ID を作成します。 その後、ID を要求するメソッドにおいてのみ、その ID を偽装します。</p>
  <h3>長所</h3>
  <p>Network Service アカウントを使用することには、次の利点があります:</p>
  <ul>
    <li>特権の昇格を、アプリケーションで必要な部分のみに分けて限定することができます。   アプリケーションが攻撃を受けた場合、特権を昇格していれば、攻撃者にとってやっかいなエクスプロイトの作業が増えます。 <li>ファイル システム ACL を構成しなおす必要はありません。 <li>アカウントの Credential 情報ストレージを一極配置することができます。 例えば、マシン ID に対する制限されたアクセスを持つデータベースまたはそれに類似するものにおいて、または、共有 RSA 鍵を使用して保護されたWeb.config ファイルにおいて、といったの場合。 Web ファームがドメインに所属し(理想的には、これは周辺ネットワークに制限されたドメインであることが推奨される)、また <b>LogonUser </b> API を呼び出す時にドメイン アカウントが使用される場合、これはより簡単な Web ファーム ロールアウトを提供します。 </li></li></li>
  </ul>
  <h3>短所</h3>
  <p>Network Service アカウントを使用することには、次の欠点があります:</p>
  <ul>
    <li>このアプローチの場合、Thread セキュリティ コンテキストの管理の複雑さが増大します。 アプリケーションが非同期の連係動作を使用する場合や、さまざまな場所から頻繁に呼び出される場合は、特に困難です。 <li>Credential 情報をアプリケーションで保管して読み取る必要があります。 そのため、アプリケーションが攻撃を受けると、最終的にそのCredential 情報を取り出されてしまう可能性があります。 <li><b>LogonUser</b> API への呼び出しがプロセス ID に <b>Act as part of the operating system(オペレーティング システムの一部として機能する)</b> という 強力なユーザー権利を付与することを求めるため、Windows 2000 では <b>LogonUser</b> API を避けることをお勧めします。 このユーザー権利は、 Windows Server 2003 以降で <b>LogonUser</b> を呼び出すために必要ではありません。 </li></li></li>
  </ul>
  <h1>追加考慮事項</h1>
  <p>ASP.NET アプリケーションを実行するサービス アカウントを作成する時に考慮すべき他の問題には次のものが含まれます:</p>
  <ul>
    <li>
      <b>ドメイン アカウント用にサービス プリンシパル名 (SPN) を作成すること</b>
      <li>
        <b>IIS 5.0 を分離モードで使用</b>
      </li>
    </li>
  </ul>
  <h2>ドメイン アカウント用のサービス プリンシパル名 (SPN) の作成</h2>
  <p>Network Service のようなマシン アカウントの使用をドメイン アカウントに切り替える時、また、アプリケーションがKerberos 認証を使用してクライアントを認証する場合、Microsoft® Active Directory® ディレクトリ サービスに登録されたドメイン アカウント用のサービス プリンシパル名を持たない限り、Kerberos 認証は作動を停止します。</p>
  <p>
    <b>ドメイン アカウント用の SPN の作成</b>
  </p>
  <ol>
    <li>Windows サーバ CD から、Windows サーバ ツールをインストールします。 <li>コマンド プロンプトから、次のような Setspn ツールを実行します。<p><b>setspn -A HTTP/webservername domain\customAccountName</b></p><p><b>setspn -A HTTP/webservername.fullyqualifieddomainname domain\customAccountName</b></p></li></li>
  </ol>
  <p>ツールは、カスタム ドメイン アカウント (domain\customAccountName) 用の SPN を作成し、アカウントを特定の Web サーバ上の HTTP サービスに関連づけます。 上記に示したとおり、コマンドを 2 回実行すれば、NetBIOS サーバ名およびサーバの完全修飾ドメイン ネームにそのアカウントを関連付けることができます。 それにより、完全修飾ドメイン ネームの使用法に一貫性のない環境でも、SPN は必ず正しく確立されるようになります。</p>
  <blockquote>
    <b>注意</b>: &nbsp;&nbsp;複数の ID を持たせたい場合、同一のホスト名を使用して複数の Web アプリケーションを持つことはできません。 これは、Kerberos での制限事項ではなく、HTTP での制限事項です。 その対処法として、同じホストに対して複数の DNS 名を用意し、それぞれ異なる DNS 名の付いた各ウェブ アプリケーションごとに URL を開始します。 例えば、 http://site/app1 や http://site/app2 ではなく、http://app1 や http://app2 を使用します。</blockquote>
  <h2>IIS 5.0 を分離モードで使用</h2>
  <p>IIS サーバを IIS 5.0 分離モードで実行するよう構成する場合、ASP.NET アプリケーションは Machine.config ファイルの &lt;<b>processModel</b>&gt; エレメントで定義されるアカウント Credential 情報を 使用して実行されます。<b></b> この構成では、ASP.NET アプリケーションは、Aspnet_wp.exe という名の共有ワーカー プロセスで実行され、IIS アプリケーション プールは使用しません。 &lt;<b>processModel</b>&gt; エレメントのアカウント Credential 情報を変更する場合、サーバ上のすべてのASP.NET アプリケーションは特定のアカウントのもとで実行されます。<b></b></p>
  <p>&lt;<b>processModel</b>&gt; エレメントを使用してアカウントの Credential 情報を変更する方法の詳細は、「ハウツー：ASP.NET を実行するカスタム アカウントの作成方法」 を参照してください。</p>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>