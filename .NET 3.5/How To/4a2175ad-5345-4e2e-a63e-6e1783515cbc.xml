<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="641133342" Content_Hash="1453415208">
  <Metadata>
    <Id>4a2175ad-5345-4e2e-a63e-6e1783515cbc</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>ASP.NET アプリケーションをセキュリティにインストルメント化する方法</Title>
    <Category>展開の考慮事項</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>概要</h1>
  <p>このガイドは、セキュリティ関連のイベントや操作を追跡するためにヘルス モニタリングイベントを使用して ASP.NET アプリケーションを装備する方法について説明します。 ASP.NET には、すべての ASP.NET アプリケーションに共通する多くの標準的なセキュリティ関連イベントおよびインフラ イベント用の装備を含む、ヘルス モニタリング機能が装備されています。 標準的なイベントではカバーされない、付加的なセキュリティ関連アクティビティを追跡する必要がある場合、あるいはアプリケーション固有のイベントを報告する必要がある場合は、カスタム イベントを作成し、発生させる必要があります。 このガイドには、パスワード変更イベント、ユーザー アカウントのロックアウト、および機密性の高いビジネス ロジックへのアクセスを追跡するために使用できる、カスタム イ ベントを作成する方法を示す 3 つのサンプルが含まれています。</p>
  <h1>目次</h1>
  <ul>
    <li>目的<li>概要<li>プラットフォームのデフォルト セキュリティ イベント<li>その他のカスタム セキュリティ イベント<li>サンプル: パスワード変更イベント<li>サンプル：メンバーシップ アカウントがロックされたイベント<li>サンプル：アクセスに反応するメソッドイベント</li></li></li></li></li></li></li>
  </ul>
  <h1>目的</h1>
  <ul>
    <li>自動的に発生するセキュリティ関連イベントを識別する。 <li>追跡する必要があると考えられるその他のセキュリティ関連イベントを学習する。 <li>特定のセキュリティ関連アクティビティを追跡するカスタム イベントを発生させる。 <li>パスワードの変更を検出するための装備をコードに施す。 <li>メンバーシップ システムによるアカウント停止時にそれを検出する装備をコードに施す。 <li>機密性の高いビジネス ロジックへのアクセスを追跡する装備をコードに施す。 </li></li></li></li></li></li>
  </ul>
  <h1>概要</h1>
  <p>セキュリティ インシデントまたはインフラストラクチャやアプリケーションの障害に迅速に対応するためには、ASP.NET アプリケーションを装備し、監視する必要があります。 ASP.NET ランタイム コンポーネントおよびコントロールは、ヘルス モニタリングのための装備を施されており、多くの一般的な状況に対してイベントを発生させます。 それには、ASP.NET メンバーシップ システム使用時のログインの失敗と成功、Forms Authentication チケットの改ざんや再利用、ディスク アクセス障害などのインフラストラクチャに関する問題が含まれます。 デフォルトでは、ASP.NET ヘルス モニタリング システムは、すべてのセキュリティ関連エラー イベントと、すべてのインフラ関連エラー イベントを Windows イベント ログへ報告するように構成されています。</p>
  <p>ASP.NET アプリケーションに施す装備の計画を立てるときは、報告が必要と思われる標準の ASP.NET イベント、その報告先、およびその監視方法について決定をくだすことから始める必要があります。 ASP.NET には、以下の場所へ書き込みを行うイベント ログ プロバイダーが組み込まれています。</p>
  <ul>
    <li>Windowsイベント ログ<li>SQL Server データベース<li>電子メール受信<li>Windows Management Instrumentation (WMI)</li></li></li></li>
  </ul>
  <p>また、独自のカスタム イベント プロバイダーを作成することもできます。 イベントを監視するために、Microsoft Operations Manager (MOM) などの標準的な監視ツールや製品を使用することができます。</p>
  <h2>イベント クラスの階層</h2>
  <p>標準イベントのクラス階層を、各イベントに関連付けられた主要イベントコードと共に、図1に示します。 一部のイベントは主要コード以外に詳細コードもログ記録しますが、それらは図 1 に示されていません。 標準イベント コードについての詳細は、MSDN の .NET Framework クラス ライブラリ <a onclick="javascript:Track('ctl00_LibFrame_ctl01|ctl00_LibFrame_ctl04',this);" href="http://msdn.microsoft.com/en-us/library/system.web.management.webeventcodes_members.aspx"> WebEventCodes クラス </a> を参照してください。</p>
  <p>
    <img alt="" src="http://msdn2.microsoft.com/en-us/library/ms998325.f01paght00001601(en-us,MSDN.10).gif" border="0" />
  </p>
  <p>
    <b>図 1:   主要イベント コードを示した標準イベント クラスのクラス階層 </b>
  </p>
  <p>デフォルトで、ASP.NET ヘルス モニタリングは、Windows イベント ログの種類<b>WebFailureAuditEvent</b> (その派生物、<b>WebAuthenticationFailureAuditEvent</b> および<b>WebViewStateFailureAuditEvent</b> を含む) のすべてのイベント、タイプ<b>WebBaseErrorEvent </b>(およびその派生物、 <b>WebErrorEvent</b> および <b>WebRequestErrorEvent</b>)のすべてのイベントを記録するように構成されています。これらのクラスは、図1で強調表示されています。 </p>
  <p>さまざまな一連のイベントをログ記録するようにヘルス モニタリングを設定することができます。 記録するコード範囲を指定して特定のイベント コードを選択し、さまざまなイベント プロバイダーを介してさまざまなイベント シンクにログ記録することができます。 </p>
  <h1>プラットフォームのデフォルト セキュリティ イベント</h1>
  <p>ASP.NET はアプリケーションの状態を監視する多くのイベントをサポートしています。 これらの中で最も重要なのは、<b>WebErrorEvent</b> および <b>WebFailureAuditEvent</b> (その派生物、 <b>WebAuthenticationFailureAuditEvent</b> および <b>WebViewStateFailureAuditEvent</b> を含む)の種類のものであり、他のものは攻撃の場合に調査を支援するために追加できるのに対し、デフォルトでログ記録されます。</p>
  <h2>デフォルトでログ記録されるプラットフォームのデフォルト セキュリティイベント</h2>
  <p>次のイベントはデフォルトで Windows イベント ログにログ記録されます。</p>
  <h3>Forms Authentication イベント</h3>
  <p>次の主要イベント コードは、<b>WebAuthenticationFailureAuditEvent</b>型 のイベントをログ記録するものです。 </p>
  <ul>
    <li>
      <b>AuditFormsAuthenticationFailure</b> (コード 4005)。 これは、Forms Authentication クラスを使用する場合に総当たり攻撃 (Brute Force Attack) や辞書攻撃を特定するために使用します。 このコードには、以下の詳細コードのいずれかが添付されることがあります。<ul><li><b>ExpiredTicketFailure</b>。これは、Cookie 反復攻撃を特定するために使用します。 <li><b>InvalidTicketFailure</b>。これは、認証 Cookie タンパリングを特定するために使用します。 </li></li></ul><li><b>AuditMembershipAuthenticationFailure</b> (コード 4006)。 これは、メンバーシップ機能の使用時に総当たり攻撃 (Brute Force Attack) や辞書攻撃を特定するために使用します。 </li></li>
  </ul>
  <h3>無効な ViewState イベント</h3>
  <p>次の主要イベント コードは、<b>WebViewStateFailureAuditEvent</b> 型の例外をログ記録します: </p>
  <ul>
    <li>
      <b>AuditInvalidViewStateFailure</b> (コード 4009)。 これは、ViewState のタンパリングを特定するために使用します。 </li>
  </ul>
  <h3>認可イベント</h3>
  <p>次の主要イベント コードは、<b>WebFailureAuditEvent</b> 型のイベントをログ記録し、認可の失敗に関連付けられています: </p>
  <ul>
    <li>
      <b>AuditFileAuthorizationFailure</b> (コード 4008)。 これは、認可されていないファイルやフォルダにアクセスしようとする試みを特定するために使用します。 <li><b>AuditUnhandledAccessException</b> (コード 4011)。 これは、リソースへの認可されていないアクセスの試みを特定するために使用します。 <li><b>AuditUnhandledSecurityException</b> (コード 4010)。 これは、現在の信頼レベルで許可されていないアクションを実行しようとする試みを特定するために使用します。 <li><b>AuditUrlAuthorizationFailure</b> (コード 4007)。 これは、認可されていないパスやページへのアクセスの試みを特定するために使用します。 </li></li></li></li>
  </ul>
  <h3>アプリケーション障害イベント</h3>
  <p>次の主要イベント コードは、<b>WebErrorEvent</b> 型の例外をログ記録し、コンパイル エラーまたは構成エラーに関連付けられており、Web サイトのコンテンツの認可されていない改ざんを示すことがあります：</p>
  <ul>
    <li>
      <b>WebErrorCompilationError</b> (コード 3007)。 アプリケーションのコンパイル時にエラーが発生したことを示します。 <li><b>WebErrorConfigurationError</b> (コード 3008) 構成エラーが発生したことを示します。 <li><b>WebErrorObjectStateFormatterDeserializationError</b> (コード3011)。 内部​​状態オブジェクトをデシリアル化する際にエラーが発生したことを示します。 <li><b>WebErrorOtherError</b> (コード 3009)。 未分類のエラーが発生したことを示します。 <li><b>WebErrorParserError</b> (コード 3006)。 構文解析器 (parser)エラーが発生したことを示します。 <li><b>WebErrorPropertyDeserializationError</b> (コード 3010)。 内部​​状態オブジェクトをデシリアル化する際にエラーが発生したことを示します。 </li></li></li></li></li></li>
  </ul>
  <h3>ランタイム エラー イベント</h3>
  <p>次の主要イベント コードは <b>WebRequestErrorEvent</b> 型の例外をログ記録し、実行時エラーに関連付けられており、Web サイトへの攻撃を示すことがあります： </p>
  <ul>
    <li>
      <b>DiskOutputCacheInformation</b> (コード 5003)。 ディスク出力キャッシュ イベントが発生したことを示します。 このイベントには、さらに詳しい情報を示した詳細コードが常に添付されます。 <li><b>DiskOutputCacheQuotaExceeded</b> (コード 5001)。 ディスク出力キャッシュの割り当て量を超えたことを示します。 <li><b>RuntimeErrorPostTooLarge</b> (コード 3004)。 通知された情報のサイズが許容限度を超えたことを示します。 <li><b>RuntimeErrorRequestAbort</b> (コード 3001)。 ウェブ要求が中止されたことを示します。 <li><b>RuntimeErrorUnhandledException</b> (コード 3005)。 未処理の例外が発生したことを示します。 <li><b>RuntimeErrorValidationFailure</b> (コード 3003)。 検証エラーが発生したことを示します。 <li><b>RuntimeErrorViewStateFailure</b> (コード 3002)。 これは、表示ステータスに障害が発生したことを示します。 </li></li></li></li></li></li></li>
  </ul>
  <h2>デフォルトではログ記録されないプラットフォームのデフォルト イベント</h2>
  <p>以下のイベントは、デフォルトではログ記録されません。</p>
  <h3>アプリケーション有効期間イベント</h3>
  <p>以下のイベントは、アプリケーションの可用性を検出するためにログ記録することができます。 これらはデフォルトではオンになっていませんが、潜在的な攻撃を検出するためにすべてをオンにするようお勧めします。</p>
  <ul>
    <li>
      <b>ApplicationStart </b> (コード 1001) / <b>ApplicationShutdown</b> (コード 1002)。 これらのイベントはアプリケーションの起動とシャットダウンを示し、さらに詳しい情報を示した詳細コードが常に添付されます。 これらのイベントが大量に表示された場合、アプリケーションは DoS 攻撃の標的となっている可能性があります。 <li><b>ApplicationCompilationStart</b> (コード 1003) / <b>ApplicationCompilationEnd</b> (コード 1004)。 これらのイベントは、アプリケーションのコンパイルが開始し、終了したことを示します。 これらのイベントが表示された場合は、アプリケーションの内容が認可されていない状態で変更されたことを示す可能性があります。 </li></li>
  </ul>
  <h3>Forms Authentication イベント</h3>
  <p>Forms Authentication イベントにさらに情報を追加するには、以下のイベントをログ記録します。</p>
  <ul>
    <li>
      <b>AuditFormsAuthenticationSuccess</b> (コード 4001)。 これは、Forms Authentication クラスの使用時に、正常に完了した Forms Authentication の監査証跡を維持するのに使用します。システムに不祥事が発生した場合に、その記録をさかのぼって調べることができます。 <li><b>AuditMembershipAuthenticationSuccess</b> (コード 4002)。 これは、メンバーシップ機能の使用時に、正常に完了した ASP.NET メンバーシップ システムの認証の監査証跡を維持するのに使用されます。不祥事が発生した場合に、その記録をさかのぼって調べることができます。 </li></li>
  </ul>
  <h3>認可イベント</h3>
  <p>認可イベントにさらに情報を追加するには、以下のイベントをログ記録します。</p>
  <ul>
    <li>
      <b>AuditFileAuthorizationSuccess</b> (コード 4004)。 これは、監査証跡を維持するために使用します。システムに不祥事が発生した場合にさかのぼって 調べれば、攻撃者が成功したすべてのファイル アクセスを特定することができます。 <li><b>AuditUrlAuthorizationSuccess</b> (コード 4003)。 これは、監査証跡を維持するために使用します。システムに不祥事が発生した場合にさかのぼって調べれば、攻撃者が成功したすべての URL およびパスへのアクセスを特定することができます。 </li></li>
  </ul>
  <h3>ウェブ ハートビート イベント</h3>
  <p><b>WebHeartbeatEvent</b> は、アプリケーションの正常な動作を監視する監査証跡を提供するためにログ記録される場合があります：</p>
  <ul>
    <li>
      <b>ApplicationHeartbeat</b> (コード 1005)。 これは、アプリケーションのハートビートをログ記録するために使用します。 ハートビート間隔は、 &lt;<b>healthMonitoring</b>&gt;の <b>heartBeatInterval</b> 属性により定義されます。 element. デフォルト値は 0 で、ハートビートがないことを示します。 </li>
  </ul>
  <h3>ウェブ要求イベント</h3>
  <p>これらのイベントをログ記録すれば、通常の要求の完了と中止の監査証跡をとることができます。</p>
  <ul>
    <li>
      <b>RequestTransactionComplete</b> (コード 2001)。 これは、ウェブ要求が完了したことを示します。 <li><b>RequestTransactionAbort</b> (コード 2002)。 これは、ウェブ要求が中止されたことを示します。 </li></li>
  </ul>
  <h2>その他のカスタム セキュリティ イベント</h2>
  <p>アプリケーションへの攻撃を検出して認識する機能を改善するために装備できる、その他のカスタム セキュリティ イベントがあります。 以下は、ログ記録の対象として検討する必要のあるいくつかの追加セキュリティ イベントです。 この後に示されているイベントに加えて、アプリケーションで重要な機能を監視する固有のイベントを装備する必要があるかもしれません。</p>
  <h3>認可イベント</h3>
  <p>以下は、アプリケーションの状態の可視性を向上させるためにカスタム イベントを作成できる、認可シナリオのリストです。</p>
  <ul>
    <li>メモリ オブジェクト/鍵でのアクセス これは、成功イベントと失敗イベントの装備に使用されますが、オブジェクト/鍵に対する侵害を特定するために使用することもできます。 <li>ロール認可の成功イベント これは、ユーザー アクティビティの監査証跡を維持するために使用します。 <li>ロール認可の失敗イベント これは、認可されていないアクセスの試みを特定するために使用します。 </li></li></li>
  </ul>
  <h3>セッション管理イベント</h3>
  <p>以下のイベントを装備すれば、ユーザー アクティビティを追跡し、ユーザーの異常な動作を検出する機能が強化されます。</p>
  <ul>
    <li>セッション有効期間イベント<li>セッションの作成<li>セッションの終了<li>セッションのタイムアウト<li>セッションの有効期限</li></li></li></li></li>
  </ul>
  <h3>ユーザー管理イベント</h3>
  <p>以下のイベントを装備すれば、ユーザー アカウントの変更の変則性を追跡する機能が強化されます。</p>
  <ul>
    <li>パスワードのリセット/変更<li>アカウントの作成/削除/変更/ロックアウト<li>ロールの割り当て</li></li></li>
  </ul>
  <h1>サンプル: パスワード変更イベント</h1>
  <p>このサンプルでは、Forms Authentication でユーザーを認証するために ASP.NET メンバーシップを使用するアプリケーションで、ユーザーがいつパスワードを変更したかを記録するのに使用できるカスタムのウェブ イベントを示します。</p>
  <h2>パスワード変更ウェブ イベントの作成</h2>
  <ol>
    <li>Web イベントを構築するには、 <b>System.Web.Management.WebSuccessAuditEvent</b> から派生するクラス ライブラリ内にクラスを作成します。次のコードを使用します。 <div><pre>using System;<br />using System.Web.Management;<br />using System.Text;<br />using System.Web;<br />namespace MyWebEvents<br />{<br />&nbsp;&nbsp;&nbsp; public class PasswordChangedEvent : WebSuccessAuditEvent<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public PasswordChangedEvent(string msg, object eventSource, int eventCode)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : base(msg, eventSource, eventCode)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public PasswordChangedEvent(string msg, object eventSource, int eventCode, int eventDetailCode)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : base(msg, eventSource, eventCode, eventDetailCode)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />public override void FormatCustomEventDetails(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebEventFormatter formatter)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base.FormatCustomEventDetails(formatter);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add custom data.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; formatter.AppendLine("");<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; formatter.IndentationLevel += 1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; formatter.AppendLine(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "******** SampleWebSuccessAuditEvent Start ********");<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; formatter.AppendLine(string.Format("Request path: {0}",<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RequestInformation.RequestPath));<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; formatter.AppendLine(string.Format("Request Url: {0}",<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RequestInformation.RequestUrl));<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Display custom event message.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; formatter.AppendLine("Password changed");<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; formatter.AppendLine(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "******** SampleWebSuccessAuditEvent End ********");<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; formatter.IndentationLevel -= 1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp; <br />&nbsp;&nbsp;&nbsp; }<br />}   </pre></div><li>クラス ライブラリをコンパイルして、アセンブリを作成します。 </li></li>
  </ol>
  <h2>アプリケーションへのパスワード変更イベントの装備</h2>
  <ol>
    <li>以下の Login.aspx ページを含む新しい ASP.NET Web アプリケーションを作成します。 このページは <b>CreateUserWizard</b> と <b>ChangePassword</b> の制御が含まれていることに注意してください。 <b>OnChangePassword</b> イベントハンドラー内に、カスタム <b>PasswordChangedEvent</b> が発生します。 <div><pre>&lt;%@ Page Language="C#" %&gt;<br />&lt;%@ Import namespace="System.Web.Management" %&gt;<br />&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "<a href="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd</a>"&gt;<br />&lt;script runat="server"&gt;<br />&nbsp;&nbsp;&nbsp; protected void OnChangePassword(object sender, EventArgs e)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyWebEvents.PasswordChangedEvent pcEvt = new <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyWebEvents.PasswordChangedEvent(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Password changed", <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this, <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebEventCodes.WebExtendedBase + 1);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pcEvt.Raise();<br />&nbsp;&nbsp;&nbsp; }<br />&lt;/script&gt;<br />&lt;html&nbsp; &gt;<br />&lt;head runat="server"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;title&gt;Untitled Page&lt;/title&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />&nbsp;&nbsp;&nbsp; &lt;form id="form1" runat="server"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;div&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:CreateUserWizard ID="CreateUserWizard1" runat="server"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;WizardSteps&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:CreateUserWizardStep runat="server"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/asp:CreateUserWizardStep&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:CompleteWizardStep runat="server"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/asp:CompleteWizardStep&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/WizardSteps&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/asp:CreateUserWizard&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&lt;/div&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:ChangePassword ID="ChangePassword1" runat="server" OnChangedPassword="OnChangePassword"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/asp:ChangePassword&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/form&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;   </pre></div><li><blockquote><b>注意</b>: &nbsp;&nbsp;メンバーシップ システムのデフォルトの ASP.NET 構成では、アプリケーションの \app_data フォルダ内のSQL Express データベースにメンバーシップ データベースを作成し使用することになります。 ASP.NET メンバーシップ システムの使用法についての詳細は、<a onclick="javascript:Track('ctl00_LibFrame_ctl01|ctl00_LibFrame_ctl08',this);" href="http://msdn2.microsoft.com/en-us/library/ms998347.aspx">ハウツー: ASP.NET 2.0のメンバーシップを使用する</a> を参照してください。</blockquote><li>アプリケーションに Web.config ファイルを追加して、Forms Authentication 用にアプリケーションを構成するには、次の構成を追加します。 <div><pre>&lt;system.web&gt;<br />&nbsp;&nbsp;&nbsp; ...<br />&nbsp;&nbsp;&nbsp; &lt;authentication mode="Forms" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;authorization&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;deny users="?" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/authorization&gt;<br />&nbsp;&nbsp;&nbsp; ...<br />&lt;/system.web&gt;   </pre></div><li>次の&lt;<b>healthMonitoring</b>&gt;  エレメントを&lt;<b>system.web</b>&gt;内でアプリケーションの Web.config ファイルに追加して、カスタム イベント用のヘルス モニタリングを構成します。 element. <div><pre>&lt;healthMonitoring&gt;<br />&nbsp;&nbsp;&nbsp; &lt;eventMappings&gt; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;add name="Password Change Event" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type="MyWebEvents.PasswordChangedEvent,MyWebEvents"/&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/eventMappings&gt;<br />&nbsp;&nbsp;&nbsp; &lt;rules&gt; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;add name="Custom event" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eventName="Password Change Event" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; provider="EventLogProvider" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; minInterval="00:00:01"/&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/rules&gt;&nbsp;&nbsp;&nbsp;&nbsp; <br />&lt;/healthMonitoring&gt;   </pre></div><li>アプリケーションを実行します。 新規ユーザーを作成するには、<b>CreateUserWizard</b> 制御を使用します。 デフォルトのメンバーシップ構成には、少なくとも 1 つの非英数字を含む 7 文字以上のパスワードが必要です。 <li>ユーザーのパスワードを変更するには、 <b>ChangePassword</b> 制御を使用します。 <li>Windowsアプリケーションのイベント ログを調べて、カスタム イベントが発生しログ記録されていることを確認します。 次のような詳細が表示されるはずです。 <div><pre>Event Type:&nbsp; Information<br />Event Source:&nbsp;&nbsp;&nbsp; ASP.NET 3.5<br />Event Category:&nbsp;&nbsp;&nbsp; Web Event <br />Event ID:&nbsp;&nbsp;&nbsp; 1312<br />Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22/06/2009<br />Time:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 12:09:50<br />User:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; N/A<br />Computer:&nbsp;&nbsp;&nbsp; MachineName<br />Description:<br />Event code: 100002 <br />Event message: Password changed <br />Event time: 22/06/2009 12:09:48 <br />Event time (UTC): 22/06/2009 11:09:48 <br />Event ID: 1cc7c6fd96ea459892fd8896ceabf912 <br />Event sequence: 5 Event occurrence: 1 <br />Event detail code: 0<br />Application information:<br />&nbsp;&nbsp;&nbsp;&nbsp; Application domain: 39a139ed-2-127639121611001296<br />&nbsp;&nbsp;&nbsp;&nbsp; Trust level: Full<br />&nbsp;&nbsp;&nbsp;&nbsp; Application Virtual Path: /HealthMonitoring<br />&nbsp;&nbsp;&nbsp;&nbsp; Application Path: C:\Documents and Settings\{UserName}\my documents\visual studio\Projects\Websites\HealthMonitoring\<br />&nbsp;&nbsp;&nbsp;&nbsp; Machine name: MachineName<br />Process information:<br />&nbsp;&nbsp;&nbsp;&nbsp; Process ID: 3052<br />&nbsp;&nbsp;&nbsp;&nbsp; Process name: WebDev.WebServer.EXE<br />&nbsp;&nbsp;&nbsp;&nbsp; Account name: DomainName\UserName<br />&nbsp;<br />Request information:<br />&nbsp;&nbsp;&nbsp;&nbsp; Request URL: <a href="http://localhost:2076/HealthMonitoring/default.aspx">http://localhost:2076/HealthMonitoring/default.aspx</a><br />&nbsp;&nbsp;&nbsp;&nbsp; Request path: /HealthMonitoring/default.aspx<br />&nbsp;&nbsp;&nbsp;&nbsp; User host address: 127.0.0.1&nbsp;&nbsp;&nbsp;&nbsp; User: UserName&nbsp;&nbsp;&nbsp;&nbsp; Is authenticated: True<br />&nbsp;&nbsp;&nbsp;&nbsp; Authentication Type: Forms<br />&nbsp;&nbsp;&nbsp;&nbsp; Thread account name: DomainName\UserName <br />Custom event details: <br />&nbsp;&nbsp;&nbsp; ******** SampleWebSuccessAuditEvent Start ********<br />&nbsp;&nbsp;&nbsp; Request path: /HealthMonitoring/default.aspx<br />&nbsp;&nbsp;&nbsp; Request Url: <a href="http://localhost:2076/HealthMonitoring/default.aspx">http://localhost:2076/HealthMonitoring/default.aspx</a><br />&nbsp;&nbsp;&nbsp; Password changed<br />&nbsp;&nbsp;&nbsp; ******** SampleWebSuccessAuditEvent End ********<br />For more information, see Help and Support Center at <a href="http://go.microsoft.com/fwlink/events.asp">http://go.microsoft.com/fwlink/events.asp</a>.<br /></pre></div></li></li></li></li></li></li></li>
  </ol>
  <h1>サンプル：メンバーシップ アカウントがロックされたイベント</h1>
  <p>次のサンプルは、何度も誤ったパスワードを使ったログイン試行があり ASP.NET メンバーシップ ユーザー アカウントがロックされているときに、カスタム Web イベントを発生させる方法を示しています。</p>
  <h2>アカウント ロックされた Web イベントを作成するには</h2>
  <ol>
    <li>Web イベントを構築するには、<b>System.Web.Management.WebAuthenticationFailureAuditEvent</b> から派生するクラス ライブラリにクラスを作成します。System.Web への参照を追加した後に次のコードを使用します。<div><pre>using System;<br />using System.Web.Management;<br />using System.Text;<br />using System.Web;<br />namespace MyWebEvents<br />{<br />&nbsp;&nbsp;&nbsp; public class AccountLockedEvent : WebAuthenticationFailureAuditEvent<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public AccountLockedEvent(string msg, object eventSource, int eventCode, string nameToAuthenticate)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : base(msg, eventSource, eventCode, nameToAuthenticate)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public AccountLockedEvent(string username, string msg, object eventSource, int eventCode, int eventDetailCode, string nameToAuthenticate)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : base(msg, eventSource, eventCode, eventDetailCode,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nameToAuthenticate)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />}   </pre></div><li>クラス ライブラリをコンパイルして、アセンブリを作成します。 </li></li>
  </ol>
  <h2>アカウントがロックされたイベントのアプリケーションを実行するには</h2>
  <ol>
    <li>以下の Login.aspx ページを含む新しい ASP.NET Web アプリケーションを作成します。 このページは<b>Login</b> と <b>CreateUserWizard</b> 制御が含まれていることに注意してください。 認証エラーがユーザー アカウントがロックされている結果である場合には、<b>Login1_LoginError</b> イベント ハンドラー内に、カスタム<b>AccountLockedEvent</b> が発生します。  <p>この例は、<b>Login</b> 制御時にユーザー認証ができないことを検出する <b>LoginError</b> イベントをトラップするものです。 メンバーシップ システムを使用していてもログイン制御をしていない場合は、ユーザー アカウントがロックされているかを検出するために随時、<b>MembershipUser.IsLockedOut</b> プロパティの値を検索することができます。 </p><div><pre>&lt;%@ Page Language="C#" %&gt;<br />&lt;%@ Import namespace="System.Web.Management" %&gt;<br />&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "<a href="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd</a>"&gt;<br />&lt;script runat="server"&gt;<br />&nbsp;&nbsp;&nbsp; protected void Login1_LoginError(object sender, EventArgs e)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MembershipUser user = Membership.GetUser(Login1.UserName);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Check user exists; if so, was failure due to locked out?<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (user != null)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (user.IsLockedOut)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AccountLockedEvent testEvent = <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new AccountLockedEvent("Account Locked",<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebEventCodes.WebExtendedBase + 2,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Login1.UserName);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; testEvent.Raise();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; } &lt;/script&gt;<br />&lt;html&nbsp; &gt;<br />&lt;head runat="server"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;title&gt;Untitled Page&lt;/title&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />&nbsp;&nbsp;&nbsp; &lt;form id="form1" runat="server"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;div&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:Login ID="Login1" runat="server" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnLoginError="Login1_LoginError"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/asp:Login&gt;<br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:CreateUserWizard ID="CreateUserWizard1" runat="server"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;WizardSteps&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:CreateUserWizardStep runat="server"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/asp:CreateUserWizardStep&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:CompleteWizardStep runat="server"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/asp:CompleteWizardStep&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/WizardSteps&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/asp:CreateUserWizard&gt;&nbsp;&nbsp;&nbsp; &lt;/form&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;   </pre></div><li><blockquote><b>注意</b>: &nbsp;&nbsp;メンバーシップ システムのデフォルトの ASP.NET 構成では、アプリケーションの \app_data フォルダ内のSQL Express データベースにメンバーシップ データベースを作成し使用することになります。 </blockquote><li>Forms Authentication 用にアプリケーションを構成するには、アプリケーションに Web.config ファイルを追加して、次の構成を追加します。 <div><pre>&lt;system.web&gt;<br />&nbsp;&nbsp;&nbsp; ...<br />&nbsp;&nbsp;&nbsp; &lt;authentication mode="Forms" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;authorization&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;deny users="?" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/authorization&gt;<br />&nbsp;&nbsp;&nbsp; ...<br />&lt;/system.web&gt;   </pre></div><li>次の&lt;<b>healthMonitoring</b>&gt;  エレメントを&lt;<b>system.web</b>&gt;内でアプリケーションの Web.config ファイルに追加して、カスタム イベント用のヘルス モニタリングを構成します。 element. <div><pre>&lt;healthMonitoring&gt;<br />&nbsp;&nbsp;&nbsp; &lt;eventMappings&gt; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;add name="Account Locked Event" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type="MyWebEvents.AccountLockedEvent,MyWebEvents"/&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp; &lt;/eventMappings&gt;<br />&nbsp;&nbsp;&nbsp; &lt;rules&gt; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;add name="Custom event" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eventName="Account Locked Event" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; provider="EventLogProvider" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; minInterval="00:00:01"/&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/rules&gt;&nbsp;&nbsp;&nbsp;&nbsp; <br />&lt;/healthMonitoring&gt;   </pre></div><li>アプリケーションを実行します。 新規ユーザーを作成するには、<b>CreateUserWizard</b> 制御を使用します。 デフォルトのメンバーシップ構成には、少なくとも 1 つの非英数字を含む 7 文字以上のパスワードが必要です。 <li>ユーザー認証を行うには、 <b>Login</b> 制御にデータを入力します。 先ほど作成したユーザー名を使用しますが、意図的に間違ったパスワードを入力します。 10 分間にこれを 5 回繰り返します。 <blockquote><b>注意</b>: &nbsp;&nbsp;無効なパスワードの試行回数は、構成されたメンバーシップ プロバイダーの<b>maxInvalidPasswordAttempts</b> 属性と、<b>passwordAttemptWindow</b> 属性の再試行ウィンドウにより決定されます。 ASP.NET メンバーシップ システムのデフォルト構成は、%Windows%\Microsoft.NET\Framework\<i>version</i>\Config\machine.config.default で定義され、10 分間に 5 回の試行としてこの属性を定義しています。<b></b></blockquote><li>Windowsアプリケーションのイベント ログを調べて、カスタム イベントが発生しログ記録されていることを確認します。 次のような詳細が表示されるはずです。 ロックされたアカウントのユーザー名は <b>Name to authenticate</b> として下端近くに含まれていることに注意してください。<div><pre>Event Type:&nbsp;&nbsp;&nbsp; Information<br />Event Source:&nbsp;&nbsp;&nbsp; ASP.NET 3.5<br />Event Category:&nbsp;&nbsp;&nbsp; Web Event <br />Event ID:&nbsp;&nbsp;&nbsp; 1315<br />Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 02/08/2009<br />Time:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11:28:17<br />User:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; N/A<br />Computer:&nbsp;&nbsp;&nbsp; MachineName<br />Description:<br />Event code: 100001 <br />Event message: Account Locked <br />Event time: 02/08/2009 11:28:17 <br />Event time (UTC): 02/08/2009 10:28:17 <br />Event ID: aa11f46a63bf49ccb6e2c642735ef26e <br />Event sequence: 5 <br />Event occurrence: 1 <br />Event detail code: 0 <br />&nbsp;<br />Application information:<br />&nbsp;&nbsp;&nbsp;&nbsp; Application domain: 39a139ed-1-127674517374818688<br />&nbsp;&nbsp;&nbsp;&nbsp; Trust level: Full<br />&nbsp;&nbsp;&nbsp;&nbsp; Application Virtual Path: /HealthMonitoring<br />&nbsp;&nbsp;&nbsp;&nbsp; Application Path: C:\Documents and Settings\{UserName}\my documents\visual studio\Projects\Websites\HealthMonitoring\<br />&nbsp;&nbsp;&nbsp;&nbsp; Machine name: MachineName <br />&nbsp;<br />Process information:<br />&nbsp;&nbsp;&nbsp;&nbsp; Process ID: 2972<br />&nbsp;&nbsp;&nbsp;&nbsp; Process name: WebDev.WebServer.EXE<br />&nbsp;&nbsp;&nbsp;&nbsp; Account name: DomainName\UserName Request information:<br />&nbsp;&nbsp;&nbsp;&nbsp; Request URL: <a href="http://localhost:2076/HealthMonitoring/login.aspx">http://localhost:2076/HealthMonitoring/login.aspx</a><br />&nbsp;&nbsp;&nbsp;&nbsp; Request path: /HealthMonitoring/login.aspx<br />&nbsp;&nbsp;&nbsp;&nbsp; User host address: 127.0.0.1<br />&nbsp;&nbsp;&nbsp;&nbsp; User:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Is authenticated: False<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Authentication Type:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread account name: DomainName\UserName <br />Name to authenticate: UserName <br />&nbsp;<br />Custom event details: <br />For more information, see Help and Support Center at <a href="http://go.microsoft.com/fwlink/events.asp.">http://go.microsoft.com/fwlink/events.asp.</a></pre></div></li></li></li></li></li></li></li>
  </ol>
  <h1>サンプル：アクセスに反応するメソッドイベント</h1>
  <p>次のサンプルでは、注意すべきビジネス ロジックを含むメソッドの呼び出しを追跡するために、カスタム Web イベントを発生させる方法を示しています。 </p>
  <h2>注意すべきメソッドの Web イベントを作成するには</h2>
  <ol>
    <li>Web イベントを構築するには、 <b>System.Web.Management.WebSuccessAuditEvent</b> から派生するクラス ライブラリ内にクラスを作成します。次の例は、現在認証されている Windows アカウントの名前とアクセスされている機能の名前を書き出します。 <div><pre>using System;<br />using System.Web.Management;<br />using System.Text;<br />using System.Web;<br />namespace MyWebEvents<br />{<br />&nbsp;&nbsp;&nbsp; public class SensitiveFunctionEvent : WebSuccessAuditEvent<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private string userID;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private string functionName;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public SensitiveFunctionEvent(string msg, object eventSource, int eventCode, string functionname)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : base(msg, eventSource, eventCode)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; functionName = functionname;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Obtain the HTTP Context and store authentication details<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; userID = HttpContext.Current.User.Identity.Name;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public SensitiveFunctionEvent(string msg, object eventSource, int eventCode, int eventDetailCode, string functionname)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : base(msg, eventSource, eventCode, eventDetailCode)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; functionName = functionname;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Obtain the HTTP Context and store authentication details<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; userID = HttpContext.Current.User.Identity.Name;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />public override void FormatCustomEventDetails(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebEventFormatter formatter)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base.FormatCustomEventDetails(formatter);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; formatter.AppendLine("Function Name: " + functionName);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; formatter.AppendLine("User ID: " + userID);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp; <br />&nbsp;&nbsp;&nbsp; }<br />}   </pre></div><li><b>System.Web </b> アセンブリに参照を追加します。 <li>クラス ライブラリをコンパイルして、アセンブリを作成します。 </li></li></li>
  </ol>
  <h2>イベントでアプリケーションを実行するには</h2>
  <ol>
    <li>次の default.aspx ページを含む新しい ASP.NET Web アプリケーションを作成します。 <div><pre>&lt;%@ Page Language="C#" %&gt;<br />&lt;%@ Import namespace="System.Web.Management" %&gt;<br />&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "<a href="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd</a>"&gt;<br />&lt;script runat="server"&gt;<br />&nbsp;&nbsp;&nbsp; protected void Page_Load(object sender, EventArgs e)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SomeFunctionContainingSensitiveLogic();<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; private void SomeFunctionContainingSensitiveLogic()<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SensitiveFunctionEvent testEvent = new SensitiveFunctionEvent(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Sensitive function has been accessed",<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebEventCodes.WebExtendedBase + 3,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "SomeFunctionContainingSensitiveLogic");<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; testEvent.Raise();<br />  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Some sensitive logic would appear below...<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ...<br />&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp; <br />&lt;/script&gt;<br />&lt;html&nbsp; &gt;<br />&lt;head runat="server"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;title&gt;Untitled Page&lt;/title&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />&nbsp;&nbsp;&nbsp; &lt;form id="form1" runat="server"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/form&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;   </pre></div><li>Windows 認証用にアプリケーションを構成するには、アプリケーションに Web.config ファイルを追加し、次の構成を追加します。 <div><pre>&lt;system.web&gt;<br />&nbsp;&nbsp;&nbsp; ...<br />&nbsp;&nbsp;&nbsp; &lt;authentication mode="Windows" /&gt;<br />&nbsp;&nbsp;&nbsp; ...<br />&lt;/system.web&gt;   </pre></div><li>次の&lt;<b>healthMonitoring</b>&gt;  エレメントを&lt;<b>system.web</b>&gt;内でアプリケーションの Web.config ファイルに追加して、カスタム イベント用のヘルス モニタリングを構成します。 element. <div><pre>&lt;healthMonitoring&gt;<br />&nbsp;&nbsp;&nbsp; &lt;eventMappings&gt; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;add name="Sensitive Function Audit" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type="MyWebEvents.SensitiveFunctionEvent,MyWebEvents"/&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/eventMappings&gt;<br />&nbsp;&nbsp;&nbsp; &lt;rules&gt; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;add name="Custom event" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eventName="Sensitive Function Audit" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; provider="EventLogProvider" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; minInterval="00:00:01"/&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/rules&gt;&nbsp;&nbsp;&nbsp;&nbsp; <br />&lt;/healthMonitoring&gt;   </pre></div><li>アプリケーションを実行します。 <li>Windowsアプリケーションのイベント ログを調べて、カスタム イベントが発生しログ記録されていることを確認します。 次のような詳細が表示されるはずです。 <div><pre>Event Type:&nbsp; Information<br />Event Source:&nbsp; ASP.NET 3.5<br />Event Category:&nbsp; Web Event <br />Event ID:&nbsp; 1312<br />Date:&nbsp;&nbsp;&nbsp; 02/08/2005<br />Time:&nbsp;&nbsp;&nbsp; 12:23:50<br />User:&nbsp;&nbsp;&nbsp; N/A<br />Computer:&nbsp; MachineName<br />Description:<br />Event code: 100003 <br />Event message: Sensitive function has been accessed <br />Event time: 02/08/2009 12:23:50 <br />Event time (UTC): 02/08/2009 11:23:50 <br />Event ID: 57d3761489b741978cae24b673f6b2a4 <br />Event sequence: 4 <br />Event occurrence: 1 <br />Event detail code: 0 <br />&nbsp;<br />Application information:<br />&nbsp;&nbsp;&nbsp;&nbsp; Application domain: 39a139ed-4-127674554288097376<br />&nbsp;&nbsp;&nbsp;&nbsp; Trust level: Full<br />&nbsp;&nbsp;&nbsp;&nbsp; Application Virtual Path: /HealthMonitoring<br />&nbsp;&nbsp;&nbsp;&nbsp; Application Path: C:\Documents and Settings\{UserName}\my documents\visual studio\Projects\Websites\HealthMonitoring\<br />&nbsp;&nbsp;&nbsp;&nbsp; Machine name: MachineName&nbsp; Process information:<br />&nbsp;&nbsp;&nbsp;&nbsp; Process ID: 2972<br />&nbsp;&nbsp;&nbsp;&nbsp; Process name: WebDev.WebServer.EXE<br />&nbsp;&nbsp;&nbsp;&nbsp; Account name: DomainName\UserName&nbsp; Request information:<br />&nbsp;&nbsp;&nbsp;&nbsp; Request URL: <a href="http://localhost:2076/HealthMonitoring/default.aspx">http://localhost:2076/HealthMonitoring/default.aspx</a><br />&nbsp;&nbsp;&nbsp;&nbsp; Request path: /HealthMonitoring/default.aspx<br />&nbsp;&nbsp;&nbsp;&nbsp; User host address: 127.0.0.1<br />&nbsp;&nbsp;&nbsp;&nbsp; User: DomainName\UserName<br />&nbsp;&nbsp;&nbsp; Is authenticated: True<br />&nbsp;&nbsp;&nbsp;&nbsp; Authentication Type: NTLM<br />&nbsp;&nbsp;&nbsp;&nbsp; Thread account name: DomainName\UserName <br />Custom event details:<br />Function Name: SomeFunctionContainingSensitiveLogic<br />User ID: DomainName\UserName<br />For more information, see Help and Support Center at <a href="http://go.microsoft.com/fwlink/events.asp">http://go.microsoft.com/fwlink/events.asp</a>.</pre></div></li></li></li></li></li>
  </ol>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>