<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-432898035" Content_Hash="-1392675402">
  <Metadata>
    <Id>7ea17a8a-4499-48d0-ba29-9bf67f5ab91c</Id>
    <Library_Id>00000000-0000-0000-0000-000000000000</Library_Id>
    <Title>辞書攻撃のテスト方法</Title>
    <Category>認証</Category>
    <Phase>テスト</Phase>
    <Technology> 任意</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<H1><SPAN>概要</SPAN></H1><P>辞書攻撃は、攻撃者が辞書に記載されている大量の復号鍵とパスフレーズを試すことにより、暗号を解読しようとする攻撃です。<SPAN>&nbsp;&nbsp;&nbsp; </SPAN>辞書とは、暗号解読時に試行される可能性のある鍵と言葉のリストです。<SPAN>&nbsp;&nbsp; </SPAN><SPAN>&nbsp;</SPAN>辞書攻撃は、クライアントへのログインに Credential 情報を使用するアプリケーションにも適用可能です。<SPAN>&nbsp; </SPAN>Credential 情報辞書攻撃は、暗号解読攻撃と似ていますが、有効なパスワードを見つけて認証を回避するという点で異なっています。このため、辞書は、鍵やパスフレーズの値ではなく、使用される可能性のあるパスワード値で構成されています。</P><P>次の手順に従って、辞書攻撃のテスト方法を学習します。</P><UL><LI>手順 1: 攻撃のシナリオを理解する<LI>手順 2: 原因と対策を分析する<LI>手順 3: テスト ケースを実行する</LI></UL><P>&nbsp;</P><H1><SPAN>手順 1: 攻撃のシナリオを理解する</SPAN></H1><P>最初に、関連するさまざまな攻撃シナリオについて理解する必要があります。</P><UL><LI>暗号辞書攻撃<LI>Credential 情報辞書攻撃<LI>暗号化パスワード クラッキング攻撃</LI></UL><P><B><I><SPAN></SPAN></I></B></P><H2><SPAN><EM>暗号辞書攻撃</EM></SPAN></H2><P>可能性のある鍵領域を徹底的に検索することにより、大量の鍵とパスフレーズを体系的に作成するブルート フォース攻撃とは異なり、辞書攻撃は、辞書が提供する範囲のみを試行します。<SPAN>&nbsp;&nbsp; </SPAN>そのため、この攻撃は、攻撃者が暗号化システムを無効にするために使用する辞書のリストまたはファイルを作成することから開始されます。<SPAN>&nbsp; </SPAN>次に、攻撃者は、既知の (既知のプレーンテキストを攻撃する場合)、または未知の (暗号文のみを攻撃する場合) プレーンテキストを復号化するための暗号文を探します。<SPAN>&nbsp; </SPAN>攻撃者は、攻撃辞書に記載されている鍵を順番に復号関数に渡して、有効な復号鍵を見つけるまで攻撃を続けます。</P><P>詳細: </P><OL><LI>攻撃者は、可能性のある鍵/パスフレーズのリストから構成される攻撃辞書を作成して、暗号化システムを無効にするまでその辞書を使用します。<LI>攻撃者は、復号する暗号文を見つけます。<SPAN>&nbsp; </SPAN><LI>攻撃者は、攻撃辞書を繰り返し使用して、辞書のすべてのエントリで暗号文を復号化しようと試みます。</LI></OL><H2><SPAN><EM>Credential 情報辞書攻撃</EM></SPAN></H2><P>Credential 情報辞書攻撃のシナリオは、前のシナリオと似ていますが、攻撃者が暗号化を無効にするのではなく、認証を回避しようとしている点で異なっています。<SPAN>&nbsp;&nbsp;&nbsp; </SPAN>このため、攻撃者の目的は、復号鍵を見つけることではなく、有効なパスワードなど、有効な Credential 情報を見つけることになります。<SPAN>&nbsp; </SPAN>この攻撃は、標的となるユーザーの有効なユーザー名を攻撃者が選択することから開始されます。<SPAN>&nbsp; </SPAN>有効なユーザー名は、登録ページやソーシャル エンジニアリングを利用して入手します。<SPAN>&nbsp;&nbsp; </SPAN>次に、攻撃者は、前のシナリオと同様の手順に従います。<SPAN>&nbsp; </SPAN>攻撃者は、可能性のあるパスワードのリストを含む辞書を作成します。<SPAN>&nbsp;&nbsp; </SPAN>攻撃者が有能であると、数値の代わりに文字を代入したり、同様の処理を適用したりすることにより、<SPAN>&nbsp; </SPAN>辞書を変化させてくる可能性があります。<SPAN>&nbsp; </SPAN>次に、攻撃者は、Web ページにログインする際に実行される認証要求を探します。<SPAN>&nbsp; </SPAN>攻撃者は、辞書に記載されているパスワードを順番にログイン手順に渡して、標的のアプリケーションにログインできるパスワードを見つけるまで攻撃を続けます。<SPAN>&nbsp; </SPAN></P><P>詳細: </P><OL><LI>攻撃者は、攻撃の標的となるクライアントを選択して、標的のユーザー名を見つけます。<LI>攻撃者は、可能性のあるパスワード値から構成される攻撃辞書を作成します。<LI>攻撃者は、攻撃辞書を繰り返し使用して、辞書のすべてのエントリでアプリケーションにログインしようと試みます。</LI></OL><H2><SPAN><EM>暗号化パスワード クラッキング</EM></SPAN></H2><P>攻撃者の目的が、有効な鍵やパスワードを見つけることではなく、標的となるパスワードが暗号化されたもの、またはハッシュされたものを見つけることとなる場合もあります。<SPAN>&nbsp;&nbsp; </SPAN>これは、UNIX パスワード ファイルなど、一連のパスワード ハッシュを含むパスワード ファイル (パスワードが DES ハッシュで表示されています) を攻撃者が入手した場合や、ネットワーク接続をスニッフィングした際に、パスワードがハッシュ/暗号化された後に送信されていることが判明した場合に一般的なシナリオです。<SPAN>&nbsp;&nbsp; </SPAN></P><P>&nbsp;</P><P>詳細: </P><OL><LI>攻撃者は、標的のパスワードがハッシュ/暗号化されたものであること、および値のハッシュ/暗号化に使用された暗号化アルゴリズムを記述しているネットワーク キャプチャ、またはパスワード ファイルを入手します。<LI>攻撃者は、可能性のあるパスワード値から構成される攻撃辞書を作成します。<LI>攻撃者は、攻撃辞書のすべてのエントリに対して、次の処理を実行します。</LI></OL><UL><UL><LI>ステップ 2 で見つけたアルゴリズムを利用して、エントリをハッシュまたは暗号化します。<LI>ハッシュ/暗号化されたパスワードを、ステップ 1 の標的パスワードと比較します。</LI></UL></UL><P>&nbsp;</P><H1><SPAN>手順 2: 原因と対策を分析する</SPAN></H1><P>次に、辞書攻撃の原因とその対応方法について理解する必要があります。<SPAN>&nbsp; </SPAN></P><H2><SPAN><EM>攻撃の原因</EM></SPAN></H2><P>暗号化辞書攻撃は、目的を持って存在しています。<SPAN>&nbsp; </SPAN>辞書攻撃は、実装の欠陥ではなく攻撃の手法であるため、この問題はコード内では特定できません。<SPAN>&nbsp; </SPAN>大部分の場合、攻撃者は、復号関数と暗号文を入手します。<SPAN>&nbsp; </SPAN>この 2 つが辞書攻撃を開始するための唯一の要件です。開発者は、独自の暗号化アルゴリズムを実装するのではなく、公開されている暗号化アルゴリズムを使用するように指示されているので、この攻撃は、セキュリティのベスト プラクティスに従う暗号化アプリケーション内に以前から存在しています。<SPAN>&nbsp; </SPAN></P><P>&nbsp;</P><H2><SPAN><EM>攻撃への対応策</EM></SPAN></H2><P>暗号化辞書攻撃では、パスワードではなく鍵の入手を目的としているため、十分に大きな鍵を選択することにより、辞書攻撃で復号鍵が発見される可能性が減少します。<SPAN>&nbsp; </SPAN>暗号化が実装されているアプリケーションでは、可能性のある鍵の組み合わせ、つまり鍵のスペースを決定する、特定の長さ (ビット単位) の鍵が使用されます。<SPAN>&nbsp; </SPAN>たとえば、64 ビットの鍵では、2&lt;SUP&gt; 64 &lt;/SUP&gt; の鍵の組み合わせが考えられます。<SPAN>&nbsp; </SPAN>復号鍵が長くなるほど、それを含める辞書を作成することが困難になります。<SPAN>&nbsp; </SPAN></P><P>パスワードに対する辞書攻撃、または OS のパスワード ファイルに対する同様の攻撃を防止するために、辞書に記載されている単語や名前の他にそれを少し変化させたもの (「house」を「h0us3」に変えたり、「Eric」を「3ric」に変えたりすること) を使用しないことをお勧めします。<SPAN>&nbsp;&nbsp; </SPAN>アプリケーションでは、高度なパスワード ポリシーを強制する必要があります。複雑な要件を指定して、攻撃辞書にパスワードが記載される可能性を減少させます。 <I>Credential 情報</I>辞書攻撃に対応するその他の方法として、アカウントをロックダウンする、ログイン プロセスに時間遅延を導入する、CAPTCHA や秘密の質問など実際の人間との対話である証拠を要求する、認証が数回失敗したら別の動作を実行するなどがあります。<SPAN>&nbsp; </SPAN>以上の対応策は、Credential 情報辞書攻撃にのみ適用できるものであり、暗号化辞書攻撃には適用できないことに注意してください。<SPAN>&nbsp; </SPAN>詳細については、チーム メンターの次の記事を参照してください。<I>「Credential 情報ブルート フォース攻撃のテスト方法」</I></P><P>&nbsp;</P><H1><SPAN>手順 3: テスト ケースを実行する</SPAN></H1><P>これまでは、辞書攻撃の理論的な側面について説明してきました。このステップでは、実用的なテスト ケースの実行に注目して、アプリケーションがこの攻撃に対して脆弱であるかどうかをチェックします。</P><H2><EM>暗号化辞書攻撃のテスト (既知のプレーンテキストの場合)</EM></H2><P>次の手順に従って、既知のプレーンテキストを使用した辞書攻撃をテストします。</P><OL><LI>可能性のある一連の復号鍵を含む辞書リストを作成します。<LI>暗号文 <I>C</I> とそれに対応するプレーンテキスト <I>P</I>、および未知の復号鍵 <I>K</I> でプレーンテキストを復号化するのに使用された復号関数を見つけます。<SPAN>&nbsp; </SPAN><UL><LI><I><SPAN>&nbsp;</SPAN>P =<SPAN>&nbsp; </SPAN><SPAN>&nbsp;</SPAN>decrypt(C, K)</I></LI></UL><LI>辞書にあるすべての鍵を順番に使用します。<SPAN>&nbsp; </SPAN><UL><LI>辞書 <I>K’</I> に記載されているすべての鍵に対して、前のステップで見つけた暗号文を使用して、復号アルゴリズムを実行します。<SPAN>&nbsp; </SPAN><I>P’ = decrypt (C, K’)</I><LI>現在の鍵 <I>K’</I> で生成されたプレーンテキスト <I>P’</I> において、前のステップで見つけたプレーンテキストが再生されているかどうかを確認します。<SPAN>&nbsp; </SPAN><I>P’= P?</I><SPAN>&nbsp;&nbsp; </SPAN></LI></UL></LI></OL><P>予想される結果: 一定の時間内に有効な鍵が見つかった場合、アプリケーションは脆弱であると判断されます。<EM>&nbsp;</EM></P><H2><EM>暗号化辞書攻撃のテスト (暗号文のみの場合)</EM></H2><P>次の手順に従って、暗号文のみを使用した辞書攻撃をテストします。</P><OL><LI>可能性のある一連の復号鍵を含む辞書リストを作成します。<LI>暗号文 <I>C</I> と標的の復号関数を見つけます。<LI>辞書に記載されているすべての鍵を順番に繰り返して使用します。<SPAN>&nbsp; </SPAN><UL><LI><SPAN><SPAN>a.&nbsp;<SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN>辞書 <I>K’</I> に記載されているすべての鍵に対して、前のステップで見つけた暗号文を使用して、復号アルゴリズムを実行します。<SPAN>&nbsp; </SPAN><I>P’ = decrypt (C, K’)</I><LI><SPAN><SPAN>b.&nbsp;<SPAN>&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN>プレーンテキスト <I>P’</I> が判読可能であるかどうかをチェックします。<SPAN>&nbsp;&nbsp; </SPAN></LI></UL></LI></OL><P>予想される結果: 一定の時間内に有効な鍵が見つかった場合、アプリケーションは脆弱であると判断されます。</P><P>&nbsp;</P><H2><EM>Credential 情報辞書攻撃のテスト</EM></H2><P>以下の手順を実行して、辞書攻撃をテストします。</P><OL><LI>標的となるクライアントの有効なユーザー名を利用します。<LI>可能性のあるパスワードを含む辞書ファイルを作成します。<LI>Brutus をダウンロードして、インストールします (<A href="http://www.hoobie.net/brutus/">http://www.hoobie.net/brutus/</A>)。<SPAN>&nbsp; </SPAN>その他のパスワード クラッキング ツールも利用できます。<LI>Brutus を実行します。<LI>ターゲット URL と認証型を入力します。<LI>[<B>パス モード (Pass Mode)</B>] ドロップダウン リストで、[ワード リスト (Word List)] を選択します。<LI>ステップ 2 で作成した辞書ファイルを参照します。<LI><B>[Start] (開始) </B>をクリックします。</LI></OL><P>予想される結果: 一致するものが存在する場合は、Brutus の [<B>認証の肯定結果 (Positive Authentication Results)</B>] リスト ボックスに表示されます。 図 1 を参照してください。</P><P>&lt;&lt;図 1 をここに挿入します。</P><P><B><SPAN>図 1 – 認証に成功した結果を示す Brutus (ユーザー名 = admin、パスワード = aaa)</SPAN></B></P><P><B><I>&nbsp;</I></B></P><P><B><I>&nbsp;</I></B></P><H2><EM>ハッシュ/暗号化されたパスワード クラッキングのテスト</EM> </H2><P>次の手順に従って、ハッシュ/暗号化されたパスワード クラッキング攻撃をテストします。</P><OL><LI>所定のユーザー名のハッシュ/暗号化されたパスワードを見つけます。<LI>可能性のある一連のパスワードを含む辞書リストを作成します。<LI>ハッシュ/暗号化されたパスワードを生成するのに使用された暗号化アルゴリズムを見つけます (DES、AES、またはその他の業界標準)。<LI>辞書に記載されているすべての値を順番に繰り返して使用します。<SPAN>&nbsp; </SPAN><UL><LI>辞書に記載されているすべてのパスワードに対して、ハッシュ/暗号化アルゴリズムを実行し、現在の値をハッシュ/暗号化します。<LI>ハッシュ/暗号化された値がステップ 1 の値と等しいかどうかをチェックします。<SPAN>&nbsp;&nbsp; </SPAN></LI></UL></LI></OL><P>予想される結果:  一定の時間内に有効な鍵が見つかった場合、アプリケーションは脆弱であると判断されます。 </P><P><B><I>&nbsp;</I></B></P><H1><SPAN>結論</SPAN></H1><P>辞書攻撃は、可能性のある鍵を事前に定義したリストから、有効な鍵を見つける作業を集中的に実行します。<SPAN>&nbsp; </SPAN>暗号化アルゴリズムと暗号文を発見して、鍵の辞書を繰り返し使用し、可能性のある鍵から判読可能なプレーンテキストを生成するだけの場合、攻撃者にとってこの攻撃は非常に簡単な作業です。<SPAN>&nbsp; </SPAN>Credential 情報シナリオの場合も、同様の手順で攻撃が行われます。ただし、この場合、暗号化手順を無効にしようとするのではなく、辞書に記載されている可能性のあるパスワード値を試すことにより、認証を回避しようとします。<SPAN>&nbsp;&nbsp; </SPAN>この攻撃は、暗号化システムや認証手順に以前から存在するものです。ただし、この攻撃への対応策として、十分に大きな鍵、AES などの業界標準アルゴリズム、高度なパスワード、アカウントのロックアウト ポリシー、時間遅延を使用したり、実際の人間と対話していることを証明させたりすることがあります。<SPAN>&nbsp; </SPAN>テストの内容は、プレーンテキストが既知であるかどうか、および標的システムの種類 (暗号化と Credential 情報の対応) に応じて異なります。</P><P><P>&nbsp;</P><P></P>]]></Data>
  </Content>
</TeamMentor_Article>