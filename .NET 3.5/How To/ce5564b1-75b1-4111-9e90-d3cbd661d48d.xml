<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="390389252" Content_Hash="-841817694">
  <Metadata>
    <Id>ce5564b1-75b1-4111-9e90-d3cbd661d48d</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>入力およびデータ検証アーキテクチャを作成する方法</Title>
    <Category>入力とデータの検証</Category>
    <Phase>実装</Phase>
    <Technology>.NET 3.5</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>説明</h1>
  <p>アプリケーションの入力とデータの検証アーキテクチャを開発する際に、最小のアプリケーションを除くすべてのアプリケーションで、検証ルーチンのライブラリを開発することを検討してください。 これにより、アプリケーション全体でデータが一貫性をもって検証され、保守管理ポイントが 1 箇所になります。 エントリ ポイントからエグジット ポイントまでデータを追跡して、検証の仕組みを理解する必要があります。 適切なライブラリには、適用する必要があるさまざまな種類の検証のルーチンが含まれています。これらは必要に応じて組み合わせて利用されます。 例えば、SQL インジェクションに検証を適用するルーチン、んらびにその他のクロスサイト スクリプティングへの検証を適用するルーチンを保有する必要があります。 </p>
  <p>最初から許可する内容を制約します。 (ブラック リストを使用して) 既知の不適切な文字を探すことでデータを検証するより、(ホワイト リストを使用して) 既知の有効な種類、パターン、範囲のデータを検証するほうが簡単です。 アプリケーションを設計するときは、アプリケーションに入力されるデータを把握しておきます。 一般的に、有効なデータの範囲は潜在的に悪意のある入力の範囲より限定されます。 ただし、防御機能を高めるために、既知の不適切な入力を拒否して、入力の不適切な部分を除去する必要があります。 種類、長さ、形式、範囲で入力を制約します。 正規表現を利用して、テキスト入力を制約します。 可能な場合は、高度なデータ型を使用してください。 </p>
  <p>また、信頼境界を特定して、信頼境界の間にあるエントリ ポイントで全ての入力データが必ず明示的に検証されるようにしてください。 データについては何も仮定しません。 唯一の例外は、同じ信頼境界内の他のルーチンによってのみ呼び出せることがわかっているルーチン内です。 </p>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>