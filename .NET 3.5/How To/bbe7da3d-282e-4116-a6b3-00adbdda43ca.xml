<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1916295485" Content_Hash="-930094937">
  <Metadata>
    <Id>bbe7da3d-282e-4116-a6b3-00adbdda43ca</Id>
    <Library_Id>00000000-0000-0000-0000-000000000000</Library_Id>
    <Title>HTTP 反復バグのテスト方法</Title>
    <Category>ネットワーキング</Category>
    <Phase>テスト</Phase>
    <Technology>Web アプリケーション</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<BR>
<H1>適用対象</H1>
<UL>
<LI>任意の言語 (ASP、PHP、Java、および同様の Web ベースの言語) で書かれた Web サービスとアプリケーション</LI></UL>
<H1>概要</H1>
<P>HTTP 反復攻撃中、攻撃者は HTTP データ転送 (一連の HTTP パケット) を記録してから<I>反復</I>します。この攻撃の最も一般的な目的は、認証をバイパスして、攻撃者が正当なユーザーになり済ますことです。</P>
<P>HTTP 反復攻撃のテストを行うには、次の手順が推奨されます。</P>
<UL>
<LI>ステップ 1: 攻撃のシナリオを理解する 
<LI>ステップ 2: 根本的な原因と対応策を分析する 
<LI>ステップ 3: テストおよび調査を開始する 
<LI>ステップ 4: テスト ケースを調整する</LI></UL>
<H1>ステップ 1: 攻撃のシナリオを理解する</H1>
<P>最初に、HTTP 反復攻撃の基本的な詳細を理解する必要があります。&nbsp; 次のシナリオでは、反復攻撃の 2 つの一般的な目的を描写します。</P>
<UL>
<LI>認証をバイパスするための反復攻撃。 
<LI>トランザクションを繰り返すための反復攻撃。</LI></UL>
<H2>認証をバイパスするための反復攻撃</H2>
<P>このシナリオ中では、あるユーザー (Bob) が電子メール アドレスとパスワードを提出することで Web アプリケーションに認証します。&nbsp; 攻撃者 (Eve) は Bob と Web アプリケーション間のネットワーク トラフィックをスニッフィングし、認証中 (ユーザーの検証) に交換された HTTP パケットが保存さます。&nbsp; Eve は次に Web アプリケーションとの HTTP 接続を開始し、(Bob の認証から) 保存された一連のパケットをサーバーに再送信 (反復) します。&nbsp; サーバーは Bob と間違えて、Eve がアプリケーションに入ることを許可します。</P>
<P><IMG src="about:../../../LibrariesImages/4871408b-998c-4505-9b94-ce8e63c88b22/DibujoA.jpg"></P>
<P>図 1 - Eve が Bob と Web サーバー間のトラフィックをスニッフィングして、認証パケットを保存します。</P>
<P><IMG src="about:../../../LibrariesImages/4871408b-998c-4505-9b94-ce8e63c88b22/DibujoB.jpg"></P>
<P>図 2 – Eve が Bob の認証パケットをアプリケーションに送信します。&nbsp;</P>
<P>詳細: </P>
<OL>
<LI>攻撃者が脆弱な Web アプリケーションを発見します。 
<LI>攻撃者は攻撃するクライアントを決定します。 
<LI>攻撃者は被害者とサーバー間の HTTP トラフィックをスニッフィングまたは監視します。 
<LI>攻撃者は被害者とサーバー認証プロセスのための HTTP パケットをキャプチャして保存します。 
<LI>攻撃者はサーバーとの HTTP 接続を開始します。 
<LI>攻撃者はキャプチャされたパケット (被害者の認証パケット) をサーバーに送信します。</LI></OL>
<H2>トランザクションを繰り返すための反復攻撃</H2>
<P>2 番目のシナリオでは、攻撃者の目的は認証のバイパスに加えて、アクションを実行することです。&nbsp; このシナリオ中では、攻撃者は HTTP クライアントとサーバー間のネットワーク トラフィックも傍受します。&nbsp; トラフィックの監視中、攻撃者は特定のトランザクションを表現するか、これらのパケットに関する特定の情報を保存するパケットをキャプチャして保存します。&nbsp; 攻撃者は次に脆弱なサーバー (これは Bob がスニッフィングした同じサーバーか、この脆弱性の影響を受けやすい他のサーバーであることが可能) に接続します。 最後に攻撃者は保存されたパケット (または保存されたパケット<A title="" style="mso-endnote-id: edn1" href="about:blank#_edn1" name=_ednref1>[i]</A>からの特定のデータを含む新しいパケット) を送信して、製品の購入やアカウント情報の変更などの特定のトランザクションを実施します。</P>
<P>詳細: </P>
<OL>
<LI>攻撃者が脆弱な Web アプリケーションを発見します。 
<LI>攻撃者は攻撃する被害者を決定します。 
<LI>攻撃者は実行するトランザクションを決定します。 
<LI>攻撃者は、考慮しているトランザクションに応じて、どのクライアントを攻撃するかを決定します。 
<LI>攻撃者は被害者とサーバー間の HTTP トラフィックをスニッフィングまたは監視します (このケースでは、最初の段階でパケットを取得するために使用されたサーバーとは異なるサーバーでも可能であることに注意してください)。 
<LI>攻撃者は HTTP パケットまたはパケットの特定の部分をキャプチャして保存し、後でそれらは不正トランザクションを実行するために使用されます。 
<LI>攻撃者は脆弱なサーバーとの HTTP 接続を開始します。 
<LI>攻撃者は保存されたパケットを反復、または新しいスニッフィングされるデータから作り上げられた特定の情報を含むパケットを送信して、被害者に代わって不正トランザクションを実行します。</LI></OL>
<H1>手順 2: 根本原因と緩和手段の解析</H1>
<P>反復攻撃のシナリオを理解したら、次の手順はそれらを発生させるものを解析することです。&nbsp; そのすることで、アプリケーションがこの攻撃に対して保護する方法についても学びます。&nbsp; セキュリティ脆弱性の根本原因を知ることは、設計と実装 (ソース コード) の両方においてそれらを特定することを助けます。 さらに、緩和手段の詳細を理解すると、ソース コードが入手できるときにバグが存在することが分かります。&nbsp; ソース コードへのアクセスを不足している場合、緩和技法を知ることは、このバグのセキュリティ テストをガイドすることに役立ちます。 不十分に実装された緩和手段は、HTTP 反復の脆弱性につながります。<B><I>&nbsp;</I></B></P>
<H2>根本原因</H2>
<P>このバグの原因は、HTTP システムが再使用されるデータに基づいて新しいアクションを実行することです。&nbsp; たとえば、上記の最初のシナリオで見られたように、再使用されたデータ (キャプチャされた被害者の認証パケット) に基づいて、サーバーは正当な新しいアクション (被害者として攻撃者を認証) を実行します。</P>
<H2>緩和手段</H2>
<P>Web サービスは<B><I>セッション トークン</I></B><I>の使用によって反復バグに対して保護することを選択できます。 </I>&nbsp;クライアントが電子メールとパスワードをサービスに送信する前に、クライアントとサーバーはセッション トークンを交換します。&nbsp; パスワードはサーバーに送信される前に、新しいセッション トークンでハッシュされます。&nbsp; サーバーはパスワードとセッション トークンをしているため、ハッシュを別に計算し、クライアントによって送信されたハッシュ値に対して比較します。&nbsp; 攻撃者は攻撃を実行するためにサーバーに接続する際に、新しいセッション トークンを受信します。&nbsp; 攻撃者は以前にキャプチャされたパスワード ハッシュをサーバーに送信しますが、攻撃者のセッション トークンが有効でないため、サーバーは認証を拒否します。&nbsp; サーバーは <B><I>nonce</I></B>(<U>n</U>umber used <U>once</U>) をメッセージ認証コード (MAC) とともに使用することで、反復攻撃を防ぐこともできます。&nbsp; MAC は nonce とパスワードのハッシュであるとともに、トランザクションの秘密鍵でもあります。&nbsp; サーバーは nonce、パスワード、およびトランザクション キーを知っているため、自分の MAC を計算し、その内部値を使用してクライアントを認証します。</P>
<P>もう 1 つの一般的な緩和手段は、<B><I>タイムスタンプ</I></B>の使用によるものです。&nbsp;&nbsp; 攻撃者がトランザクションの反復を使用する場合、サーバーはタイムスタンプが過去のものであることに気付き、反復攻撃を拒否します。 </P>
<P>アプリケーションは SSL を使用し、反復攻撃に対して保護することもできます。&nbsp; SSL 認証中、クライアントとサーバーはランダム データを使用して、特定の接続のための鍵を生成します。&nbsp; 各メッセージにはメッセージのシーケンス番号と接続鍵を含む MAC があります。&nbsp; 攻撃者は接続鍵を知らずに有効な MAC を計算することができません。 </P>
<H1>ステップ 3: テストおよび調査を開始する</H1>
<P>HTTP 反復攻撃の仕組み、およびそれが存在する理由について学んだ上で、セキュアおよびセキュアでない実装の両方をテストする必要があります。</P>
<H2>基本 HTTP 反復テスト</H2>
<P>次の手順は、HTTP 反復攻撃バグのテスト方法を描写します。</P>
<OL>
<LI>Wireshark や同様のネットワーク スニファを使用して、ネットワーク トラフィックのキャプチャを開始します (WebScarab を使用してパケットを反復することになるので、この手順でもそれを使用できます。)<A title="" style="mso-endnote-id: edn2" href="about:blank#_edn2" name=_ednref2>[ii]</A> 
<LI>ブラウザーを開いて、アプリケーション サイトにログインします。 
<LI>パケットのキャプチャを停止し、認証を扱う HTTP パケットを保存します。 
<LI>アプリケーション サイトからログアウトして、ブラウザーを閉じます。 
<LI>WebScarab の使用によるパケットの傍受を開始します。 
<LI>手順 2 を繰り返します。 
<LI>ログイン パケットがクライアント マシンから送信される前に、そのコンテンツを手順 5 で保存されたパケットのコンテンツで変更します。</LI></OL>
<P>予期される結果: サーバーは反復攻撃として 2 回目のログイン試行を認識し、クライアントのアカウントへのアクセスを拒否します。</P>
<P><IMG src="about:../../../LibrariesImages/4871408b-998c-4505-9b94-ce8e63c88b22/clip_image003.png"></P>
<P><B>図 1 – 最初のログインのリクエスト (有効なユーザーとして) を傍受して、ログイン パケット全体を記録します。</B></P>
<P><IMG src="about:../../../LibrariesImages/4871408b-998c-4505-9b94-ce8e63c88b22/clip_image004.png"></P>
<P><B>図 2 – 選択された Bob からの認証データを含む生データ (前の図) を交換してから、[変更の承認] をクリックします。</B></P>
<P>反復攻撃を生成する可能性のあるさまざまなサーバー レスポンスを理解することが重要です。 </P>
<H2>アプリケーションがタイムスタンプ、セッション トークン、または nonce を使用しているかの確認</H2>
<OL>
<LI>Wireshark または同様のツール (ここでも WebScarab が使用可能) を使用して、ネットワーク トラフィックのキャプチャを開始します。 
<LI>ブラウザーを開いて、アプリケーション サイトにログインします。 
<LI>ログイン プロセスのキャプチャを保存します。 
<LI>ネットワーク パケットを解析して、タイムスタンプ、セッション トークン、または nonce の何らかのインジケータを探します。&nbsp; </LI></OL>
<P>予期される結果: 認証中にアプリケーション サーバーがタイムスタンプ、セッション トークン、または nonce を使用します。&nbsp; 図 3 では、タイムスタンプと (nonce として理解できる) 固有の識別子を示す WebScarab キャプチャが示されています。</P>
<P>注意: これはアプリケーションが反復攻撃を防止するという明確なインジケータですが、この防止方法が実際に機能するかどうかを確認するために、以前のテストのようにこのパケットを反復する必要があります。</P>
<P><IMG src="about:../../../LibrariesImages/4871408b-998c-4505-9b94-ce8e63c88b22/clip_image005.png"></P>
<P><B>図 3 – タイムスタンプと nonce の使用を示す WebScarab キャプチャ</B></P>
<P><B><I></I></B></P>
<H2>サイトが SSL を使用しているかどうかを確認するテスト</H2>
<OL>
<LI>Wireshark または同様のツールを使用するネットワーク トラフィックのキャプチャを開始します。 
<LI>ブラウザーを開いて、アプリケーション サイトにログインします。 
<LI>Wireshark でログイン プロセスのキャプチャを保存します。 
<LI>Wireshark (または同様のツール) を使用して、「ssl」パケットのみを示すようにキャプチャ フィルタを設定します (図 4)。</LI></OL>
<P>予期される結果: サーバーは認証に SSL を使用し、SSL ハンドシェイクが見られます。&nbsp; </P>
<P><IMG src="about:../../../LibrariesImages/4871408b-998c-4505-9b94-ce8e63c88b22/clip_image006.png"></P>
<P><B>図 4 – タイムスタンプと nonce の使用を示す WebScarab キャプチャ</B></P>
<H1>ステップ 4: テスト ケースを調整する</H1>
<P>この手順では、この攻撃の追加のペイロードをテストする必要があります。&nbsp; たとえば、製品または特定サービスの購入などの、特定のトランザクションを記録します。&nbsp; 次に、有効なユーザー セッション外から (正当な認証なしで) トランザクションの反復を試行します。考慮していることに応じて、試行できる複数の反復攻撃があります。&nbsp; 次の攻撃を対象にしてください (これらは例です。 アプリケーションに関連する特定のシナリオをテストする必要があります)。</P>
<UL>
<LI>認証のバイパス。 
<LI>製品の購入。 
<LI>サービスの購入。 
<LI>保護されたドキュメントまたは機微なドキュメントの表示。</LI></UL>
<P>これらの必要な異なる攻撃に対して適切にテストするには、特定の一連のパケットを記録してから、これらのパケットのコンテンツをテスト中のアプリケーションに再送する必要があることに留意してください。&nbsp; 1 パケット以上の HTTP シーケンスを反復するために、WebScarab を使用し続けるか、または TCPReplay などのツールに切り替えることができます。</P>
<H1>結論</H1>
<P>Web アプリケーションまたはサービスをセキュアにする際には、反復攻撃をテストする必要があります。&nbsp; 反復攻撃の構造を理解することから始めます。&nbsp; HTTP 反復攻撃の防止方法を学ぶことで続行し、アプリケーションがこれらの防止方法のいずれかを使用するかを確認してください。&nbsp; 使用していない場合は、アプリケーションは恐らく手順 3 で説明された基本テストに失敗し、HTTP 反復の脆弱性に対して脆弱になります。&nbsp; 範囲が適切になるように、異なる緩和手段と防止メカニズムを必ずテストしてください。&nbsp; 最後に、異なるペイロードと反復攻撃として実行するトランザクションに基づいて、テスト ケース データを調整します。</P>
<DIV>
<HR>
</DIV>
<P><A title="" style="mso-endnote-id: edn1" href="about:blank#_ednref1" name=_edn1>[i]</A> 勧告: Sony の Instant Video Everywhere Service における反復攻撃の脆弱性。&nbsp; 2005-12-31。 <A href="http://www.iptel.org/ive_vulnerability">http://www.iptel.org/ive_vulnerability</A></P>
<P><A title="" style="mso-endnote-id: edn2" href="about:blank#_ednref2" name=_edn2>[ii]</A> WebScarab のダウンロード。 <A href="http://www.net-security.org/software.php?id=504">http://www.net-security.org/software.php?id=504</A></P>]]></Data>
  </Content>
</TeamMentor_Article>