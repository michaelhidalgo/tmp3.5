<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="953144721" Content_Hash="1168741535">
  <Metadata>
    <Id>aac7e3d0-4fc9-4d28-b3a3-56c7616330b3</Id>
    <Library_Id>00000000-0000-0000-0000-000000000000</Library_Id>
    <Title>資格情報の総当たり攻撃 (Brute Force Attack) をテストする方法</Title>
    <Category>認証</Category>
    <Phase>テスト</Phase>
    <Technology>Web アプリケーション</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<H1>適用対象</H1><UL><LI>ソフトウェアのアプリケーションとサービス</LI></UL><P>&nbsp;</P><H1>概要</H1><P>Web アプリケーションおよびその他のソフトウェアでは、一般的に何らかの認証の形式を使用して&nbsp;ユーザーを差別化し、ユーザー固有のプロファイル、ユーザー固有の銀行口座の詳細、管理領域など、アプリケーションのさまざまな領域にアクセスできるようにします。 攻撃者は一般的にクライアントとアプリケーション (サーバー) 間のネットワーク通信を盗聴して、クライアントの資格情報をクリア テキストでキャプチャしようと試行します。 しかしながら、スニッフィング攻撃が不可能であったり、攻撃者が資格情報の一部分のみしかキャプチャできない場合があります。 その場合、攻撃者は被害者の資格情報を検出するために多数の追加のユーザー名/パスワードの組み合わせを試行します。 資格情報の総当たり攻撃 (Brute Force Attack) には、自動化を使用して大量の可能性のある資格情報を送信することによって、アプリケーションの認証スキームを打破することも含まれます。</P><P>以下の手順に従って資格情報の総当たり攻撃 (Brute Force Attack) の脆弱性をテストします:</P><UL><LI>手順 1: 攻撃のシナリオを理解する<LI>手順 2: 原因と対策を分析する<LI>手順 3: テストと調査を開始する</LI></UL><P><B></B>&nbsp;</P><H1>手順 1: 攻撃のシナリオを理解する</H1><P>最初に、いくつかの一般的な資格情報の総当たり攻撃 (Brute Force Attack) のシナリオを理解する必要があります:</P><UL><LI>しらみつぶし探索攻撃<LI>辞書攻撃<LI>ルール ベース攻撃</LI></UL><P><B><I></I></B></P><H2><EM>シナリオ 1: しらみつぶし探索攻撃</EM></H2><P>しらみつぶし探索攻撃では、攻撃者は許容されているすべての文字と長さの範囲を使用することによって、資格情報変数のすべての順列を送信します。 たとえば、ユーザーを認証するために安全でない 4 桁の PIN を使用するアプリケーションについて考慮します。 総当たり攻撃 (Brute Force Attack) を実行するには、攻撃者は以下の方法で入力を送信します:</P><P>0000, 0001, 0002, . . . 9997, 9998, および 9999。</P><P>この場合、文字列の長さが 4 桁に固定されていて、許容される文字は 1 から 10 までのみのため、攻撃者は 10^4 の組み合わせのみを試行する必要があるだけです。 より安全なパスワード ポリシーを使用するアプリケーションでは、7 つの小文字または大文字が必要な場合があり、52^7、もしくは 1 兆以上の組み合わせになります。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </P><P>暗号化では、総当たり攻撃 (Brute Force Attack) は一般的に暗号鍵のしらみつぶし探索攻撃を意味します。 安全な暗号化されたシステムでは、任意の予測可能な期間ではしらみつぶし探索総当たり攻撃が不可能になる [i] ように鍵の長さは十分に長くする必要があります。 </P><H2><EM>シナリオ 2: 辞書攻撃</EM></H2><P>辞書攻撃では、攻撃者はパスワードとして使用されそうな言葉が含まれる辞書ファイルからユーザー名とパスワードのセットを試行します。 多くの場合、攻撃者はターゲットのユーザーに関して収集した追加の情報に基づいて辞書ファイルを変更します。 攻撃者は一般的に人気のあるスクリプトまたは <I>Brutus</I> や <I>Hydra</I> などのツールを使用して辞書攻撃を実行します。</P><H2><EM>シナリオ 3: ルール ベース攻撃</EM></H2><P>ルール ベース攻撃では、攻撃者はユーザー名、電子メール アドレス、誕生日などの被害者に関する情報を収集し、可能性のある値のセットを作成して使用します。 たとえば、ユーザー名に “zoo” や “pet” などの文字列が含まれている場合、パスワードのさまざまなリストは動物の名前に基づいて作成することができます。 1 巡目では、mouse、cat、dog など、正当な動物の単語のリストにすることができます。 2 巡目では、m0Us3、c@t、d0gのように母音を記号や数字に置き換えることができます。 被害者の誕生日が分かっている場合、3 巡目ではm0use1977 や c@td0g75! など、被害者の誕生年を含めることができます。 いずれの場合にも、攻撃者は事前定義されたルールを使用して可能性のあるパスワードのセットを作成し、攻撃中に使用します。</P><P>&nbsp;</P><H1>手順 2: 原因と対策を分析する</H1><P>総当たり攻撃をテストするための次の手順では、その原因と対処方法について理解します。</P><H2><EM>アカウントのロック ダウン</EM></H2><P>総当たり攻撃から保護するための一般的な方法は、ユーザー名を使用するログイン試行に複数回失敗したらアカウントをロックすることです。 しかしながら、この軽減策には不利な面があり、攻撃者によって正規ユーザーがロックアウトされてしまうサービス拒否&shy;状況を作り出してしまう可能性があります。 もう一つの不利な面は、ログイン試行を長い時間にわたって埋めてしまう攻撃が機能する可能性があることです。 また、攻撃者はアプリケーションが存在しないアカウントをロックできないという事実を使用して有効なユーザー名を利用することができます。 &nbsp;さらに、アプリケーションが IP アドレスに基づいてユーザーを認証する場合、攻撃者はこの対処方法を回避するために、IP アドレスをスプーフする場合があります。<B><I>&nbsp;</I></B></P><H2><EM>時間遅延の導入</EM></H2><P>これはアカウントのロックよりも優れた対処策で、ログイン プロセスにランダム遅延を追加します。 インターネット ユーザーは最大 2 秒までの遅延は気になりませんが、遅延によって総当たりツールの効率性は大幅に低下します。 以下のコードは OWASP [ii] から借用しましたが、すべての失敗したログイン試行にランダム遅延を追加します。</P><pre>private void AuthenticateRequest(object obj, EventArgs ea)<BR>{<BR>	HttpApplication objApp = (HttpApplication) obj;<BR>&nbsp;	HttpContext objContext = (HttpContext) objApp.Context; </pre><pre>	// If user identity is not blank, pause for a random amount of time<BR>	if ( objApp.User.Identity.Name != "")<BR>	{<BR>		Random rand = new Random();&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp; 		Thread.Sleep(rand.Next(minSeconds, maxSeconds) * 1000);<BR>&nbsp; 	}&nbsp;&nbsp; <BR>}</pre><P>もう一つの時間遅延オプションでは、ユーザーに送信するレスポンスに増分遅延を挿入します。 失敗したログイン試行の後の遅延の長さは、前の連続して失敗したログイン試行の数に基づきます。 たとえば、攻撃者が 2 つ目の間違ったパスワードを送信した場合、遅延は 1 秒だけです。 パスワードを 5 回間違った場合、遅延は 10 秒に増えます。 そして 100 回間違った時には、遅延は 30 分になります。 この軽減策はアカウントをブロックする必要がなく、総当たり攻撃ツールを使い物にならない状態にします。 しかし、これは長い時間にわたって総当たり攻撃を実行することによって克服される可能性があります。</P><H2><EM>さまざまな失敗ログイン動作を実行する</EM></H2><P>総当たり攻撃を停止するのに役立つ別の防御技術として、ログイン試行に数回失敗したら、アプリケーションの動作を少し変更するというのがあります。 たとえば、多くのツールは失敗したログイン試行については HTTP 401 エラーを表示するアプリケーションに依存しています。 アプリケーションが代わりに HTTP 200 エラーを表示してユーザーを失敗したログインページに移動させると、自動化された総当たりツールは混乱する可能性が高くなります。 さらに、開発者は攻撃者がログイン試行に任意の回数失敗したら、異なるエラー メッセージまたは HTTP コードを受け取るようにアプリケーションの動作を変更することができます。 </P><H2><EM>人的相互作用の証明を要求する</EM></H2><P>追加の防衛メカニズムには秘密の質問と CAPTCHA を使用することがあります。 CAPTCHA は「Completely Automated Public Turing Test to Tell Computers and Humans Apart (コンピュータと人間を区別する完全に自動化された公開チューリング テスト)」の略で、自動化された総当たり攻撃に対して強力な防御となります。 CAPTCHA ではユーザーに何らかの目視テストを表示します。通常は、テキストが含まれたビットマップ画像で、ユーザーにテキストに書かれている内容を質問します。 しかし、CAPTCHA の最近の攻撃では、この防御も回避されています [iii]。 さらに、CAPTCHA のテキスト認識に焦点を当てた研究では、インターネット サイトから CAPTCHA を回避することができる注目に値するアルゴリズムが作成されています [iv]。</P><P>もう一つの人的相互作用の証明は、ログイン試行に任意の回数失敗した後でアプリケーションがユーザーに秘密の質問を表示する場合に発生します。 秘密の質問は一般的に個人データで構成されていて、一般的な辞書攻撃には含まれず、しらみつぶし探索ツールでは予想外となっています。</P><P>総当たり攻撃からより完全に保護するために、開発者は上記のテクニックを組み合わせて使用する必要があります。 使用されるテクニックはアプリケーションのセキュリティ要件に応じて決定する必要があります。</P><P>&nbsp;</P><H1>手順 3: テストと調査を開始する</H1><P>総当たり攻撃のシナリオとそれらの原因と対処策について説明してきたので、次の手順では、利用可能なセキュリティ テスト ツールを使用して基本的な資格情報の総当たりテスト ケースを実行します。</P><H2><EM>しらみつぶし探索攻撃をテストする</EM></H2><P>以下の手順に従ってしらみつぶし探索の総当たり攻撃をテストします:</P><OL><LI>Brutus をダウンロードおよびインストールします (<A href="http://www.hoobie.net/brutus/">http://www.hoobie.net/brutus/</A>)。<LI>Brutus を実行します。 <LI>ターゲット URL と認証型を入力します。 <LI>[<B>パス モード</B>] ドロップダウン リストで、[<B>総当たり (Brute Force)</B>]を選択します。<LI>使用する文字の範囲を選択します。 <LI><B>[Start] (開始) </B>をクリックします。</LI></OL><P>予想される結果: Brutus は、すべての一致を [<B>肯定的な認証結果</B>] リストボックスに表示します。 図 1 を参照してください。</P><H2><EM>辞書攻撃をテストする</EM></H2><P>以下の手順を実行して、辞書攻撃をテストします。</P><OL><LI>Brutus をダウンロードしてインストールします (<A href="http://www.hoobie.net/brutus/">http://www.hoobie.net/brutus/</A>)。<LI>Brutus を実行します。 <LI>ターゲット URL と認証型を入力します。 <LI>[<B>パス モード (Pass Mode)</B>] ドロップダウン リストで、[ワード リスト (Word List)] を選択します。 <LI>任意のファイルで単語リスト ファイルを変更します。 <LI><B>[Start] (開始) </B>をクリックします。</LI></OL><P>予想される結果: 一致するものが存在する場合は、Brutus の [<B>認証の肯定結果 (Positive Authentication Results)</B>] リスト ボックスに表示されます。 図 1 を参照してください。</P><P><IMG src="|image|clip_image001.png"></P><P><B>図 1 - 肯定的な認証結果を示す Brutus (ユーザー名 = admin、パスワード = aaa)</B><B><I>&nbsp;</I></B></P><H2><EM>ルール ベース攻撃をテストする</EM></H2><P>以下の手順に従ってルール ベース攻撃をテストします:</P><OL><LI>被害者の個人情報を調べます (電子メール アドレス、ユーザー名、または誕生日)。 <LI>ルールのセットを展開して被害者の個人情報に基づいてパスワードのリストを作成します (シナリオ 3 で表示したように)。 <LI>前の手順からルールごとに出力されたパスワードのリストが含まれたテキスト ファイルを作成します。 <LI>Brutus をダウンロードしてインストールします (<A href="http://www.hoobie.net/brutus/">http://www.hoobie.net/brutus/</A>)。<LI>Brutus を実行します。 <LI>ターゲット URL と認証型を入力します。 <LI>[<B>パス モード</B>] ドロップダウン リストで、[単語リスト]を選択して [参照] をクリックします。 <LI>手順 3 で作成されたファイルを選択します。 <LI><B>[Start] (開始) </B>をクリックします。</LI></OL><P>予想される結果: 一致するものが存在する場合は、Brutus の [<B>認証の肯定結果 (Positive Authentication Results)</B>] リスト ボックスに表示されます。 図 1 を参照してください。</P><P>&nbsp;</P><H1>結論</H1><P>資格情報の総当たり攻撃では、被害者の本当の資格情報を検出するためにアプリケーションにユーザー名とパスワードの組み合わせを大量に送信することに依存します。 攻撃者はさまざまな攻撃ベクトルを使用してしらみつぶし探索や辞書攻撃などを含む、総当たり攻撃を実行することができます。 防衛メカニズムは、アカウントのロックアウトや時間遅延の挿入からアプリケーションの動作の変更や人的相互作用の証明の使用まで、多岐にわたります。 アプリケーションで総当たり攻撃の脆弱性をテストするために Brutus などのツールを使用する方法を学習することは重要です。 最後に、ルール ベース攻撃などの追加のテスト シナリオについて考慮することを忘れないでください。 </P><P>&nbsp;</P><DIV><HR></DIV><P>[i] <B>鍵サイズ。 </B>Wikipedia<B> </B><A href="http://en.wikipedia.org/wiki/Key_size">http://en.wikipedia.org/wiki/Key_size</A></P><P>[ii] <STRONG>総当たり攻撃 (Brute Force Attack) をブロックする</STRONG>。(OWASP) <A href="http://www.owasp.org/index.php/Blocking_Brute_Force_Attacks">http://www.owasp.org/index.php/Blocking_Brute_Force_Attacks</A></P><P>[iii] <B>CAPTCHA – 迂回</B>。Wikipedia <A href="http://en.wikipedia.org/wiki/CAPTCHA#Circumvention">http://en.wikipedia.org/wiki/CAPTCHA#Circumvention</A></P><P>[iv] <STRONG>CAPTCHA について</STRONG>。ネットワーク セキュリティ研究と AI。 <A href="http://network-security-research.blogspot.com/">http://network-security-research.blogspot.com/</A></P><P>&nbsp;</P><DIV><P>&nbsp;</P></DIV>]]></Data>
  </Content>
</TeamMentor_Article>