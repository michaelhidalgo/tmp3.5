<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-1743621502" Content_Hash="-1813286134">
  <Metadata>
    <Id>8b734358-e0ac-4554-8ff3-83079bee09e3</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>DoS 攻撃バグのテスト方法</Title>
    <Category>設計上の考慮事項</Category>
    <Phase>テスト</Phase>
    <Technology>Web アプリケーション</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用対象</h1>
  <ul>
    <li>ソフトウェアのアプリケーションとサービス</li>
  </ul>
  <p>&nbsp;</p>
  <h1>概要</h1>
  <p>ソフトウェア アプリケーションは、その資産と機密性と完全性、およびサービスの連続性を保護する必要があります。 DoS 攻撃では、攻撃者はアプリケーションまたはアプリケーションの環境が正当なユーザーに応答しない状態になるように強制します。&nbsp; DoS 攻撃は当初ネットワークに対して実行されていましたが、それからはアプリケーション レベルの攻撃に拡張されました。 この記事では、アプリケーション レベルの DoS 脆弱性のテストに焦点を当てます。</p>
  <p>以下の手順に従って、DoS 脆弱性のテストを実行します。</p>
  <ul>
    <li>手順 1: 攻撃のシナリオを理解する<li>手順 2: 原因と対策を分析する<li>手順 3: テストと調査を開始する<li>手順 4: 追加テストを実行する</li></li></li></li>
  </ul>
  <p>
    <b>&nbsp;</b>
  </p>
  <h1>ステップ 1: 攻撃のシナリオを理解する</h1>
  <p>DoS 脆弱性のテストにおける最初の手順は、一般的な攻撃シナリオを理解することです。</p>
  <ul>
    <li>アプリケーションをクラッシュさせる <li>アプリケーションを異常状態に陥るように強制する <li>不安定な環境を作成する</li></li></li>
  </ul>
  <p>
    <b>
      <i>
      </i>
    </b>&nbsp;</p>
  <h2>
    <em>シナリオ 1: アプリケーションをクラッシュさせる</em>
  </h2>
  <p>DoS の状況では、アプリケーションが一定期間不安定になるため、アプリケーションのクラッシュが生じます。&nbsp; 攻撃者は、アプリケーションが適切にエラーを処理するかどうかを確認するために、バッファ オーバーフロー、整数オーバーフロー、ゼロ除算、または他の例外を強制できます。 アプリケーションがこれらのエラーを処理しない場合、そのプロセスはセカンドチャンス例外を生成します (プログラムの停止直前にトリガーされる例外)。 セカンドチャンス例外は、構造化/デフォルト例外ハンドラー (SEH) によって処理され、次にそれはプロセスをキルし、すべてのアプリケーション ユーザーが一時的にアプリケーションを使用できなくなります。&nbsp; </p>
  <p>
    <b>
      <i>&nbsp;</i>
    </b>
  </p>
  <h2>
    <em>シナリオ 2: 異常状態になるように強制する</em>
  </h2>
  <p>アプリケーションはサービス提供を停止するのにクラッシュする必要がありません。 アプリケーションが予期されない状態に移行すると、それは役に立たなくなり、ユーザーへの応答を止める可能性があります。 たとえば、ターゲット アプリケーションで無限ループを生成する攻撃者は、アプリケーションのユーザーへの応答を拒否できます。 この状況は通常、アプリケーションが顧客の入力をループ インデックスとして使用する際に発生します。 攻撃者は、ループの抜け出しに時間がかかり過ぎるように、または全く抜け出ることがないように、悪意を持ってループ インデックスを変更できます。 結果として、アプリケーションは追加のユーザー リクエストを処理できなくなります。<b></b></p>
  <p>Dos では、攻撃者はアプリケーションをユーザーがアプリケーションにログインすることを防止する状態にすることができるため、アカウント ロックアウトも一般的な DoS 状況です。 攻撃は単純です。 攻撃者は、被害者のユーザー名の使用によるログイン試行の失敗を繰り返します。 アプリケーションは通常、このような種類の攻撃に対応するために、ロックアウト ポリシーと人間対話証明 (CAPTCHA など) を採用しています。</p>
  <p>アプリケーションを役に立たない状態に移行させようとする、さらなるアプリケーション レベルの DOS 攻撃には、攻撃者が他の脆弱性を使用して攻撃するものが含まれます。 たとえば、攻撃者はアプリケーション サイトのメイン ページに<i>ストアド クロスサイト スクリプティング</i>の脆弱性を見つける可能性があります。 攻撃者がアラート ボックスのプロンプトを表示する無限ループを含むスクリプトを保存した場合、そのサイトに訪れるユーザーに対して連続的なアラート ボックスのプロンプトが表示されてアプリケーションを使用できなくなります。 同様に、攻撃者は<i>アクティブ SQL インジェクション</i>攻撃を実行して、データベース テーブルを削除する可能性があります。</p>
  <p>&nbsp;</p>
  <h2>
    <em>シナリオ 3: 不安定な環境の引き起こし</em>
  </h2>
  <p>アプリケーションが動作する環境が不安定になった場合、アプリケーションは適切なサービスの提供に失敗する可能性もあります。 たとえば、メモリが少なくなった場合、エンド ユーザーのサービスの可用性と品質が影響を受ける可能性は高いです。 このシナリオでは、攻撃者は不安定なシステムを引き起こすために、安全でないメモリ割り当てやメモリ リークなどのアプリケーションのプログラミング エラーを使用するか、トランザクション フラッド攻撃を実行します。</p>
  <p>安全でないメモリ割り当ては、アプリケーションがユーザー入力を基にメモリを割り当てるときに起こります。&nbsp; 攻撃者は特定の入力を作り上げて、過剰なメモリ量を割り当てるようにアプリケーションを騙し、オペレーティング システムを不安定にさせます。 システムがメモリ不足な間は、アプリケーションはユーザー リクエストに適切に応答できません。</p>
  <p>メモリ リークはアプリケーションが未使用のメモリを適切に解放することに失敗する場合に起こります。 潜在的リークの知識を持つ攻撃者は、アプリケーションが開放されることのないメモリを割り当てるように強制する可能性があります。 特定のアクションを実行し続けることで、攻撃者はアプリケーションがすべての使用可能なメモリを消費するように強制し、それによって正当なユーザーへの応答を停止させることができます。</p>
  <p>トランザクション フラッドは、メモリとプロセッサ時間を消費するために、トランザクションを繰り返し提出することから成ります。 攻撃者は多くの場合、ストレス テスト ツールを利用して、トランザクション フラッド攻撃を実行します。 アプリケーションが脆弱な場合、攻撃者がトランザクションを提出している間にアプリケーションは不安定になり、正当なユーザー トランザクションに応答できなくなります。</p>
  <p>
    <b>&nbsp;</b>
  </p>
  <h1>手順 2: 原因と対策を分析する</h1>
  <p>DoS 脆弱性のテストを実行する次の手順は、なぜそれらが発生するか、およびそれらに対する保護方法を理解することです。</p>
  <h2>
    <em>アプリケーション クラッシュ</em>
  </h2>
  <p>アプリケーション クラッシュは、バッファ オーバーフロー、整数オーバーフロー、ゼロ除算、無効なハンドルの参照などが原因の未処理のセカンドチャンス例外によって発生します。&nbsp; アプリケーション クラッシュとその DoS 攻撃によるエクスプロイトに対して保護するには、開発者は上記の条件の説明を理解、適切にユーザー入力を処理、整数値を検証、メモリを注意して割り当て、および構造化例外処理を使用する必要があります。</p>
  <p>&nbsp;</p>
  <h2>
    <em>異常状態</em>
  </h2>
  <p>無限ループは、アプリケーションが DoS 状態に移行する原因になる場合があります。 このバリエーションは、攻撃者がループのインデックスを制御し、アプリケーションの実行制御がループから抜け出さない条件を生じさせます。 OWASP によって投稿された以下のコードを検討します [i]。</p>
 <pre>
  </pre>
 <pre>public class MyServlet extends ActionServlet {<br />&nbsp;&nbsp; public void doPost(HttpServletRequest request,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HttpServletResponse response)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws ServletException, IOException {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; . . . <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String [] values = request.getParameterValues("CheckboxField");<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Process the data without length check for reasonable range <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for ( int i=0; i&lt; values.length; i++) {&nbsp;&nbsp; // wrong<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // lots of logic to process the request<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; . . . <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp; }<br />&nbsp;&nbsp; . . . <br />}<br />&nbsp;</pre>
  <p>攻撃者は <i>CheckboxField</i> コントロールの値を多数渡すことで、サーバーがより大きな CPU とメモリの要求で機能を実行するように強制します。 これは簡単にアプリケーション サーバーの DoS 状態につながります。 この DoS バリエーションに対して保護するには、開発者はクライアントによって提供されたループ カウンターを合理的な範囲と照合する必要があります。 &nbsp;</p>
  <p>&nbsp;</p>
  <p>SQL インジェクションやクロスサイト スクリプティングなどの他のバグによって発生する追加の DoS 状態は、その特定の脆弱性に基づいて保護する必要があります。 たとえば、開発者はホワイト リスト、ストアド プロシージャ、およびパラメーター化されたクエリーを使用することで、SQL インジェクションに対して保護できます。 開発者は、インターネット クライアントに送信する前にすべてのユーザーによって提供されたスクリプト タグをエンコーディングすることで、クロスサイト スクリプティングに対して保護できます。</p>
  <p>&nbsp;</p>
  <h2>
    <em>不安定な環境</em>
  </h2>
  <p>安全でないメモリ割り当ては、アプリケーションがメモリ割り当て中に、クライアントによって提供された値をサイズとして使用すると発生します。 以下の例では、アプリケーションはクライアントの入力を配列サイズとして使用します。</p>
 <pre>int arraySize = Convert.ToInt32(Request.QueryString["sz"]);</pre>
 <pre>int ServerObject[] objArray = new ServerObject[arraySize]; // wrong!!</pre>
  <p>&nbsp;</p>
  <p>2 つ目の命令は、クライアント制御の変数を使用して、配列を割り当てます。 URL の <i>sz</i> パラメーターで大きな値を渡す攻撃者は、アプリケーションが極端に大きいメモリ ブロックを割り当てるように強制し、アプリケーションを DoS 状態にすることができます。 安全でないメモリ割り当てに対して保護するには、すべての配列を内部的に割り当てるか、配列を動的に割り当てる必要のある場所を割り当てることで、クライアントの入力が安全なメモリ割り当ての境界値内にあるかを確認する必要があります。 </p>
  <p>メモリ リークは、アプリケーションがリソースを割り当てて、使用が終了した後に適切に解放しないため発生します。 リークは、C/C++ でオブジェクトを割り当てまたは割り当て解除するときによく起こります。 開発者は <i>new、malloc、または HeapAlloc </i> などの関数を使用してメモリ オブジェクトを割り当てることがありますが、<i>delete、free、</i> または <i>HeapFree</i> を呼び出してオブジェクトをメモリから解放することを怠る場合があります。 このエラーを発見した攻撃者は、アプリケーションが複数の割り当てを行うように強制し、メモリを消費させて不安定なシステムを生じさせることができます。 もう 1 つの例は、データベース接続を使用する Web アプリケーションで発生します。 各データベース接続はメモリを要し、適切に閉じられない場合はメモリ リークに至る可能性があります。 開発者は、使用が終わったら直ちにすべてのデータベース接続を閉じて、他のオブジェクトをメモリから解放する必要があります。</p>
  <p>トランザクション フラッドに対して保護するには、開発者はしきい値を使用して特定のクライアントから発生するトランザクション数を制限する必要があります。 これを達成するには、何らかのクライアント認証が必要です。 たとえば、アプリケーションはクライアントの IP アドレスを使用することで、固有のクライアントであると特定する場合があります。 ただし、クライアントは IP スプーフィング攻撃を実行して、トランザクションが異なるクライアントから発生しているかのように見せることができます。 トランザクション フラッドに脆弱なアプリケーションでは、SSL/TLS または IPSec のようなよりセキュアな認証方式でしきい値を実装する必要があります。</p>
  <p>&nbsp;</p>
  <h1>手順 3: テストと調査を開始する</h1>
  <p>さまざまな DoS 攻撃のシナリオについて知り、それらの原因と保護対策も理解した上で、アプリケーションでそれらのテストを実行する必要があります。</p>
  <p>
    <b>
      <i>&nbsp;</i>
    </b>
  </p>
  <h2>
    <em>アプリケーション クラッシュのテスト: バッファ オーバーフロー</em>
  </h2>
  <p>アプリケーション クラッシュによる DoS バグのテストを実行するには、まずアプリケーションをデバッガに接続することから始めます。 バッファ オーバーフローなどのアプリケーション クラッシュは、非常に長い入力文字列やエスケープ文字と特殊文字などの間違った形式のデータが提出される際に発生します。 アンマネージ コード (C/C++) で書かれたインターフェースなどの、アプリケーションにおいて脆弱な可能性のあるすべての箇所を特定します。 さまざまな範囲の長さと文字の組み合わせを試行してください。 詳細については、次を参照してください。<i>バッファ オーバーフロー バグのテスト</i></p>
  <p>
    <b>
      <i>&nbsp;</i>
    </b>
  </p>
  <h2>
    <em>アプリケーション クラッシュのテスト: 整数オーバーフロー</em>
  </h2>
  <p>整数オーバーフローのテストは、整数がより小さな値に折り返される整数の加算を発生させる、大きな整数をアプリケーションにフィードさせることを試行することから成ります。 入力データを傍受し、任意の整数や数値を大きな値に変更することで、整数オーバーフローのテストを実行します。 予期されない整数値はアプリケーションをクラッシュさせる原因となることがあるので、これらのテスト中は必ずデバッガをアプリケーションに接続してください。 詳細については、次を参照してください。<i>整数オーバーフロー バグのテスト</i></p>
  <p>&nbsp;</p>
  <h2>
    <em>アプリケーション クラッシュのテスト: ゼロ除算/無効なハンドル</em>
  </h2>
  <p>ゼロ除算または無効なハンドルの参照によるアプリケーション クラッシュは、アプリケーションが不正確な形式の入力を受けたときに発生します。 この種類のクラッシュに対してテストするには、入力データの基底形式を理解することが重要です。 たとえば、ゼロ除算の強制を試行するには、整数の変数をゼロに変更するか、配列やパラメーター リストから要素を削除します。 アプリケーションがファイルやネットワーク パケットを入力として使用する場合は、入力データを除算するタグとオフセットを理解してください。 次に、オフセットをゼロ値に加え、エスケープ文字と特殊文字で上書きすることで、アプリケーションがゼロ除算および不正アクセス操作を実行するように強制することを試行します。 &nbsp;セカンドチャンス例外を捕捉するには、常にデバッガをアプリケーションに接続してください。 </p>
  <p>&nbsp;</p>
  <h2>
    <em>異常状態のテスト: 無限ループ</em>
  </h2>
  <p>無限ループのテストを実行するには、クライアントによって提供された値をループ カウンターとして使用するアプリケーションの箇所を探す必要があります。 パラメーター リストを示す可能性のある名前と値の組み合わせを探すことで、アプリケーションによって使用されるパラメーターのリストに項目の挿入を試行してください。 たとえば、以下の URL には、アプリケーションが while ループ内で構文解析する可能性のある、同様に名付けられたパラメーターのリストがあります。</p>
 <pre>http://example.com/processData.php?input1=a&input2=bc&input3=xz</pre>
  <p>非常に多数の名前と値の組み合わせを挿入することで、URL の変更を試行します。</p>
 <pre>http://example.com/processData.php?input1=a&input2=bc&input3=xz&input4=abc&input5=abc&input6=abc&input7=abc&input8=abc&input9=abc&input10=abc&input11=abc&input12=abc&input15=abc&input16=abc ...</pre>
 <pre>...<strong>&input9999998=abc&input9999999=abc</strong></pre>
  <p>攻撃が成功したかを確認するには、アプリケーションを第 2 のホスト (攻撃者とは異なる) からアプリケーションの使用を試行し、応答時間を測ります。</p>
  <p>&nbsp;</p>
  <h2>
    <em>異常状態のテスト: クロスサイト スクリプティング</em>
  </h2>
  <p>XSS の使用による DoS バグのテストを実行するには、アプリケーションで不安定な状態を生じさせる XSS スクリプトを挿入する必要があります。&nbsp; たとえば、以下の文字列を挿入します。</p>
 <pre>&lt;script&gt;while(true)alert('XSS');&lt;/script&gt;</pre>
  <p>これはユーザーにメッセージ ボックスで繰り返しプロンプトを表示します。 持続型 XSS バグがアプリケーションのメイン ページまたはプロファイル ページで存在する場合、ユーザーはアプリケーションを使用できない可能性があります。 XSS バグのテストを実行する方法について学習するには、次を参照してください。<i>クロスサイト スクリプティングのテスト</i></p>
  <p>
    <b>
      <i>&nbsp;</i>
    </b>
  </p>
  <h2>
    <em>異常状態のテスト: SQL インジェクション</em>
  </h2>
  <p>SQL インジェクションを使用して DoS バグのテストを実行するには、アプリケーションがデータベースからの依存テーブルの削除を生じさせる SQL インジェクションの文字列を実行する必要があります。 たとえば、以下の攻撃文字列を提出します。</p>
 <pre>x');DROP Table 'Accounts';--</pre>
  <p>これは、アプリケーションが <i>Accounts</i> テーブルを削除する原因となる可能性があります。 アプリケーションが正常に機能するのに、このテーブルに依存する場合、テーブルの削除はアプリケーションがユーザーに応答できなくなることにつながります。 SQL インジェクション バグのテストを実行する方法について学習するには、次を参照してください。<i>SQL インジェクション バグのテスト</i></p>
  <p>
    <b>
      <i>&nbsp;</i>
    </b>
  </p>
  <h2>
    <em>不安定な環境のテスト: 安全でないメモリの割り当て</em>
  </h2>
  <p>安全でないメモリの割り当てのテストを実行するには、最初にアプリケーションでサイズ値が取得される箇所を探します。 アプリケーションによってサイズを計算するために使用される変数やパラメーターを見つけたら、それを非常に大きな値に変更します。 次に、別の操作を実行して、変更された値を提出した前と同じようにアプリケーションが応答するかどうかを確認します。 アプリケーションが遅くなった場合、それは提出した大きな値がアプリケーションによって内部的に使用され、DoS 攻撃が可能であることを明らかに示しています。</p>
  <p>&nbsp;</p>
  <h2>
    <em>不安定な環境のテスト: メモリ リーク</em>
  </h2>
  <p>メモリ リークは、アプリケーションの機能テストの一部として、テストする必要のある一般的なプログラミング エラーです。 メモリ リークを検出するために、IBM Rational Purify と Compuware BoundsChecker など、さまざまなツールが使用されます。 さまざまな文字列の長さの範囲を提出すること、およびアプリケーションをさまざまな負荷条件を適用することで、メモリ リークのテストを実行します。 Windows <i>タスク マネージャ</i>や UNIX <i>top</i> などのオペレーティング システム ツールを使用して、テスト中のアプリケーションによって消費されているメモリ量を確認できます。</p>
  <p>&nbsp;</p>
  <h2>
    <em>不安定な環境のテスト: トランザクション フラッド</em>
  </h2>
  <p>トランザクション フラッドのテストを実行するには、<i>タスク マネージャ</i> や UNIX <i>top</i> などの CPU/メモリ監視ツールを使用します。 サーバーによって消費される CPU とメモリ量を確認しながら、単一クライアントにトランザクションを無限ループで提出させます。 単一クライアントがトランザクションを行って、CPU とメモリ使用率が高くなった場合、アプリケーションは恐らくトランザクション フラッド DoS 攻撃に対して脆弱です。</p>
  <p>&nbsp;</p>
  <h1>手順 4: 追加テストを実行する</h1>
  <p>基本的な DoS テスト ケースの実行方法を学んだ上で、 DoS バグ検出の学習における最終手順は、さまざまなアプリケーション レベルのシナリオをテストし、既存のテスト自動化が DoS 攻撃をカバーするように拡張することです。</p>
  <h2>
    <em>さらなるアプリケーション レベルのシナリオ</em>
  </h2>
  <p>SQL ワイルドカードなどのアプリケーション固有のコマンドの使用によって DoS 攻撃を開始することが可能です。 SQL ワイルドカードは、クエリーの実行を遅め、より多くのサーバー リソースを消費させます。 詳細については、OWASP の <i>SQL ワイルドカードのテスト</i>、および OWASP のDoS 攻撃のテスト [ii] メイン ページにある追加のアプリケーション レベルのシナリオ (アプリケーション レベルの DoS 攻撃を取り上げています) をお読みください。&nbsp; </p>
  <h2>
    <em>自動化の拡張</em>
  </h2>
  <p>最後に、アプリケーション レベルの DoS テストをカバーするように、既存の自動化を拡張します。&nbsp; この記事で示されているテスト ケースをテスト スイートおよび現在のチェックに追加します。 DoS テストの自動化は、複数の範囲と文字の組み合わせで、手動で実行できる以上の多数のケースを実行することが可能になるため、役に立ちます。</p>
  <p>&nbsp;</p>
  <h1>結論</h1>
  <p>DoS バグは、正当なユーザーによるアプリケーションの使用を止めます。 DoS 攻撃は通常アプリケーションをクラッシュさせることで達成され、アプリケーションを異常状態に陥らせたり、不安定な環境を生じさせたりします。 DoS バグのさまざまなバリエーションに加え、その原因と対策について理解することは重要です。 DoS バグのテストは、バッファと整数のオーバーランなどの他のセキュリティと非セキュリティ バグ、およびメモリ リークのテストに依存します。 DoS バグをカバーするように、既存のテスト自動化を拡張します。 </p>
  <p>&nbsp;</p>
  <br />
  <hr />
  <div>
    <p>[i] <b>ループ カウンターとしてのユーザー入力のテスト</b>. (OWASP) <a href="http://www.owasp.org/index.php/DoS_Testing:_User_Input_as_a_Loop_Counter">http://www.owasp.org/index.php/DoS_Testing:_User_Input_as_a_Loop_Counter</a></p>
    <p />
  </div>
  <div>
    <p>[ii] <b>DoS 攻撃のテスト</b>。(OWASP)&nbsp; <a href="http://www.owasp.org/index.php/Testing_for_Denial_of_Service">http://www.owasp.org/index.php/Testing_for_Denial_of_Service</a></p>
  </div>
  <div>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>