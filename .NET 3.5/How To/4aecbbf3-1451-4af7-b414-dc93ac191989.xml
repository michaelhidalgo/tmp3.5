<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1266550597" Content_Hash="819201222">
  <Metadata>
    <Id>4aecbbf3-1451-4af7-b414-dc93ac191989</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>ASP.NET 内にセッション推測のバグがないかどうかテストする方法</Title>
    <Category>認証</Category>
    <Phase>テスト</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>ASP.NET 3.5</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>
    <span>要約</span>
  </h1>
  <p>ASP .NET アプリケーションは、認証と認可の決定をユーザーの次の活動と関連付けるためにセッションを使用します。<span>&nbsp; </span>セッションは、セッション識別子(またはセッション ID)を使用して追跡記録され、アプリケーションの一部エリアへアクセスを許可するかまたは特別なトランザクションを行う以前に認証されていたか確認します。 <span>&nbsp;</span>たとえばオンライン バンキング アプリケーションでは、クライアントが自分の口座明細にアクセスしたり、または送金を行うことを許可する前に、有効なセッション ID を要求します。<span>&nbsp; </span>アプリケーションは一般的に、クライアントのログイン時にその Credential 情報をチェックしてから、セッション ID を作成し割り当てます。<span>&nbsp; </span>その後､クライアントが様々なページをブラウズするかまたは特定の機能性を実行できるようにする前に、アプリケーションはクライアントのセッション IDのサーバのコピーに対するクライアントのリクエストで送信されたセッション ID をチェックし､それが適合する場合はリクエストを許可します｡ </p>
  <p>セッション予測攻撃中、攻撃者は、パターンを発見しようとして、新しいセッション識別子を作成するためにアプリケーションが使用するアルゴリズムを観察します。<span>&nbsp; </span>攻撃者の目的は、ユーザーの権限を借用または詐称するため、別のユーザーに対応する有効なセッション ID を予測できるようにすることです。<span>&nbsp; </span></p>
  <p>以下の手順に従って、セッションの推測バグをテストすることをお勧めします。</p>
  <ul>
    <li>手順 1: 攻撃のシナリオを理解する<li>手順 2: 原因と対策を分析する<li>手順 3: テストと調査を開始する<li>手順 4: 追加テストを実行する</li></li></li></li>
  </ul>
  <p>&nbsp;</p>
  <h1>
    <span>手順 1: 攻撃シナリオの理解</span>
  </h1>
  <p>セッション予測バグ テストの最初のステップは、その攻撃のシナリオを識別することです。<span>&nbsp;&nbsp; </span></p>
  <p>セッション予測を検討する前に、インターネット アプリケーションはどのように、またなぜ、セッション識別子を使用するのかを理解することが重要です。<span>&nbsp; </span>電子商取引サイトなどのインターネット アプリケーションでは、クライアントがアプリケーションにログインするために有効なユーザー名とパスワードを入力する必要があります。<span>&nbsp; </span>アプリケーション中をナビゲートし、トランザクションを実行する際に、クライアントが Credential 情報を再入力するように指示するのを回避するために、アプリケーションはログインしたクライアントにセッション ID を作成し、すべての要求でクライアントの信頼性を確認するために定期的にそれをチェックします。<span>&nbsp;&nbsp; </span></p>
  <p>ログイン成功後、新しいセッション ID が通常、 Cookie として（Set- Cookie ヘッダーを使用して）、または URL 内でクライアントに送信されます。<span>&nbsp; </span>クライアントがセッション ID を受け取れば､将来の HTTP リクエストでそれを送信します。</p>
  <p>詳細: </p>
  <ol>
    <li>クライアントは、アプリケーションのリクエストに応じて有効なユーザー名とパスワードを入力します。<li>アプリケーションは、セッション ID を作成し、クライアントへ送信します。<li>クライアントは、セッション ID を受け取ります｡<li>クライアントは、認証を要求するアプリケーションにHTTP(s) リクエストを行い､そこには手順 4 で受け取ったセッション ID が含まれています。<li>アプリケーションは、クライアントが送信したセッション ID が有効であるかチェックし､有効なセッション ID 値に基づいてリクエストに応答します。</li></li></li></li></li>
  </ol>
  <p>セッション予測攻撃は、攻撃者がターゲット インターネット アプリケーションを選択することから始まります。<span>&nbsp; </span>攻撃者は、まずアプリケーションのセッション ID 生成スキームを監視します。<span>&nbsp; </span>攻撃者は、インクリメント文字やタイムスタンプ、またはセッション ID で使用されるクライアント名の一部など、収集されたセッション ID 内のパターンを探します。<span>&nbsp; </span>攻撃者が弱いセッション ID の生成アルゴリズムを発見した場合、彼らはセッション ハイジャック攻撃中に有効なセッションを予測することができるかもしれず、それによって現在のセッション ID を予測値と置き換えることができます。<span>&nbsp; </span>アプリケーションがセッション ハイジャックに対して脆弱な場合、攻撃者はログインしている別のユーザーとして偽ることができます。 <span>&nbsp;&nbsp; </span></p>
  <p>詳細: </p>
  <ol>
    <li>攻撃者がネットワーク トラフィックの監視を開始します｡<li>攻撃者が、有効なユーザー名とパスワードを入力して目標アプリケーションにログインします。<li>アプリケーションは、セッション ID を作成し、クライアントへ送信します。<li>攻撃者が、将来のセッション ID を予測することが可能な場合は有効なセッション ID を決定できるまで手順 2 と 3 を繰り返します｡ <li>手順 4 が、セッション予測が可能であることを示す場合は、<i>セッション ハイジャック</i>攻撃のところを続けてください。 </li></li></li></li></li>
  </ol>
  <p>攻撃は、有効なセッション ID を予測できるかを判断した後、手順 4 で終了することに注意してください。<span>&nbsp; </span>エクスプロイトに耐えられないかをテストするには、セッションをハイジャックする必要があります。<span>&nbsp; </span></p>
  <p>&nbsp;</p>
  <h1>
    <span>ステップ 2 : 原因分析と対策</span>
  </h1>
  <p>セッションの推測バグをテストするための次の手順は、バグの原因や保護方法を理解することです。</p>
  <h2>
    <span>
      <em>セッションの推測バグの原因</em>
    </span>
  </h2>
  <p>ASP .NET は、<i>セッション</i> オブジェクトを使用して、認証とセッション ID 管理のためのフレームワークを提供します。<span>&nbsp; </span>しかし、開発者もまた、 Cookie を使用して独自のフレームワークを実装するかもしれません。<span>&nbsp; </span>最初、セッション ID は以下のように設定されています。</p>
 <pre>
    <span>Response.Cookies["Session-ID"].Value = "user01";</span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>次に、クライアントによるリクエストの実行を許可する前に、コードによって Cookie の値が期待値と照合されます。</p>
 <pre>
    <span>if (Request.Cookies["Session-ID"].Value == "user01")<br />{<br />	Response.Write("authenticated");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />}</span>
    <span>&nbsp;</span>
  </pre>
  <p>開発者<span>&nbsp;</span>は、独自のセッション ID の生成スキームを実装すべきではありません。予測を容易にする低エントロピーと同様の危険な状態に悩まされる可能性があるためです。</p>
  <h2>
    <em>低エントロピーのセッション ID</em>
  </h2>
  <p>セッション予測バグの主な原因は、セッションが十分ランダムではない、すなわちエントロピーが低いことです。 <span>&nbsp; </span>例えば､セッション ID 生成アルゴリズムはこのようなユーザー セッションを作成する場合があります:</p>
 <pre>
    <span>AWEG00013BCD<br />AWFG00014BCD<br />AWGG00015BCD<br />AWHG00016BCD<br />AWIG00017BCD</span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>上記のセッション ID を分析することにより、攻撃者は次のようなことを簡単に予測できます。</p>
 <pre>
    <span>AWJG00018BCD<br />AWKG00019BCD<br />AWLG00019BCD&nbsp;</span>
  </pre>
  <p>低エントロピーのセッション ID には、長さが短すぎるセッションや推測可能なタイム スタンプを使用するセッションなどが含まれます。</p>
  <h2>
    <em>セッション ID として使用するクライアントの資格情報</em>
  </h2>
  <p>一部のアプリケーションは、クライアントの Credential 情報を使用してセッション ID を作成します。<span>&nbsp; </span>例えば､アプリケーションは、クライアントの電子メールアドレスを使用してセッション ID  を作る場合があります:</p>
 <pre>
    <span>sid=user01@example.com</span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>攻撃者は、ターゲット クライアントの電子メールとそのセッション ID を置き換えることで、攻撃の実行に成功することができるかもしれません。<span>&nbsp; </span>アプリケーションは、追加の高エントロピーの文字列と組み合わされている場合にのみセッション ID の一部としてクライアントの信任状を使用することをお勧めします｡</p>
 <pre>
    <span>session-id:&nbsp;<span> </span>user01<span>&nbsp;&nbsp;&nbsp;&nbsp; </span><strong>Wrong</strong></span>
  </pre>
 <pre>
    <span>session-id: AA932n90f20dfwuih1QAxxy-user01&nbsp;<span> </span><span>&nbsp;&nbsp;&nbsp; </span><strong>OK</strong></span>
  </pre>
  <p>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>
  </p>
  <h2>
    <span>
      <em>セッションの推測バグの対策</em>
    </span>
  </h2>
  <p>ASP NET アプリケーションでセッション予測攻撃から保護するために、開発者は、ASP.NET が組み込まれたセッション機能を活用する必要があります。<span>&nbsp; </span>ASP.NET は自動的にセッション予測攻撃からそれを保護するために十分なエントロピー（120 ビット）でセッション ID を作成することができます。<span>&nbsp; </span><span>&nbsp;&nbsp;</span></p>
  <p>セッション予測に対する保護がセッション ハイジャックに対する保護とは異なることに注意してください。<span>&nbsp; </span>セッション ハイジャックの保護は、認証や SSL など、その他の防御の使用が含まれているのに対し、セッション予測の保護は、高エントロピーの セッション ID の作成に焦点を当てます。<span>&nbsp; </span>セッション ハイジャックの脆弱性に関する詳細は､<i>セッション ハイジャック バグのテスト</i>の記事を参照してください｡</p>
  <p>&nbsp;</p>
  <h1>
    <span>ステップ3：テストと探索を開始</span>
  </h1>
  <p>セッション予測攻撃のシナリオ、またそれを引き起こす原因と防御方法についても理解されましたので、基礎的なテストケースを実践して結果を調べてみる必要があります。</p>
  <p>
    <b>
      <i>低エントロピーのセッション ID のテスト</i>
    </b>
  </p>
  <p>以下の手順を実行します。</p>
  <ol>
    <li>Burp suite をダウンロードして実行し、インターセプトをオフにする<li>Burp プロキシを使用するためweb ブラウザーを開いて接続オプションを設定する<li>有効なユーザー名とパスワードで目標アプリケーションにログインしてください｡<li>アプリケーションがセッション ID に応答するまで待機してください(クッキー、URLまたは本文にある可能性があります)<li>Burp suite で「プロキシ」タブおよび「履歴」サブタブをクリックする<li>HTTP 認証要求を特定して右クリックし、 「Sequencer に送信」を選択する<li>Burp suite で「Sequencer」タブおよび「Live capture」サブタブをクリックする<li>リクエストを選択し、セッション ID を識別してください｡<li>「start capture」をクリックし、Burp sequencer がレポートを表示するまで待つ</li></li></li></li></li></li></li></li></li>
  </ol>
  <p>予想される結果：セッション ID は 128 ビット以上で、そのうち少なくとも64ビットが有効エントロピーでなければなりません。<span>&nbsp; </span>Burp sequencer が中程度または貧弱な評価を報告する場合、アプリケーションはセッション予測に対して脆弱です。</p>
  <p>セッション ID エントロピーをテストするための Burp sequencer 使用方法についての詳細は、簡単な手順とスクリーンショットのある Burp sequencer のヘルプ ページを参照してください:<span>&nbsp; </span><a href="http://portswigger.net/sequencer/help.html">http://portswigger.net/sequencer/help.html</a></p>
  <h2>
    <em>セッション ID 内にあるクライアントの資格情報のテスト</em>
  </h2>
  <p>以下の手順を実行します。</p>
  <ol>
    <li>Wireshark をダウンロードして実行する<li>ウェブブラウザを開いてください。<li>有効なユーザー名とパスワードで目標アプリケーションにログインしてください｡<li>Wireshark で、セッション ID を特定する<li>セッション ID 中でクライアントの信任状を探してください。</li></li></li></li></li>
  </ol>
  <p>予想される結果:<span>&nbsp; </span>固定文字列を予測することは容易であるので、十分な量のランダム データも存在しているのでない限り、セッション ID はクライアントの Credential 情報、ユーザー名、またはその他の固定文字列で構成されるべきではありません。<span>&nbsp; </span><span></span></p>
  <p>&nbsp;</p>
  <h1>
    <span>ステップ4：追加のテストを実行</span>
  </h1>
  <p>セッション予測攻撃のすべてのエントリ ポイントをカバーすることを確認してください。<span>&nbsp; </span>多くのアプリケーションは、一般的に Cookie にセッション ID を送信しますが、一部のアプリケーションでは、URL に隠された変数やパラメータなど他の方法を使用します。<span>&nbsp; </span>いずれの場合も、攻撃者はアプリケーションによって使用される場所を識別する必要があります。<span>&nbsp; </span>以下にはセッション ID を含む URL の例が表示されています。</p>
 <pre>
    <span>http://example.com/<strong>34i77i2af12xxz</strong>/example.aspx</span>
  </pre>
 <pre>
    <span>http://example.com/example.aspx?sid=<strong>34i77i2af12xxz</strong></span>
  </pre>
  <p>最初の例では、クッキーなしの ASP.NET が使用するもののようにセッション ID を URL ディレクトリ マッピングとして使用しますが、他方、第 2 例では URL パラメータを援用しています。</p>
  <p>以下のコードは､隠れ入力タグを使用する POST リクエストの変数として渡されるセッション ID を表示しています。</p>
 <pre>&lt;form action="/example.aspx" method="post"&gt;</pre>
 <pre>....<br />&nbsp;<br />&lt;input type="hidden" name="session-id" value="user01" /&gt;<br />&lt;input type="hidden" name="user-account" value="324802581" /&gt;<br />&nbsp;<br />&lt;input type="submit" name="Continue"&gt;<br />&lt;/form&gt;<br />&nbsp;</pre>
  <h1>
    <span>結論</span>
  </h1>
  <p>セッション予測プログラムのバグは、ASP.NET  組込セッションを使用せず、独自のセッション ID 生成スキームを実装する ASP .NET アプリケーションに影響を与えます。<span>&nbsp; </span>ASP.NET アプリケーションにおけるセッション予測の脆弱性をテストするためには、セッション予測攻撃がどのように実行されるのかと同様に、何が原因で、ASP.NET でそれからどのように保護するのかを理解する必要があります。<span>&nbsp; </span>そして、セッション ID 生成のエントロピーを測定し、クライアントの Credential 情報のような固定文字列だけで構成されるセッション ID に対してテストする必要があります。<span>&nbsp; </span>最後に、URL および隠れ入力タグを含めてセッション予測バグ用の様々なエントリ ポイントをすべて対象としているか確認してください｡</p>
  <p>&nbsp;</p>]]></Data>
  </Content>
</TeamMentor_Article>