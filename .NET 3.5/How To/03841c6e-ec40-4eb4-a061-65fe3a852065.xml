<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-1276721287" Content_Hash="1228471390">
  <Metadata>
    <Id>03841c6e-ec40-4eb4-a061-65fe3a852065</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>URL リダイレクション バグのテスト方法</Title>
    <Category>入力とデータの検証</Category>
    <Phase>テスト</Phase>
    <Technology> 任意</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>OWASP</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用対象</h1>
  <p>
    <b>
    </b>
  </p>
  <ul>
    <li>Web アプリケーション</li>
  </ul>
  <p>
    <b>
    </b>
  </p>
  <h1>概要</h1>
  <p>Web アプリケーションは、URL リダイレクションを利用して、Web クライアントを別の (大部分の場合、別のドメインの) URL アドレスにリダイレクトします。 また、アプリケーションは、リダイレクト ページを利用するなどの場合、URL リダイレクションをクライアントから見えないようにします。 ただし、URL パラメータを利用して目標の URL 位置を指定するなどの場合は、クライアントに対して URL リダイレクションを暴露することがあります。 URL リダイレクション攻撃では、悪意のある目的で URL パラメータを使用して、URL リダイレクションをエクスプロイトします。 攻撃者は、この攻撃を実行するために、悪意のあるリンクを作成して、そのリンクに従った Web クライアントを悪意のあるサイトにリダイレクトしようとします。 </p>
  <p>次の手順に従って、URL リダイレクション バグをテストします。</p>
  <p />
  <ul>
    <li>手順 1: 攻撃のシナリオを理解する<li>手順 2: 原因と対策を分析する<li>手順 3: テストと調査を開始する<li>ステップ 4: テスト ケース データを微調整する</li></li></li></li>
  </ul>
  <p />
  <p />
  <h1>手順 1: 攻撃のシナリオを理解する</h1>
  <p />
  <p>最初に、URL リダイレクション バグの構造について理解する必要があります。 攻撃者の主な目的は、URL リダイレクション攻撃時に、標的となる Web クライアントを悪意のあるサイトにリダイレクトすることです。 これを実行するために、アプリケーションのドメイン名で始まっているが、URL パラメータが含まれているリンクを Web クライアントに送信します。 クライアントがこのリンクをクリックすると、最初にクライアントのブラウザーが脆弱なアプリケーションにリダイレクトされ、次にそのアプリケーションが、クライアントを URL パラメータが指示する悪意のあるサイトにリダイレクトします。 この攻撃が成功するためには、次の 2 つの条件を満たす必要があります。1 つ目は、攻撃者が、クライアントを URL パラメータが指示する悪意のあるサイトにリダイレクトする脆弱なアプリケーションを見つける必要があるということです。2 つ目は、標的となる Web クライアントが、悪意のあるリンクをクリックする必要があるということです。 </p>
  <p>詳細: </p>
  <p />
  <ol>
    <li>攻撃者は、Web クライアントを URL パラメータ (または、疑問符やアスタリスクなどの特殊コントロール文字) が指示するページにリダイレクトする、標的の Web アプリケーション内にある URL を見つけます。 <li>攻撃者は、(ステップ 1 で見つけた) 正当な URL を持つリンクを標的の Web クライアントに送信します。ただし、攻撃者は、リンク先のページをすでに自分が選択したページに変更しています。 <li>標的のクライアントが、悪意のあるリンクをクリックします。 これにより、標的のクライアントの Web ブラウザーが、攻撃者の用意した悪意のあるページにリダイレクトされます。</li></li></li>
  </ol>
  <p />
  <h1>手順 2: 原因と対策を分析する</h1>
  <p />
  <p>次に、URL リダイレクション バグの原因とその防御方法について理解する必要があります。 これらを理解することは、ソース コードでこの問題を特定して、テスト ケース実行の準備をする場合に役に立ちます。</p>
  <p />
  <p>Web アプリケーションでは、さまざまな目的で URL リダイレクションが使用されます。 たとえば、アプリケーションがページを別の場所に移動させる場合に、リダイレクトを使用して、クライアントを新しいページに送信します。 アプリケーションは、この処理を自動的に行うために、PHP アプリケーションの <i>response.redirect</i> などのメソッドを呼び出すコードを使用して、内部でリダイレクションを制御します。 ただし、一部のアプリケーションでは、URL リダイレクションのロジックを外部のクライアントに暴露してしまうことがあります。 たとえば、アプリケーションが、リダイレクト先の場所として URL パラメータを受け取るリダイレクト  ページを利用する場合があります。 次の URL について考えてみます。</p>
 <pre>http://example.com/navigate.php?redir=<strong>http://example.com/login.php</strong></pre>
  <p />
  <p>この Web アプリケーションは、URL パラメータ <i>redir</i> を利用して、目的のリダイレクト サイトを制御しています。 攻撃者は、この処理を利用して、<i>example.com</i> を信頼している Web クライアントを操作し、次のリンクをクリックさせます。</p>
 <pre>http://example.com/navigate.php?redir=<strong>http://attackers.com/gotcha.php</strong></pre>
  <p />
  <p>アプリケーションが脆弱であると、上のリンクをクリックしたクライアントを攻撃者のドメインにリダイレクトしてしまいます。 このような攻撃が可能になるのは、アプリケーションが、URL を介して Web クライアントに URL リダイレクション ロジックを暴露してしまうか、または、実際にリダイレクトする前にリダイレクト先のコンテンツをチェックしないことが原因で、宛先が悪意のある Web サイトに置き換えられてしまうためです。 </p>
  <p />
  <p>このバグを防止するために、開発者は、 URL リダイレクションの制御を外部のクライアントから見えないようにします。 URL パラメータを介して URL リダイレクションを暴露する必要がある場合は、アプリケーションにおいて、リダイレクトする前にリダイレクト先を適切に検証しておく必要があります。 開発者が、許可されるすべてのリダイレクト先を含むホワイト リストを実装して、このリストに含まれていないサイトへのリダイレクトを許可しないコードをアプリケーションに追加することをお勧めします。 </p>
  <p>この攻撃を防止する別の方法として、任意のサイトにリダイレクトされることをクライアントに警告して、リダイレクトさせないようにする方法があります。 この方法は、URL リダイレクション攻撃に対抗するための手法として、現在 Yahoo が採用しています [i]。 下のリンクをクリックすると、ブラウザーは Yahoo のページに移動しますが、クライアントの判断でサイトを表示するように警告されます。</p>
  <p />
  <p>
    <a href="http://us.ard.yahoo.com/*http://google.com">elx:link0}http://us.ard.yahoo.com/*http://google.com</a>
  </p>
  <p />
  <p />
  <h1>手順 3: テストと調査を開始する</h1>
  <p>これで、URL リダイレクション攻撃の理論的な側面のレビューは終了です。次に、テスト ケースに従って、現在のアプリケーションで確認してみます。 </p>
  <h2>
    <em>URL リダイレクションのテスト</em>
  </h2>
  <p>次の手順に従って、URL リダイレクションをテストします。</p>
  <ol>
    <li>
      <p>URL リダイレクションを実行している、アプリケーションのページまたは要求を見つけます。 リダイレクション要求時に使用される URL を記録します。 組み込まれている URL を見つけるために、アプリケーションが URL を利用する仕組みを分析することをお勧めします。 別の URL 内に含まれている URL が、URL リダイレクションの手がかりになります。 </p>
      <li>
        <p>疑いのある URL を見つけたら、その URL の中で、アプリケーションが標的のリダイレクト 場所を渡している箇所を見つけます。 アプリケーションは、指定した URL パラメータで標的の URL を渡すことができます。</p>
 <pre>http://domain/navigate.php?redir=http://example.com/login.php </pre>
        <p>または、疑問符やアスタリスクなど (別の記号も使用できます) の特殊文字の後にその URL を追加します。</p>
 <pre>http://domain/navigate.php?http://example.com/login.php </pre>
        <li>
          <p>標的のリダイレクト URL を別の URL (www.google.com など) に変更し、Web ブラウザーを使用して要求を発行します。</p>
 <pre>http://domain/navigate.php?http://www.google.com</pre>
        </li>
      </li>
    </li>
  </ol>
  <p>予想される結果: アプリケーションが、警告せずに、Web ブラウザーをステップ 3 で変更した標的の URL にリダイレクトした場合、このアプリケーションは、URL リダイレクション攻撃に対して脆弱であると判断されます。 </p>
  <p />
  <p />
  <h1>ステップ 4: テスト ケース データを微調整する</h1>
  <p />
  <p>URL リダイレクション攻撃では、標的のクライアントが悪意のあるリンクをクリックする必要があります。 ただし、リンクの一部が信頼できないものであることにインターネット クライアントが気付いた場合、このリンクをクリックすることを躊躇するはずです。 このため、アプリケーションにおいて、攻撃者が標的の URL を気付かれないように処理できる場合は、インターネット クライアントに対する URL リダイレクション攻撃のリスクが高くなります。 次の URL リンクについて考えてみます。</p>
  <p />
 <pre>
    <a href="http://trusted_domain/nav.php?redir=http://attacker.com/run.php">http://trusted_domain/nav.php?redir=http://attacker.com/run.php</a>
  </pre>
 <pre>
    <a href="http://trusted_domain/nav.php?redir=http://64.214.88.103/run.php">http://trusted_domain/nav.php?redir=http://64.214.88.103/run.php</a>
  </pre>
  <p>このリストは、すべてを網羅しているわけではありません。さまざまな URL パディング/マスカレイディング手法について、常に最新の情報を入手してください。</p>
  <p>ブラウザーのステータス バーに表示されている最初の URL は、クライアントにとって疑いのあるものに見えます。 3 番目の URL では、ドメイン名ではなく攻撃者のドメイン IP アドレスが使用されており、判別が困難になっています。 最後の URL は、最初の URL より疑いのあるようには見えませんが、URL リダイレクション バグがエクスプロイトされる可能性が高くなってます。 </p>
  <p />
  <p />
  <h1>結論</h1>
  <p>攻撃者は、URL リダイレクション攻撃を使用して、フィッシングまたはスプーフィングを行う目的で、Web クライアントを悪意のあるサイトに誘導します。または、クライアントのコンピュータを自動的に感染させようとするマルウェアが含まれるページに、標的のクライアントをリダイレクトします。 URL リダイレクションは、Web ページを移動または削除した場合やサイトのドメイン名を変更した場合など、Web クライアントを正当なサイトにリダイレクトする場合に有効で便利な手法ですが、 アプリケーションが、URL リダイレクションを Web クライアントに暴露したり、任意のドメインへのリダイレクションを許可したりすることもあるため、注意する必要があります。 この脆弱性をテストするには、URL に基づいてリダイレクトされる要求を見つけ、適切な手法で URL を変更する必要があります。 最後に、このバグがエクスプロイトされる可能性を高める URL のパディングや難読化を使用して、テスト ケースを微調整する必要があります。 </p>
  <p />
  <hr />
  <p />
  <p>[i] <b>URL リダイレクション攻撃とその例</b> (Paralliverse) <a href="http://log0.wordpress.com/2008/06/23/url-redirection-attack-with-examples/">http://log0.wordpress.com/2008/06/23/url-redirection-attack-with-examples/</a></p>]]></Data>
  </Content>
</TeamMentor_Article>