<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="805572248" Content_Hash="559476796">
  <Metadata>
    <Id>1cb4da28-0b0e-4f38-893b-3a841efa3637</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>デバッグの目的で例外詳細を伝えるためにData Contract を実装する方法</Title>
    <Category>エラーと例外の管理</Category>
    <Phase>実装</Phase>
    <Technology>WCF 3.5</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用対象</h1>
  <ul>
    <li>Microsoft® Windows Communication Foundation (WCF) 3.5 
<li>Microsoft Visual Studio® 2008</li></li>
  </ul>
  <h1>説明</h1>
  <p>次のステップは、デバッグ目的で例外の詳細を伝播するためのデータ コントラクトの実装方法を表示します。</p>
  <ol>
    <li>フォールト理由のメンバーを使用して DataContract を作成してください
<ol><pre> [DataContract]<br />    public class MyDCFaultException<br />    {<br />        private string _reason;</pre><pre>        [DataMember]<br />        public string Reason<br />        {<br />            get { return _reason; }<br />            set { _reason = value; }<br />        }<br />    }</pre></ol><li>以下のオペレーションのため、上の DataContract 型を使用して FaultContract を指定するサービス コントラクトを作成してください。
<ol><pre> [ServiceContract()]<br />    public interface IService<br />    {<br />        [OperationContract]<br />        [FaultContract(typeof(MyDCFaultException))]<br />        string DoSomeComplexWork();<br />    }</pre></ol><li>サービス オペレーションを実装してください。 サービス オペレーションに何かエラーがある場合、下のように MyDCFaultException タイプの FaultException をスローすることにより例外の詳細を送信してください。
<ol><pre>  public class Service : IService<br />    {    <br />        public string DoSomeComplexWork()<br />        {<br />           try<br />            {<br /> // some complex operations<br />            }<br />            catch (Exception exp)<br />            {<br />                MyDCFaultException theFault = new MyDCFaultException();<br />                theFault.Reason = "Some Error " + exp.Message.ToString();<br />                throw new FaultException&lt;MyDCFaultException&gt;(theFault);<br />            }<br />            return "No Error";<br />        }</pre></ol><li>クライアントのアプリケーションからサービス オペレーションを呼び出してください。 Detail.Reason プロパティを使用することにより元のサービス例外の理由を取得してください。
<ol><pre>  try<br />            {<br />                localhost.IService proxy = new localhost.ServiceClient();<br />                result = proxy.DoSomeComplexWork();<br />            }</pre><pre>            catch (FaultException&lt;localhost.MyDCFaultException&gt; ex)<br />            {<br />               result = "Exception: " + ex.Detail.Reason;<br />            }</pre><pre>            Console.WriteLine(result);<br />            Console.ReadLine();            <br />        }</pre></ol><li>サービス動作の serviceDebug エレメントにある IncludeExceptionDetailInFaults プロパティを使用して、マネージされた例外情報をクライアントに送ることもできます。 デフォルトではこの値は false ですが、デバッグおよび問題診断シナリオでは true  に変更できます。
<ol><pre>&lt;system.serviceModel&gt;<br />    &lt;services&gt;<br />        &lt;service name="MyService"<br />                         behaviorConfiguration="MyServiceBehavior"&gt;<br />        &lt;/service&gt;<br />    &lt;/services&gt;<br />    &lt;behaviors&gt;<br />        &lt;serviceBehaviors&gt;<br />            &lt;behavior name="MyServiceBehavior"&gt;<br />                &lt;serviceDebug includeExceptionDetailInFaults="true"/&gt;<br />            &lt;/behavior&gt;<br />        &lt;/serviceBehaviors&gt;<br />    &lt;/behaviors&gt;<br />&lt;/system.serviceModel&gt;<br /></pre></ol></li></li></li></li></li>
  </ol>
  <h1>その他のリソース</h1>
  <ul>
    <li>フォールト コントラクトの詳細は、<a href="http://msdn.microsoft.com/en-us/library/ms733721.aspx">http://msdn.microsoft.com/en-us/library/ms733721.aspx にある「コントラクトとサービスのフォールトを指定し処理する」を参照してください。</a></li>
  </ul>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>