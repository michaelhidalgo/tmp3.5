<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1420024716" Content_Hash="353845770">
  <Metadata>
    <Id>4f2c3692-7e87-4890-9753-71b860a95544</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>否認のバグのテスト方法</Title>
    <Category>監査とログ記録</Category>
    <Phase>テスト</Phase>
    <Technology> 任意</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>
    <span>対象</span>
  </h1>
  <ul>
    <li>ログへの記録を実行するすべてのソフトウェア アプリケーションとサービス</li>
  </ul>
  <p>&nbsp;</p>
  <h1>
    <span>要約</span>
  </h1>
  <p>ログ記録の監査を実行するソフトウェア アプリケーションは、重要なアクションが実行された時期を、各アクションの実行に関係するクライアントとともに記録し続けます。 <span>&nbsp;</span>否認のバグにより、攻撃者は、アプリケーションの監査ログを改ざんして、攻撃者の識別情報が簡単には発見できないようにします。<span> </span></p>
  <p>次の手順に従って、安全でない否認のバグをテストします。</p>
  <ul>
    <li>手順 1: 攻撃のシナリオを理解する<li>手順 2: 原因と対策を分析する<li>手順 3: テスト ケースを実行する</li></li></li>
  </ul>
  <p>&nbsp;</p>
  <h1>
    <span>手順 1: 攻撃シナリオを理解する</span>
  </h1>
  <p>この最初のステップでは、否認のバグがエクスプロイトされる、さまざまな攻撃シナリオを理解する必要があります。<span> </span>通常、否認は、HTTP 要求のタンパリング、SQL インジェクション、ファイルシステムのタンパリング、コマンド インジェクションなど、他の攻撃を利用して実行される高レベルの攻撃です。<span>&nbsp;&nbsp; </span>ただし、攻撃者の目的は常に同じで、攻撃と攻撃者の識別情報を関連付けるすべての情報を隠すことです。</p>
  <h2>
    <em>シナリオ 1: HTTP 要求のタンパリングによる否認</em>
  </h2>
  <p>否認の手法の 1 つに、Web アプリケーションのイベント ログ記録の実行方法に存在する可能性がある脆弱性をエクスプロイトする方法があります。<span> </span>このシナリオでは、攻撃者は、ログへの記録に値する特定のアクションを実行する HTTP 要求を変更して、アクションが他者によって実行されたかのようにみせかけます。<span>&nbsp; </span>たとえば、アプリケーションは、クライアント Cookie で 2 つのパラメータを使用する場合があります。 1 つ目はアクションが実行される前にクライアントを認証するための特定を行うことが目的で、2 つ目はログへの記録を行うことが目的です。<span>&nbsp; </span>これは、攻撃者が、2 つ目の Cookie パラメータをタンパリングしてアプリケーションを混乱させ、攻撃者が実行したアクションについて誤ったユーザー名を記録してしまうことを意味しています。<span> </span>次に例を示します [i]。</p>
 <pre>POST <a href="http://someserver/Upload_file.jsp">http://someserver/Upload_file.jsp</a> HTTP/1.1<br />Host: tequila:8443<br />User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.8.1.4)&nbsp;&nbsp; <br />Gecko/20070515 Firefox/2.0.0.4<br />Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5<br />Accept-Language: en-us,en;q=0.5<br />Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7<br />Keep-Alive: 300<br />Connection: keep-alive<br />Referer: <a href="http://someserver/uploads.jsp">http://someserver/uploads.jsp</a><br />Cookie: JSESSIONID=EE3BD1E764CD6EED280426128201131C; user=leornardo<br />Content-Type: multipart/form-data; boundary=--------------------------- <br />263152394310685<br />Content-Length: 321<br /></pre>
  <p>
    <span>
    </span>
  </p>
  <p>攻撃者は、<i>Burp proxy</i> や <i>WebScarab</i> などの HTTP プロキシ ツールを使用して、Cookie の <i>user</i> 変数を置き換え、ファイルが他者からアップロードされたかのように見せかけることができます。</p>
  <h2>
    <em>
    </em>&nbsp;</h2>
  <h2>
    <em>シナリオ 2: SQL インジェクションによる否認</em>
  </h2>
  <p>SQL インジェクション バグは、否認を含む複数の目的でエクスプロイトされる可能性があります。<span> </span>このシナリオでは、攻撃者は、SQL ステートメントに SQL コマンドを追加して、アプリケーションのログを改ざんまたは削除します。<span>&nbsp; </span>たとえば、SQL インジェクションに対して脆弱性のある SQL Server アプリケーションは、下に示すようなログ テーブルを変更するバッチ UPDATE コマンドを挿入することによって、エクスプロイトされる可能性があります。</p>
 <pre>
    <span>a'='a';UPDATE log_table SET user = 'some_legitimate_user' where user='attacker'--</span>
    <span>
    </span>
  </pre>
  <p>または、攻撃者は、次のインジェクション文字列を使用して、ログ テーブル全体を欠落させる場合があります。<b><span></span></b></p>
 <pre>
    <span>a'='a';DROP TABLE log_table--</span>
    <span>
    </span>
  </pre>
  <p>攻撃者は、SQL インジェクションを使用して、データベース外やサーバのファイル システムに保存されているログ情報を改ざんまたは変更することもできます。<span>&nbsp;&nbsp; </span><b><span></span></b></p>
 <pre>
    <span>a'='a';xp_cmdshell 'delete c:\logs\*.*'--</span>
    <span>
    </span>
  </pre>
  <p>
    <b>
      <i>
      </i>
    </b>&nbsp;</p>
  <h2>
    <em>シナリオ 3: ファイル システムのタンパリング</em>
  </h2>
  <p>多くの場合、ログ ファイルは、アプリケーションをホストしているコンピュータのハード ディスクに存在しています。<span>&nbsp; </span>アプリケーションの開発者は、ログ ファイルが必ず安全な場所に保管されるようにします。保管場所が安全でない場合は、低い特権を持つ攻撃者が、ログの内容にアクセスしたり変更したりできるようになります。<span> </span></p>
  <p>この攻撃では、攻撃者は、目的のコンピュータに低い特権でログインして、ログ ファイルが保管されているフォルダを参照する必要があります。<span> </span>その後、攻撃者は、ファイルを開いて任意に変更を行います。</p>
  <p>
    <b>
      <i>&nbsp;</i>
    </b>
  </p>
  <h2>
    <em>シナリオ 4: コマンド インジェクション</em>
  </h2>
  <p>別の否認のシナリオとして、コマンド インジェクションによって実行されるものがあります。<span>&nbsp; </span>コマンド インジェクションに脆弱性があると、攻撃者は、<i>del</i> (Windows) や <i>rm</i> (Unix) などのシェル コマンドを追加して、ログファイルを改ざんすることができます。<span> </span>たとえば、攻撃者は、次の攻撃文字列を使用して、ログ ディレクトリからファイルを削除することができます。</p>
 <pre>
    <span>file.txt|del c:\logs\*.*</span>
    <span>
    </span>
  </pre>
  <p>コマンド インジェクションに対して脆弱性のあるアプリケーションは、挿入された <i>del</i> コマンドを実行することにより、攻撃者がログ ファイルから任意の情報を削除できるようにします。<b></b></p>
  <p>
    <b>
      <i>&nbsp;</i>
    </b>
  </p>
  <h1>
    <span>ステップ 2: 原因と対策を分析する</span>
  </h1>
  <p>このステップでは、否認のバグのさまざまな原因とその一般的な防止方法について説明します。<span>&nbsp;&nbsp;&nbsp; </span>この内容は、コードのバグを調べて、安全なコードが実行されていることを確認する際に役に立ちます。</p>
  <h2>
    <em>認証とログ記録の一貫性</em>
  </h2>
  <p>最初の HTTP の要求タンパリングのシナリオで説明したように、攻撃者は、アプリケーションによるログ記録の実行方法に存在する不整合性を利用する場合があります。<span> </span>このシナリオでは、アプリケーションは、認証の実行とログ記録の実行において別のパラメータを使用するため、攻撃を受ける可能性があります。<span> </span>この種類の否認のバグを防止するため、開発者は、ログ記録と認証の両方において、常に信頼できる同一のデータ ソースを使用する必要があります。<span>&nbsp; </span>たとえば、クライアントを認証する際にセッション ID を使用する場合は、アクションをログに記録する際もセッション ID に基づいて行う必要があります。<span>&nbsp; </span></p>
  <h2>
    <em>ファイル権限</em>
  </h2>
  <p>否認の攻撃を実行する他の手法として、ログ ファイルが保管されている目的のコンピュータにログインして、アクセスが許可された場合にログ ファイルを手動で変更するという方法があります。<span>&nbsp; </span>ログ ファイルにおいて脆弱性があるアクセス制御リスト (ACL) を使用しているシステムでは、アクセスが許可されてしまいます。<span>&nbsp; </span>ACL に脆弱性があると、低い特権を持つユーザーやゲストなど、すべてのログイン ユーザーがログ ファイルの読み取りや変更を行えるため、否認の攻撃を受ける可能性があります。<span> </span>この攻撃を防止するために、開発者やアプリケーション管理者は、ログ ファイルで高度な ACL を強制的に使用して、高度な ACL と低い特権を持つアカウントでアプリケーションを実行する必要があります。 <span>&nbsp;</span>この手法を使用すると、監査ログへのアクセスを管理者と実際のアプリケーションのみに限定することができます。 </p>
  <h2>
    <em>低レベルの攻撃への対応</em>
  </h2>
  <p>前のセクションで説明した 2 つのシナリオが発生する可能性があるのは、関連する他の下位攻撃 (SQL インジェクションやコマンド インジェクション) に対して、アプリケーションが脆弱性を持つ場合のみです。<span>&nbsp; </span></p>
  <p>SQL インジェクションは、アプリケーションが、サニタイズされていないユーザー入力を使用して SQL クエリを構築する場合に発生します。<span>&nbsp; </span>Web アプリケーションは、クライアントから直接送信された変数または永続ストアのいずれかを使用して SQL を構築します。<span>&nbsp; </span>いずれの場合も、アプリケーションが、クエリの構築前に SQL に関連する変数をサニタイズしないと、SQL インジェクション バグが発生します。<span> </span>SQL インジェクション攻撃を防止するために、開発者は、有効な入力構造のみで構成されたホワイトリストを使用して、すべてのユーザー入力をサニタイズする必要があります。<span> </span>アプリケーションは、ホワイトリストに含まれていないユーザー入力をすべて拒否する必要があります。<span> </span>SQL インジェクション攻撃の詳細については、チーム メンターの次の記事を参照してください。<i>「SQL インジェクション バグのテスト方法」</i></p>
  <p>コマンド インジェクションも、サニタイズされていないユーザー入力が原因で発生するバグです。<span>&nbsp; </span>追加のコマンドや挿入されたコマンドに対して、適切にユーザー入力をチェックしていない Web アプリケーションには、コマンド インジェクションやこの種類の否認攻撃に対する脆弱性が存在します。<span> </span>コマンド インジェクションを防止するために、開発者も、ホワイトリストを使用した手法を採用する必要があります。<span> </span>SQL インジェクション攻撃の詳細については、チーム メンターの次の記事を参照してください。<i>「コマンド インジェクション バグのテスト方法」</i></p>
  <p>
    <b>
      <span>&nbsp;</span>
    </b>
  </p>
  <h1>
    <span>ステップ 3: テスト ケースを実行する</span>
  </h1>
  <p>これで、否認攻撃の論理的な側面のレビューは終了です。次の段階として、下のテスト ケースを実行して、アプリケーションに脆弱性が存在するかどうかを確認する必要があります。</p>
  <h2>
    <em>HTTP 要求のタンパリングによる否認のテスト</em>
  </h2>
  <p>次の手順に従って、HTTP 要求のタンパリングによる否認をテストします。</p>
  <ol>
    <li>ログに記録されているアクションを実行する HTTP 要求において、認証とログ記録で使用されているパラメータが異なっているものを見つけます。<li>Burp proxy (<a href="http://portswigger.net/proxy/">http://portswigger.net/proxy/</a>) などの HTTP プロキシをダウンロードします。<li>Burp proxy を実行します。<li>Burp proxy を介してプロキシするように、インターネット ブラウザを設定します。<li>ステップ 1 で見つけた要求を行うページに移動します。<li>Burp proxy で傍受をオンにします。<li>Web ブラウザで要求を送信します。<li>Burp proxy で要求を変更し、ログ記録で使用されているパラメータを別の値に変更します。<li>アプリケーションのログ ファイル エントリにおいて、ステップ 7 で送信した要求を確認します。</li></li></li></li></li></li></li></li></li>
  </ol>
  <p>予想される結果: ステップ 7 で送信された要求に対するアクションとステップ 8 で設定された値がログ ファイルで関連付けられている場合、アプリケーションは脆弱であると判断されます。</p>
  <h2>
    <em>
    </em>&nbsp;</h2>
  <h2>
    <em>SQL インジェクションによる否認のテスト</em>
  </h2>
  <p>SQL インジェクションを使用した否認のバグをテストするには、アプリケーションに対して、ログ記録情報を含むデータベースからテーブルを欠落または変更させる SQL インジェクション文字列を実行させる必要があります。<span> </span>たとえば、シナリオのセクションで説明したように、次の攻撃文字列のいずれかを使用できます。</p>
 <pre>
    <span>a'='a';UPDATE log_table SET user = 'some_legitimate_user' where user='attacker'--</span>
    <span>
    </span>
  </pre>
 <pre>
    <span>a'='a';DROP TABLE log_table--</span>
    <span>
    </span>
  </pre>
 <pre>
    <span>a'='a';xp_cmdshell 'delete c:\logs\*.*'--</span>
    <span>
    </span>
  </pre>
  <p>このテストは有害な形式であるため、ログ ファイルとデータベース テーブルが永久に削除されてしまうことに注意してください。<span> </span>実稼働環境でこのテストを実行することはお勧めできません。</p>
  <p>SQL インジェクション バグのテスト方法については、チーム メンターの次の記事を参照してください。<i>「SQL インジェクション バグのテスト方法」</i></p>
  <h2>
    <em>
    </em>&nbsp;</h2>
  <h2>
    <em>ファイル システムのタンパリングによる否認のテスト</em>
  </h2>
  <p>次の手順に従って、ファイル システムのタンパリングによる否認をテストします。</p>
  <ol>
    <li>低い特権を持つアカウントまたはゲスト アカウントを使用して、<span> </span>目的のコンピュータ (ログ情報を保管しているコンピュータ) にログインします。<li>ログ ファイルが保管されているフォルダに移動します。<li>ログ ファイルを開き、内容の変更を試みます。</li></li></li>
  </ol>
  <p>予想される結果: 低い特権を持つアカウントでログ ファイルが変更できる場合、アプリケーションは脆弱性であると判断されます。</p>
  <p>&nbsp;</p>
  <h2>コマンド インジェクションによる否認のテスト</h2>
  <p>コマンド インジェクションによる否認をテストするには、アプリケーションに対して、ログ ファイルを削除または変更させるコマンド インジェクション文字列を実行させる必要があります。<span> </span>たとえば、次の攻撃文字列のいずれかを使用できます。</p>
 <pre>
    <span>file.txt|del c:\logs\*.*&nbsp;<span> </span><span>&nbsp;&nbsp;&nbsp; </span></span>
    <span>(Windows)</span>
    <span>
    </span>
  </pre>
 <pre>
    <span>file.txt;rm ../logs/*.*&nbsp;<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(Unix)</span>
    <span>
    </span>
  </pre>
  <p>このテスト ケースの場合も、ログ ディレクトリ内のファイルを永久に削除してしまうため、実稼働環境で実行することはお勧めできません。</p>
  <p>コマンド インジェクション バグのテスト方法については、チーム メンターの次の記事を参照してください。<i>「コマンド インジェクション バグのテスト方法」</i></p>
  <p>&nbsp;</p>
  <h1>
    <span>結論</span>
  </h1>
  <p>否認は、悪意のあるアクションの実行後に、攻撃者の痕跡を残さないことを目的とした高レベルの攻撃です。<span>&nbsp; </span>高レベルの攻撃であるため、実行する際には、要求のタンパリング、SQL インジェクション、安全でないストレージ、コマンド インジェクションなどの他の攻撃が必要になります。<span>&nbsp; </span>ここで重要なのは、即座にテスト ケースを実行するのではなく、関連するさまざまな攻撃シナリオとともに、考えられる原因とその対策について理解することです。<span> </span>テスト ケースでは下位の攻撃が実行され、その目的は、アプリケーションやシステムがログの記録に使用するファイルやデータベース テーブルの削除またはタンパリングです。</p>
  <p>
    <b>
      <span>&nbsp;</span>
    </b>
  </p>
  <div>
    <br />
    <hr />
    <div>
      <p>[i] <strong>Repudiation Attack</strong>.<span>&nbsp; </span>(OWASP) <a href="http://www.owasp.org/index.php/Repudiation_Attack">http://www.owasp.org/index.php/Repudiation_Attack</a></p>
      <p>
        <span>&nbsp;</span>
      </p>
    </div>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>