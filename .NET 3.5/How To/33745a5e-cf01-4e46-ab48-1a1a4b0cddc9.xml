<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1278385937" Content_Hash="1205359499">
  <Metadata>
    <Id>33745a5e-cf01-4e46-ab48-1a1a4b0cddc9</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>ASP.NET 内にアカウント ロックアウトのバグがないかどうかテストする方法</Title>
    <Category>認証</Category>
    <Phase>テスト</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>
    <p>
      <b>
      </b>
    </p>概要</h1>
  <p>ウェブ アプリケーションは、帰属しないアカウントにログインしようとするクライアントから保護するために、アカウント ロックアウト  ポリシーを使用します。 ただし、この保護メカニズムは、悪意を持った攻撃者によって悪用される可能性があります。 アカウント ロックアウト バグが発生するのは、攻撃者が、アカウント ロックアウト ポリシーを使用して正当なクライアントをロックアウトし、被害を受けるクライアントに対して DoS 攻撃を実行する場合です。</p>
  <p>以下の手順に従って、アカウント ロックアウト バグをテストします。</p>
  <ul>
    <li>手順 1: 攻撃のシナリオを理解する<li>手順 2: 原因と対策を分析する<li>手順 3: テストと調査を開始する</li></li></li>
  </ul>
  <p>&nbsp;</p>
  <h1>手順 1: 攻撃のシナリオを理解する</h1>
  <p>アカウントのロックアウト攻撃は、正当なクライアントがアプリケーションへアクセスするのを阻止することを目的とした、バリアント型 DoS 攻撃です。 攻撃者は、クライアントがアプリケーションへのログインに使用するEメールアドレスまたはユーザー名のような有効な Credential 情報をターゲット クライアントから知る必要があります。 この有効な Credential 情報が発見されれば、攻撃者はパスワードは無効でも有効な Credential 情報を使用してアプリケーションへ単純にログインを試みてアカウント ロックアウト攻撃を開始します。 アプリケーションのアカウント ロックアウト ポリシーがアカウントをロックするまで、ログイン試行が繰り返されます。 攻撃が成功した場合、被害者は、アカウントのロックが解除されるまで、アプリケーションにアクセスすることができません。</p>
  <p>詳細: </p>
  <ol>
    <li>攻撃者が、ターゲット クライアントの有効な Credential 情報 (ユーザー名や電子メール アドレスなど) を見つけ出します。 <li>攻撃者は、有効なCredential 情報ながら無効なパスワードを使用してアプリケーションにログインしようとします。 <li>アカウントがロックされたことをアプリケーションが示すまで、攻撃者はステップ 2 を繰り返します。</li></li></li>
  </ol>
  <p>&nbsp;</p>
  <p>
    <i>EBay 攻撃[i]</i>
  </p>
  <p>eBay は、攻撃者がアカウント ロックアウト バグをエクスプロイトする典型的な例です。 ある例では、悪意あるユーザーが他の入札者を打ち負かすために、ある商品に入札した後で、他の入札者の電子メール アドレスと誤ったパスワードを使用してアプリケーションに 3 回ログインを試みました。 その結果、他の入札者の eBay アカウントはロックされ、ログインして高い金額で入札することができなくなり、攻撃者が商品を落札しました。</p>
  <p>&nbsp;</p>
  <h1>手順 2: 原因と対策を分析する</h1>
  <p>アカウント ロックアウト バグは仕様で存在します。 ログインの試行が一定回数失敗した後でアカウントをロックすることで、Credential 情報の総当たり攻撃 (Brute Force Attack) や辞書攻撃の危険性からユーザーを保護できます。</p>
  <p>この脆弱性を完全に回避するには、正当なクライアントのアプリケーション使用を妨げないアカウント ロックアウト ポリシーを適用する、つまり言い換えれば、アカウント ロックアウト ポリシーなしにする必要がありますが、これではアプリケーションをブルートフォースまたは辞書攻撃に晒すことになりセキュリティが保たれなくなります。 したがって、アカウント ロックアウト バグは、Credential 情報への総当たり攻撃 (Brute Force Attack) に対する保護を実装することの必要な副作用として見ることができます。</p>
  <p>このバグから保護するために、利害関係者は、アカウントがロックされていることのリスク（正当なユーザーをDoS攻撃のシナリオにさらす）と、アカウントが Credential 情報への総当たり攻撃 (Brute Force Attack)/辞書攻撃の使用に侵入されるリスクとを比較検討する必要があります。​​</p>
  <h2>
    <em>ASP.NET にアカウント ロックアウト ポリシーを設定</em>
  </h2>
  <p>ASP.NET アカウント ロックアウト機能を使用するため、開発者には独自のアカウント管理スキームをコーディングする代わりに、<i>Forms Authentication</i> を実装するようお勧めします。 Forms Authentication は、Windows またはActive Directory アカウントを ASP.NET ユーザー アカウントと統合するか、あるいは SQL Server メンバーシップ プロバイダーを使用して SQL データベースにアカウント情報を格納することによって、Credential 情報の保存および管理にフレームワークを提供します。 </p>
  <p>メンバーシップ プロバイダーを選択し、必要な認証制御とコードを ASP.NET アプリケーションに追加すれば、<i>web.config</i> ファイルを変更して次のようにアカウント ロックアウトを指定することができます。</p>
 <pre>&lt;membership defaultProvider=MyProvider&gt;</pre>
 <pre>&nbsp;&nbsp; &lt;providers&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;add name=MyProvider maxInvalidPasswordAttempts=3 and passwordAttemptWindow=10 …/&gt;</pre>
 <pre>&nbsp;&nbsp; &lt;providers&gt;</pre>
 <pre>&lt;/membership&gt;</pre>
  <p>&nbsp;</p>
  <p><i>maxInvalidPasswordAttempts</i> は、アカウントがロックされるまでの期間内に許可される無効なログイン試行の最大数であることに注意してください。 この期間は、 <i>passwordAttemptWindow</i> という名前の前述の2番目の変数によって示され、この最大試行数が適用される範囲の時間ウィンドウを指定します。 最新の失敗した試行時間が最後に失敗した期間の後に発生した場合は、無効なパスワード試行の初回と見なされます。</p>
  <p>アカウント ロックアウト ポリシーの設定に関する詳細は、Microsoft TechNet の記事<i>Configuring Account Lockout [ii]を参照してください。</i></p>
  <h2>
    <em>アカウント ロックアウト攻撃に対する保護</em>
  </h2>
  <p>アカウントロックアウト攻撃に対して取り得る防衛策は、緩いアカウント ロックアウト ポリシーを設定しながらも、強力なパスワードを適用することです。 理想的には、パスワードは、総当たり攻撃 (Brute Force Attack)/辞書攻撃に抵抗でき、アカウント ロックアウト ポリシーの重要性を減らすほど十分強くなければなりません。 複雑なパスワードは攻撃することが困難であり、ほとんどの場合、自動化された攻撃を必要とします。 パスワード ポリシーで複雑なパスワードが強制されている場合、アカウント ロックアウト ポリシーで、より多くのログイン試行失敗回数を許可できます。&nbsp; &nbsp;</p>
  <p>管理者アカウントへのアカウントロックアウト攻撃の影響を軽減するために、管理者は <i>administrator</i>、<i>admin、</i> <i>root</i> などのユーザー名を安易に使用する代わりに、別のアカウント名を使用するようお勧めします。 このようなユーザー名は頻繁に使用され、これらのアカウントがロックされるとアプリケーションが高い危険性にさらされるため、攻撃者はこのようなユーザー名を使用することが多くあります。</p>
  <p>注目すべき他の設定は、アカウントがロックされている時間です。 一時的にアカウントをロック ダウンするアカウント ポリシーは、一時的な DoS 攻撃だけを可能にするのに対し、永久にアカウントをロック ダウンするアカウント ポリシーは、攻撃者が正当なクライアントに対して永久的な DoS 攻撃を実行できるようにします。&nbsp; この場合も、特定のアプリケーションのセキュリティ コンテキストからこれらの異なるシナリオについて話し合う必要があります。</p>
  <p>追加の対策には、VPN などの制限されたネットワーク環境で ASP.NET アプリケーションをホストし、信頼されていないネットワーク アドレスから発信されるログインの試行を防止することが含まれます。 しかし、このような対策はネットワーク セキュリティに依存しており、ネットワーク攻撃の影響を受けやすくなります。</p>
  <p>&nbsp;</p>
  <h1>手順 3: テストと調査を開始する</h1>
  <p>アカウント ロックアウト バグのすべての理論的側面を見直したところで、アプリケーションが脆弱であるかどうかを確認するためにテスト ケースを実施する必要があります。</p>
  <h2>
    <em>有効なアカウント名の獲得</em>
  </h2>
  <p>攻撃シナリオ セクションで説明しているように、アカウント ロックアウト攻撃を行うには、ユーザー名や電子メール アドレスなどの Credential 情報を知る必要があります。 有効なアカウント名の取り込みは、誰でもアカウントを作成できるようにする登録ページを使用すること、およびすでに存在するユーザー名を使用してアカウントを作成しようとすることを含む、さまざまな方法で行うことができます。 &nbsp;その他の攻撃方法としては、ソーシャル エンジニアリングや、具体的に有効なユーザー名（パスワードではなく）を探す情報漏えい攻撃などがあります。 攻撃する有効なユーザー アカウントを準備したら、アカウント ロックアウト テスト事例を実行できます。</p>
  <h2>
    <em>アカウント ロックアウト バグの手動テスト</em>
  </h2>
  <p>手動でアカウントのロックアウト バグをテストするには、次の手順に従います。</p>
  <ol>
    <li>インターネット ブラウザを開いて、ログインページに移動します。 <li>有効なユーザー名と間違ったパスワードを入力し、ページを送信します。 <li>アカウントがロックされたかどうかを確認します。 アカウントがロック ダウンされていれば、テスト ケースは完了しており、 ロック ダウンされていなければ、手順 2 を 10 回繰り返します。 失敗したログイン試行の回数を増やすこともできますが、ログインの試行回数を増やす場合は自動ツールを使用することをお勧めします (次のテスト事例を参照)。</li></li></li>
  </ol>
  <p>予想される結果: アカウントがロックされた場合、アプリケーションには脆弱性があります。</p>
  <p>&nbsp;</p>
  <h2>
    <em>アカウント ロックアウト バグの自動テスト</em>
  </h2>
  <p>ログイン プロセスを自動化するために、ネットワークのパスワード クラッカー ツールを使用することができます。 この目的は、パスワードを見破ることではなく、ログインの試行を繰り返し実行することであることに注意してください。&nbsp; &nbsp;&nbsp;</p>
  <p>アカウントのロックアウト　バグを自動的にテストするには、次の手順に従います。</p>
  <ol>
    <li>Brutus をダウンロードおよびインストールします (<a href="http://www.hoobie.net/brutus/">http://www.hoobie.net/brutus/</a>)。<li>Brutus を実行します。 <li>ターゲット URL と認証型を入力します。 <li>[<b>パス モード</b>] ドロップダウン リストで、[<b>総当たり (Brute Force)</b>]を選択します。<li>使用する文字の範囲を選択します。 ログイン試行の失敗を何回試してみたいか決定するには、これらの設定を使用する必要があります。&nbsp; <li><b>[Start] (開始) </b>をクリックします。</li></li></li></li></li></li>
  </ol>
  <p>予想される結果: アカウントがロックされた場合、アプリケーションには脆弱性があります。</p>
  <p>&nbsp;</p>
  <h1>結論</h1>
  <p>アカウントのロックアウト バグは、特定のユーザー アカウントに対するサービス拒否 (DoS) 攻撃につながる可能性があります。 このバグが存在するのは、アカウント ロックアウト ポリシーによって Credential 情報の総当たり攻撃 (Brute Force Attack) や辞書攻撃を防ぐ必要があるためです。 この脆弱性から保護するために、アカウントのロックアウト攻撃リスクに対する Credential 情報への総当たり攻撃 (Brute Force Attack) リスクを分析し、それに応じてアカウント ロックアウト ポリシーを設定するようお勧めします。 このバグのテストは簡単です。 攻撃対象とするための有効なユーザー名を獲得する必要があります。 テストは、いくつかの手順で手動で行うことも、ログイン プロセスを自動化するネットワーク パスワード クラッキング ツールを実行して行うこともできます。</p>
  <p>&nbsp;</p>
  <div>
    <br />
  </div>
  <div>
    <hr />
  </div>
  <p>[i] <strong> アカウントのロックアウト攻撃</strong>。(OWASP)&nbsp; <a href="http://www.owasp.org/index.php/Account_lockout_attack">http://www.owasp.org/index.php/Account_lockout_attack</a></p>
  <p>[ii] <b> アカウント ロックアウトの設定</b>。Microsoft – TechNet。&nbsp; <a href="http://technet.microsoft.com/en-us/library/cc737614.aspx">http://technet.microsoft.com/en-us/library/cc737614.aspx</a></p>]]></Data>
  </Content>
</TeamMentor_Article>