<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-618985504" Content_Hash="-763728507">
  <Metadata>
    <Id>c76f163d-169e-40a2-9448-397ccd3d312c</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>セッション ハイジャック バグをテストする方法</Title>
    <Category>セッション管理</Category>
    <Phase>テスト</Phase>
    <Technology>Web アプリケーション</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>
    <span>以下に適用します:</span>
  </h1>
  <ul>
    <li>
      <span>ASP、PHP、Java、および同じような言語で開発された Web アプリケーション。</span>
    </li>
  </ul>
  <p>
    <b>
      <span>
      </span>
    </b>&nbsp;</p>
  <h1>
    <span>要約</span>
  </h1>
  <p>
    <span>多数の Web アプリケーションはセッション管理を使用して訪問者の認証状態を追跡します。<span>&nbsp; </span>たとえば、電子商取引サイトでは、クライアントがログインしていることを確認して個人情報を表示するためにクライアントにセッションを発行します。<span>&nbsp; </span>攻撃者のセッション ハイジャックでの目的は、被害者のセッションを盗んでその被害者になりすますことです。<span>&nbsp;&nbsp; </span></span>
  </p>
  <p>
    <span>被害者になりすますことによって、攻撃者は脆弱なサイトを被害者のふりをして被害者であるかのように使用することができます。<span>&nbsp; </span>銀行のサイトの場合、攻撃者は被害者の残高を読み込んで被害者の代わりに取引を行う可能性があります。<span>&nbsp;&nbsp; </span>Web メール サイトの場合、攻撃者は電子メールを被害者であるかのように読み込んだり、書き込んだりすることができます。<span>&nbsp; </span>セッション ハイジャックの脆弱性による攻撃は、極めて危険です。</span>
  </p>
  <p>
    <span>セッション ハイジャックの場合、被害者は 2 者になります:</span>
  </p>
  <ol>
    <li>
      <span>ここに表示するメソッドを使用して攻撃者にセッションを盗まれてしまう <i>脆弱な Web アプリケーション</i>。</span>
      <li>
        <span>セッションが盗まれて<i>ハイジャック</i>される<i>インターネット クライアント</i>。</span>
      </li>
    </li>
  </ol>
  <p>
    <span>インターネット クライアントの被害が最も大きいですが、実際の脆弱性はサーバー アプリケーションに存在します。<span>&nbsp; </span></span>
  </p>
  <p>
    <span>以下に、セッション ハイジャックの脆弱性を検索する場合のテスト手順の概要を示します:</span>
  </p>
  <ul>
    <li>
      <b>
        <span>手順 1</span>
      </b>
      <span>:&nbsp;<span> </span>攻撃シナリオについて理解する。</span>
      <li>
        <b>
          <span>手順 2</span>
        </b>
        <span>:&nbsp;<span> </span>ハイリスク コンポーネントを識別する。</span>
        <li>
          <b>
            <span>手順 3</span>
          </b>
          <span>:&nbsp;<span> </span>テストして調査する。</span>
          <li>
            <b>
              <span>手順 4</span>
            </b>
            <span>:&nbsp;<span> </span>テスト ケースを調整する。</span>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>
    <span>&nbsp;</span>
  </p>
  <h1>
    <span>手順 1: <span> </span>攻撃シナリオを理解する</span>
  </h1>
  <p>
    <span>セッション ハイジャックをテストする最初の手順では、攻撃そのものが実行される方法を確実に理解します。</span>
  </p>
  <p>
    <span>セッション ハイジャック攻撃の前提条件は、脆弱な Web アプリケーションを識別することと、インターネット クライアント被害者を選択することです。<span>&nbsp; </span>これらの攻撃が機能するには、クライアント被害者は脆弱な Web アプリケーションのアクティブ ユーザーである必要があります。<span>&nbsp; </span>良い例として、セッション関連の脆弱性のあるオンライン バンキングの Web サイトがあります。<span>&nbsp; </span>システムのアクティブ ユーザーはさまざまな方法で見つけることができますが、中でもフィッシングが最も一般的です。</span>
  </p>
  <p>
    <span>一般的なセッション ハイジャック シナリオには 3 つあります:</span>
  </p>
  <ul>
    <li>
      <span>クロスサイト スクリプティング経由でセッションをハイジャックする。</span>
      <li>
        <span>セッションを予測する。</span>
        <li>
          <span>セッション固定化。</span>
        </li>
      </li>
    </li>
  </ul>
  <h2>
    <span>クロスサイト スクリプティング (XSS) 経由でセッションをハイジャックする</span>
  </h2>
  <p>
    <span>セッション ハイジャックの最も一般的なシナリオは、クロスサイト スクリプティング (XSS) バグが原因となっています。<span>&nbsp; </span>これらのバグはかなり一般的で極めて簡単に悪用することができます。<span>&nbsp; </span>攻撃者が Web アプリケーションで XSS 脆弱性を見つけた場合、ユーザーのセッション cookie またはページ内のセッション変数の値を取得する JavaScript ペイロードを構築し、それらを攻撃者が実行するサーバーに送信します。その後、それを使用して被害者になりすまします。</span>
  </p>
  <p>
    <span>詳細:</span>
  </p>
  <ol>
    <li>
      <span>攻撃者は攻撃する Web サーバーでクロスサイト スクリプティングの脆弱性を見つけます。</span>
      <li>
        <span>攻撃者はセッションがサイトで管理されている方法を特定し、それを悪用する XSS ペイロードを作成します。<span>&nbsp; </span>一般的に、これにはセッション cookie またはセッション変数の値を取得する文字列の形式が使用され、攻撃者の制御下にある Web サーバーに送信され、ログされます。</span>
        <li>
          <span>攻撃者は配布のためのペイロードを準備します。これには、データを受信するサーバーの設定と 、クリック可能な URL にペイロードを埋め込むかあるいは配信する方法を見つけることが含まれます。</span>
          <li>
            <span>攻撃者はセッション データを使用する方法を見つけ出してユーザーになりすまします。これにはおそらく cookie の値を手動で設定することになります。</span>
            <li>
              <span>攻撃者は 1 人または複数の被害者を選択します。 <span>&nbsp; </span>攻撃の目標が決まったら、攻撃者は特定のユーザーを念頭に置いてそのユーザーを目標としたアプローチをカスタマイズしますが、より頻繁に攻撃者はスパムを送信してユーザーを「フィッシング」し、巧妙に細工されたリンクにユーザーが従うように試みます。</span>
              <li>
                <span>被害者がリンクをクリックすると、Web サイトは正常にロードされて通常通りログインします。<span>&nbsp; </span>ログインすると、エクスプロイトはセッションを攻撃者のサーバーに送信します。</span>
                <li>
                  <span>攻撃者はログされた値をリアルタイムで使用してユーザーになりすまします。<span>&nbsp; </span>計画通りに機能したと想定します。 これで攻撃者は、ユーザーをエミュレートしてハイジャックしたユーザーのコンテキスト内で意のままにアクションを実行することができます。</span>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <span>
    </span>&nbsp;</p>
  <h2>
    <span>セッションを想定する</span>
  </h2>
  <p>
    <span>セッション ハイジャックは極めて容易である場合があります。<span>&nbsp; </span>サーバーが予測可能な方法でセッション ID を割り当てている場合、攻撃者は苦労して盗まずとも、他の有効なセッションを推測するだけで済みます。<span>&nbsp; </span>この攻撃を実行するには、攻撃者は連続して複数回サイトにログインして指定されているセッション ID を記録します。<span>&nbsp; </span>それらの間に予測可能な関係がある場合、セッションをハイジャックすることができます。ログインしてセッション ID の直前または直後に来るセッションを試行します。<span>&nbsp; </span>サーバーによっては単純な増分する数字を使用している場合があり、たとえば攻撃者が 138130 のセッション ID を受信すると、138131 と 138129 を試行させてしまうことになります。<span>&nbsp; </span>タイムスタンプが追加されているなどのその他のケースでは、試行回数は多くなりますが、極めてすばやく総当たりされてしまいます。<span>&nbsp; </span>より安全なサイトではランダムに生成された数字を使用していますが、脆弱な乱数生成器を間違って使用している場合があります。<span>&nbsp; </span>攻撃者が十分なシーケンシャル ID または近似シーケンシャル ID を収集できる場合、アルゴリズムと使用されたシードが特定されて、ここでもまた自由自在にセッションを推測されてしまう可能性があります。<span>&nbsp; </span></span>
  </p>
  <h2>
    <span>
    </span>&nbsp;</h2>
  <h2>
    <span>セッション固定化</span>
  </h2>
  <p>
    <span>セッション固定化では、既存のセッション ID を取得したり、推測するのではなく、攻撃者はセッション ID を被害者に提供し、被害者が資格情報を指定したら、セッションを元に戻します。</span>
  </p>
  <p>
    <span>最初に、攻撃者はサイトをロードして新しいセッション ID を受け取ります。<span>&nbsp; </span>攻撃者はこの ID をクリック可能な URL に埋め込んで、サイトが URL をクリックするユーザーに ID を現在のセッションとして認識されるようにします。<span>&nbsp; </span>次に、このリンクを被害者に送信し (この攻撃は事前に選択した被害者の方が有効です)、被害者がサイトを訪問するのに納得してリンクを使用するようにします。<span>&nbsp; </span>被害者がログインすると、攻撃者はセッションの使用を再度開始して、自由自在に被害者になりすまします。</span>
  </p>
  <p>
    <span>
      <b>
      </b>
    </span>&nbsp;</p>
  <h1>
    <span>手順 2: <span> </span>ハイリスク コンポーネントを識別する</span>
  </h1>
  <p>
    <span>これで、対処する必要のある脆弱性の種類について理解したので、それらがサイトにどのような影響を及ぼすのかを検査します。<span>&nbsp; </span>ソース コードにアクセスできる場合は、システムのすべてのセッション管理コードを探して、可能であれば一元管理できるようにします。<span>&nbsp; </span>コードにアクセスすることができない場合でも、セッションを使用するシステムのすべてのページのリストを作成する必要があります。<span>&nbsp; </span>セッションがコードでどのように使用されているかを理解したら、セッション ハイジャックの脆弱性を引き起こす可能性のあるコードの 2 つの部分 (セッションの生成とセッション ID の保護) に関する 問題と解決策を識別する方法を学習する必要があります。</span>
  </p>
  <h2>
    <span>セッション管理コードを検索する: </span>
  </h2>
  <p>
    <span>アプリケーションのソース コードにアクセスできる場合:</span>
  </p>
  <p>
    <span>
      <span>&nbsp;</span>ほとんどのアプリケーションではすべてのセッション管理を単一の場所で行っているため、この場合は簡単です。<span>&nbsp; </span>アプリケーションにページ テンプレートがある場合、それがセッション管理を処理している可能性が高いです。<span>&nbsp; </span>テンプレートを調べてこれが正しいかどうか確認します。<span>&nbsp; </span>ページがソース コードまたは純粋にクライアント側から出力されたページにセッション変数を配置することによって、または Burp Suit などのプロキシを使用して HTTP トランザクションの一部として送信された Cookie を表示することによって、セッション データを使用または送信しているかを識別する方法を把握します。<span>&nbsp; </span>セッションが生成される場所を確実に把握し、直接使用していない場合でも、セッションのデータを処理するアプリケーションのすべてのページのリストを作成します。</span>
  </p>
  <p>
    <span>アプリケーションのソース コードにアクセスできない場合:</span>
  </p>
  <p>
    <span>ソース コードがないため、この場合は少し困難です。<span>&nbsp; </span>ロードされたページのソース コードおよびそれらをロードするのに送信された HTTP トランザクション (Burp Suit などのプロキシを使用して) を見つけることから開始し、セッション変数がどのようなものかを特定します。<span>&nbsp; </span>これにより、サイトのどのページがセッションを使用しているかを特定できます。<span>&nbsp; </span>直接使用していない場合であっても、セッション データを処理するアプリケーションのすべてのページのリストを作成します。</span>
  </p>
  <h2>
    <span>
    </span>&nbsp;</h2>
  <h2>
    <span>セッション生成の問題と解決策</span>
  </h2>
  <p>
    <span>最初に調べる問題は、セッションがどの時点で生成されるかということです。 <span>&nbsp;</span>サイトにユーザー設定機能がある場合は、一般的にセッションはユーザーがログインするときではなく、サイトをロードすると直ちに生成されます。<span>&nbsp; </span>これは、ユーザーがログインしていないときにページに添付されているセッション変数の存在をチェックすることによって簡単に特定することができます。<span>&nbsp; </span>セッションが実際に使用されていない場合でも、セッション管理がすべてのページで同じテンプレートによって処理されている場合は、直ちに作成される場合があります。<span>&nbsp; </span>セッションがログインよりも前に作成されている場合、ユーザーがログインする際に以前のセッションを無効にして新しいセッションを作成する必要があります。<span>&nbsp; </span>この方法で、セッション固定化攻撃は失敗します。<span>&nbsp; </span>これを確認するのは簡単です。ログイン中にセッションの値が変更されているかどうかを確認するだけです。</span>
  </p>
  <p>
    <span>注意: サイトがセッションを保管するのに Cookie を使用していない場合、およびユーザーが複数のウィンドウを開いている場合は、サイトにログインするためにユーザーが使用したウィンドウのみが新しいセッションを取得します。<span>&nbsp; </span>これがアプリケーションに該当する場合は true になっていることを確認します。そうでないと、サイトは自動的に以前のセッション ID を新しい ID に変換する場合があり、セッション固定化攻撃がまだ機能する可能性があります。</span>
  </p>
  <p>
    <span>これで、セッションが生成される時期を確認したので、ID が生成される方法を見ていきます。<span>&nbsp; </span>ID が十分な長さでランダムであることを確認します。<span>&nbsp; </span>優れたセッション識別子は最低 64 ビット長で、 128 ビットにすることをお勧めします。<span>&nbsp; </span>これらをシーケンシャルにしてはなりません。また、可能な場合は、暗号で保護された乱数生成器によって生成する必要があります。<span>&nbsp; </span>アプリケーションのソース コードにアクセスすることなくランダムの度合いを特定するのは困難である場合があります。 しかし、このタスクに役立つBurp シーケンス制御装置などの使用可能なツールがあります。<span>&nbsp; </span>Burp Suite に含まれているこのツールは、特定のサイトで生成されるセッション トークンのランダムの度合い (エントロピー) を測定し、安全であるかどうかを合理的に特定することができます<a style="mso-endnote-id: edn1" name="_ednref1" href="about:blank#_edn1" title=""><span><span><span><span><span>[i]</span></span></span></span></span></a>。<span>&nbsp;&nbsp;</span>OWASP の WebScarab や IBM Rational の AppScan など、その他のツールにも同じ機能があります。 <span>&nbsp;&nbsp;</span></span>
  </p>
  <p>
    <span>セッション生成プロセスの最終段階では、以前のセッションがどうなるのかを調査します。<span>&nbsp; </span>セッションは一定期間後にタイムアウトする必要があり、ほとんどのアプリケーションでは 30 分が適切です。<span>&nbsp; </span>ユーザーがログアウトした場合、セッションも無効にする必要があります。<span>&nbsp; </span>セッション Cookie を使用する安全でないサイトではかなり一般的なのが、ユーザーがログアウトした場合にセッション Cookie を削除しますが、セッションは有効なままにしておきます。<span>&nbsp; </span>攻撃者がセッションをハイジャックした場合は、これにより、ユーザーはそれを止めることができません。</span>
  </p>
  <h2>
    <span>
    </span>&nbsp;</h2>
  <h2>
    <span>セッション ID の保護と問題</span>
  </h2>
  <p>
    <span>攻撃者がセッション ID の値を知ることができる方法は 2 つあります。それは、クロスサイト スクリプティングとスニッフィングです。<span>&nbsp; </span>これらの問題を阻止するために、セッション ID に適用する必要のあるいくつかの保護の層があります。それらすべてをテストするのは極めて簡単です。</span>
  </p>
  <p>
    <span>セッション ID を保護するためにアプリケーションが実行できる最も基本的なことは、セッションを使用するすべてのページで SSL (HTTPS) を使用することです。<span>&nbsp; </span>サイトが SSL を使用しているかどうかをチェックすることは簡単で、サイトの URL が</span>
    <span>https:// で開始するかどうかをチェックするだけです。</span>
    <span> に追加コマンドを注入できます。<span> </span>その場合は、さらにいくつか調べることがあります。<span>&nbsp; </span>最初に、サイトで URL を http:// に戻すことができないことを確認します。<span>&nbsp; </span>次に、ページのすべての要素が SSL を使用していることを確認します (使用していない場合は設定するようにブラウザに表示されます)。<span>&nbsp; </span>次に、周知の CA によって署名された適切な証明書が使用されていることを確認し、証明書が最新で、ブラウザが提供できるすべての情報が十分に強力に暗号化されていることを確認します。<span>&nbsp; </span>最後の手順では少し時間がかかります。 セッション ID を表示するサイトのすべてのページが SSL を使用していることを確認する必要があります。<span>&nbsp; </span>ページがセッション ID を受信したり、要求したり、埋め込んだりしない限りは、SSL を使用しないページがあっても大丈夫です。というのも、セッション ID がユーザーの接続を盗聴できる攻撃者によって盗まれる可能性があるためです。</span>
  </p>
  <p>
    <span>サイトで SSL を使用できない場合 (一般的にモバイル Web ブラウザをサポートする場合のみの問題で、そこからすぐに問題はなくなります) は、固定タイムアウトを使用する必要があります。<span>&nbsp; </span>通常、セッションはユーザーがサイトと最後に相互作用した後の任意の時点でタイムアウトします。<span>&nbsp; </span>SSL を使用しないサイトでは、セッションを最初にログインしてから一定時間後に無効にする必要があります (ただし、ユーザーが最初にログアウトした場合は、当然ながらすぐに無効にする必要があります)。</span>
  </p>
  <p>
    <span>セッション変数を順に渡す方法の基本を調べたら、クライアントにセッション変数を保管する方法を調べます。<span>&nbsp; </span>ここでは、Cookie またはページ変数の 2 つの選択肢があります。<span>&nbsp; </span>Cookie は保護と管理が容易なため、望ましい方法です。<span>&nbsp; </span>セッション ID は絶対にページの URL に保管してはなりません。というのも、これはユーザーのセッションを盗むクライアントのセッション履歴にアクセスできる中間プロキシまたはユーザーのリスクを引き起こすためです。<span>&nbsp; </span>これをチェックするには、サイトが使用する URL を調べます。セッション識別子のように動作する長い英数字の文字列が含まれている場合は、問題のページは恐らくこの技術を使用しています。</span>
  </p>
  <p>
    <span>セッション変数を順に渡すもう一つの方法は、隠しパラメータとして渡す方法です。<span>&nbsp; </span>サイトはすべてのリンクが実際に HTTP POST リクエストであるように設計されており、隠しパラメータはそれらすべてに追加されています。<span>&nbsp; </span>これは 2 つの方法でテストすることができます。 一番目は、ページのソース コードを調べてこのタイプの隠し変数が存在するかどうかを観察します。 <span>&nbsp;</span>二番目は、プロキシを使用してサーバーに送信されたリクエストを調べて、そのようなパラメータが含まれているかどうかを観察します。<span>&nbsp; </span>これはセッション ID を保管するには貧弱な方法です。というのも、サイトがクロスサイト スクリプティング攻撃に脆弱である場合、ID はページから容易に抽出されて悪意のある攻撃者に送信されるからです。</span>
  </p>
  <p>
    <span>セッションを保管するには、Cookie を経由するのが望ましい方法です。<span>&nbsp; </span>アプリケーションがセッションをCookie に保管するのを確認するには、Cookie を設定する場合にブラウザにプロンプトを表示させるか、アプリケーションを使用する際にCookie のコンテンツを検査するか、またはプロキシを使用して Cookie が設定される時期を監視します。</span>
  </p>
  <p>
    <span>アプリケーションがCookie および SSL を使用している場合は、良好ですが、チェックする必要のある項目がいくつかあります。<span>&nbsp; </span>一つ目は、Cookie は SSL のみとして設定する必要があります。<span>&nbsp; </span>これにより、ユーザーが何らかの理由で SSL を使用せずにサイトを訪問した場合でも、セッションを誤って危険にさらすことはありません。<span>&nbsp; </span>二つ目は、Cookie は HTTP のみとして設定する必要があります。<span>&nbsp; </span>このフラグは比較的新しく、すべてのシステムでサポートされているわけではありませんが (リリース時には、Internet Explorer 6 SP1 以上がこれをサポートする唯一のブラウザですが、これを使用してもサポートされていないシステムが壊れることはありません)、サポートされている場所では多くの場合、ページで実行している JavaScript がCookie にアクセスしないように阻止します。<span>&nbsp; </span>これにより、XSS 経由でセッションを盗むのがより困難になります。<span>&nbsp; </span>これらの両方のフラグは、Cookie をプロキシで設定するサーバーからのレスポンスを検査することによってチェックできます。</span>
  </p>
  <p>
    <span>事前の保護でほとんどこの問題に対処しているはずですが、それらがすべて適切に使用されたとしても、セッションはクロスサイト スクリプティングによってハイジャックされる場合があります。<span>&nbsp; </span>セッション ID を処理するアプリケーションのすべてのページの全面的な見直しを実施することが重要です。<span>&nbsp; </span>レスポンス分割のように、同様の方法を使用してこの攻撃を実施することもできます。</span>
  </p>
  <p>
    <span>
    </span>
    <span>
    </span>&nbsp;</p>
  <h1>
    <span>手順 3: <span> </span>テストと調査</span>
  </h1>
  <p>
    <span>ここまでセッション ハイジャックについて学習し、安全でない実装と安全な実装を識別する方法を熟知し、アプリケーションのどのページが脆弱であるかを理解できたので、テストを開始します。</span>
  </p>
  <h2>
    <span>新しいセッションがログイン時に作成されたことを確認する</span>
    <span>
    </span>
  </h2>
  <ol>
    <li>
      <span>Wireshark または同様のネットワーク スニファーを使用してネットワーク トラフィックのキャプチャを開始する</span>
      <li>
        <span>Web ブラウザを開いてアプリケーション サイトにログインする</span>
        <li>
          <span>キャプチャを停止して Cookie コンテンツの内部にあるセッション ID 値を記録する (これは値 A です)</span>
          <li>
            <span>アプリケーション サイトからログアウトする</span>
            <li>
              <span>新しいキャプチャを開始する</span>
              <li>
                <span>アプリケーション サイトにログインする</span>
                <li>
                  <span>キャプチャを停止して Cookie コンテンツの内部にあるセッション ID 値を記録する (これは値 B です)</span>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <i>
      <span>予想される結果:&nbsp;<span> </span></span>
    </i>
    <span>value A != value B</span>
  </p>
  <h2>
    <span>
    </span>&nbsp;</h2>
  <h2>
    <span>ログアウト時に既存のセッションがサーバー上で無効になっていることを確認する</span>
  </h2>
  <ol>
    <li>
      <span>Wireshark または同様のネットワーク スニファーを使用してネットワーク トラフィックのキャプチャを開始する</span>
      <li>
        <span>Web ブラウザを開いてアプリケーション サイトにログインする</span>
        <li>
          <span>キャプチャを停止して分析し、セッション ID を送信するのに使用された HTTP ヘッダを特定します (一般的にこれは Cookie ヘッダ内で実行されます)</span>
          <li>
            <span>セッション ID の値を記録する</span>
            <li>
              <span>アプリケーション サイトからログアウトする</span>
              <li>
                <span>Burp プロキシを開始する (このツールを推奨しますが、同じ HTTP プロキシ ツールを使用することもできます)</span>
                <li>
                  <span>アプリケーション サイトにログインして新しいセッション ID を記録する</span>
                  <li>
                    <span>Burp プロキシを設定して新しいセッション ID を手順 4 で記録した以前のセッションと置換する</span>
                    <li>
                      <span>現在のページを更新する</span>
                    </li>
                  </li>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <i>
      <span>予想される結果:</span>
    </i>
    <span>
      <span>&nbsp; </span>ページを更新する際に、アプリケーション サイトは以前のセッションが使用されていることを検出するため、自動的にユーザーをログアウトします。<span>&nbsp; </span>この以前のセッション ID は無効にしておくべきでした。</span>
  </p>
  <h2>
    <span>
    </span>&nbsp;</h2>
  <h2>
    <span>ID がランダムにおよび十分に広いスペースから作成されていることを確認する</span>
  </h2>
  <ol>
    <li>
      <span>Burp プロキシを使用して HTTP リクエスト トラフィックの傍受を開始する</span>
      <li>
        <span>Web ブラウザを開いてアプリケーション サイトにログインする</span>
        <li>
          <span>Burp プロキシから、&nbsp;<span> </span>ログインに使用するリクエストからレスポンス メッセージを選択してシーケンサーに送信する</span>
          <li>
            <span>Burp Sequencer を使用してレスポンスでセッション ID に使用するトークンを識別する</span>
            <li>
              <span>さまざまなログインに続いてログアウトを実行することでアプリケーションが異なるトークンを生成できるようにする (ほとんどのケースで Sequencer はこれを自動化できます)</span>
              <li>
                <span>Burp Sequencer を使用してキャプチャしたトークンを分析する</span>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <i>
      <span>注意:</span>
    </i>
    <span>
      <span>&nbsp; </span>これを実行する方法の手順およびスクリーンショットについては、<a href="http://www.portswigger.net/sequencer/help.html">http://www.portswigger.net/sequencer/help.html</a> を参照してください。</span>
  </p>
  <p>
    <i>
      <span>予想される結果:</span>
    </i>
    <span>
      <span>&nbsp; </span>結果は中から高のエントロピーを表示し、信頼度は少なくとも妥当です。</span>
  </p>
  <h2>
    <span>
    </span>&nbsp;</h2>
  <h2>
    <span>セッションが適切に期限切れになっていることを確認する</span>
  </h2>
  <ol>
    <li>
      <span>Web ブラウザを開いてテスト用のアプリケーション サイトにログインする</span>
      <li>
        <span>ユーザー セッションをキャプチャする</span>
        <li>
          <span>現在のユーザー セッションの寿命を特定し、セッションの有効期限をテストする時期を特定する</span>
          <li>
            <span>セッションの有効期限が切れるまで短時間 (数秒で十分です) 待機し、手順 2 からセッションを再使用する</span>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <i>
      <span>予想される結果:</span>
    </i>
    <span>
      <span>&nbsp; </span>ページを更新する際に、アプリケーション サイトは以前のセッションが使用されていることを検出するため、保護されたリソースへのアクセスを拒否します。<span>&nbsp; </span>サーバーで以前のセッション ID を無効にしておくべきでした。</span>
    <b>
      <i>
        <span>&nbsp;</span>
      </i>
    </b>
  </p>
  <h2>
    <span>
    </span>&nbsp;</h2>
  <h2>
    <span>セッション ID を処理するすべてのページを調べる</span>
  </h2>
  <p>
    <span>セッション ID の生成と有効期限切れのテストが完了したら、手順 2 で作成したセッション データを処理するすべてのページのリストを調べる必要があり、それらのすべてのページがこのデータを安全に処理していることを確認します。</span>
  </p>
  <h2>
    <span>
    </span>&nbsp;</h2>
  <h2>
    <span>すべてのページでセッション ID が Cookie にのみ保管されていることを確認する</span>
  </h2>
  <ol>
    <li>
      <span>Wireshark または同様のネットワーク スニファーを使用してネットワーク トラフィックのキャプチャを開始する</span>
      <li>
        <span>アプリケーション サイトにログインする</span>
        <li>
          <span>アプリケーション サイト内のプライベートおよび機密ページを閲覧する</span>
          <li>
            <span>アプリケーション サイトからログアウトする</span>
            <li>
              <span>キャプチャを停止する</span>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <i>
      <span>予想される結果:</span>
    </i>
    <span> セッション ID は Cookie ヘッダにのみ保管され、キャプチャされたパケットの HTTP 本体には表示されません。</span>
  </p>
  <h2>
    <span>
    </span>&nbsp;</h2>
  <h2>
    <span>すべてのページでセッション Cookie に HTTP 専用のフラグが付けられていることを確認する</span>
  </h2>
  <ol>
    <li>
      <span>Wireshark または同様のネットワーク スニファーを使用してネットワーク トラフィックのキャプチャを開始する</span>
      <li>
        <span>アプリケーション サイトにログインする</span>
        <li>
          <span>アプリケーション サイト内のプライベートおよび機密ページを閲覧する</span>
          <li>
            <span>アプリケーション サイトからログアウトする</span>
            <li>
              <span>キャプチャを停止する</span>
              <li>
                <span>Set-Cookie HTTP ヘッダのコンテンツを検査する</span>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <i>
      <span>予想される結果:</span>
    </i>
    <span> Set-Cookie ヘッダのコンテンツには文字列 “HttpOnly” を含める必要があります。<span>&nbsp; </span>例:</span>
  </p>
 <pre>
    <span>Set-Cookie: USER=123; expires=Wednesday, 04-Mar-08 23:12:40 GMT; HttpOnly</span>
  </pre>
  <h2>
    <span>
    </span>&nbsp;</h2>
  <h2>
    <span>機密データを操作する場合は、セッション Cookie に SSL 専用のフラグが付けられていることを確認する</span>
  </h2>
  <ol>
    <li>
      <span>Wireshark または同様のネットワーク スニファーを使用してネットワーク トラフィックのキャプチャを開始する</span>
      <li>
        <span>アプリケーション サイトにログインする</span>
        <li>
          <span>アプリケーション サイト内のプライベートおよび機密ページを閲覧する</span>
          <li>
            <span>アプリケーション サイトからログアウトする</span>
            <li>
              <span>キャプチャを停止する</span>
              <li>
                <span>Set-Cookie HTTP ヘッダのコンテンツを検査する</span>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <i>
      <span>予想される結果:</span>
    </i>
    <span> Set-Cookie ヘッダのコンテンツには HttpOnly に加えてには文字列 “secure” を含める必要があります。<span>&nbsp; </span>例:</span>
  </p>
 <pre>
    <span>Set-Cookie: USER=123; expires=Wednesday, 04-Mar-08 23:12:40 GMT; secure; HttpOnly</span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <h2>
    <span>
    </span>&nbsp;</h2>
  <h2>
    <span>Web サイトで機密データを操作する場合は、すべてのページが SSL を使用していることを確認する</span>
  </h2>
  <ol>
    <li>
      <span>Wireshark または同様のネットワーク スニファーを使用してネットワーク トラフィックのキャプチャを開始する</span>
      <li>
        <span>Web ブラウザを開いて構成をチェックし、すべての要素が SSL を使用するように設定されていることを確認する</span>
        <li>
          <span>アプリケーション サイトにログインする</span>
          <li>
            <span>アプリケーション サイト内のプライベートおよび機密ページを閲覧する</span>
            <li>
              <span>アプリケーション サイトからログアウトする</span>
              <li>
                <span>キャプチャを停止する</span>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>
  </p>
  <p>
    <i>
      <span>予想される結果:</span>
    </i>
  </p>
  <p>
    <span>
      <span>a)&nbsp;<span>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>
    </span>
    <span>閲覧したページの URL はすべて</span>
    <span>http://</span>
    <span> ではなく、</span>
    <span>https://</span>
    <span>で始まります。</span>
  </p>
  <p>
    <span>
    </span>
    <span>
      <span>b)&nbsp;<span>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>
    </span>
    <span>サイトが </span>
    <span>http://</span>
    <span> に切り替えると、セッション ID は送信されません (これについてはキャプチャでチェックできます)。</span>
  </p>
  <h2>
    <span>
    </span>&nbsp;</h2>
  <h2>
    <span>クロスサイト スクリプティング脆弱性をページでチェックする</span>
  </h2>
  <ol>
    <li>
      <span>クロスサイト スクリプティング (XSS) 脆弱性 &lt;ph: link&gt; についてアプリケーションの包括的なテストを行います。<span>&nbsp; </span></span>
    </li>
  </ol>
  <p>
    <i>
      <span>予想される結果:</span>
    </i>
    <span> アプリケーションは XSS に対して脆弱ではありません</span>
  </p>
  <p>
    <b>
      <span>
      </span>
    </b>&nbsp;</p>
  <h1>
    <span>
    </span>&nbsp;</h1>
  <h1>
    <span>手順 4: <span> </span>テスト ケースを調整する</span>
  </h1>
  <p>
    <span>基本を網羅したら、最初に戻ってやり残したことはないか二重のチェックを行ってください。<b><i></i></b></span>
  </p>
  <h2>
    <span>すべてのセッション タイプを網羅していることを確認する</span>
  </h2>
  <p>
    <span>さまざまなプラットフォームではセッションにさまざまな名前を使用します。<span>&nbsp; </span>使用されている最も一般的な名前を以下に示します:</span>
  </p>
  <ul>
    <li>
      <span>ASPSESSIONID</span>
      <li>
        <span>JSESESSIONID</span>
        <li>
          <span>PHPSESSID</span>
          <li>
            <span>CFID</span>
            <li>
              <span>CFTOKEN</span>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>
    <span>社内のシステムを使用している場合は、それが使用する識別子を理解していることを確認してください。<span>&nbsp; </span>その他のプラットフォームでもこのリストにない識別子を使用している場合があります。たとえば、Enterprise Java Beans (EJB) では独自の方法でセッションを保持しています。 <span>&nbsp;</span>この項目の最後に一覧表示されている Dr. Dobb の項目では、安全なセッション追跡について説明があり、また EJB<a style="mso-endnote-id: edn2" name="_ednref2" href="about:blank#_edn2" title=""><span><span><span><span><span>[ii]</span></span></span></span></span></a> についても説明します。<b><i></i></b></span>
  </p>
  <p>
    <b>
      <span>
      </span>
    </b>&nbsp;</p>
  <h1>
    <span>
    </span>&nbsp;</h1>
  <h1>
    <span>結論</span>
  </h1>
  <p>
    <span>セッション ハイジャックは攻撃者が Web サービスまたはアプリケーションの正規ユーザーのセッション ID を盗む場合に発生します。<span>&nbsp; </span>他の方法も存在しますが、これは一般的にクロスサイト スクリプティング攻撃を使用して行われます。<span>&nbsp;&nbsp; </span>セッション ID を盗むことにより、攻撃者は脆弱なサイトで被害者のクライアントになりすますことができます。<span>&nbsp; </span>たとえば、攻撃者は被害者であるかのようにオンライン バンキング サイトを閲覧することができます。<span>&nbsp; </span>これは、セッション ハイジャックを極めて危険なものにします。</span>
  </p>
  <p>
    <span>セッション ハイジャック バグをテストするには、セッション管理が動作する方法およびさまざまなセッション ハイジャック攻撃シナリオが動作する方法について理解する必要があります。 セッション ハイジャック脆弱性がコードでどのように見えるのか、それを阻止する軽減策にはどのようなものであるか、また、それらが存在する可能性のあるアプリケーションの場所を検索する方法について学習する必要があります。<span>&nbsp; </span>最後に、最も一般的な脆弱性を観察することによってアプリケーションのテストを開始し、そこからさらに複雑な問題を追及していきます。</span>
    <span>
    </span>
  </p>
  <div>
    <br />
    <hr />
    <div>
      <p>
        <a style="mso-endnote-id: edn1" name="_edn1" href="about:blank#_ednref1" title="">
          <span>
            <span>
              <span>
                <span>
                  <span>[i]</span>
                </span>
              </span>
            </span>
          </span>
        </a>
        <span> Burp Sequencer ヘルプ。<span>&nbsp; </span><a href="http://www.portswigger.net/sequencer/help.html">http://www.portswigger.net/sequencer/help.html</a></span>
      </p>
      <p>
        <span>
        </span>
      </p>
    </div>
    <div>
      <p>
        <a style="mso-endnote-id: edn2" name="_edn2" href="about:blank#_ednref2" title="">
          <span>
            <span>
              <span>
                <span>
                  <span>[ii]</span>
                </span>
              </span>
            </span>
          </span>
        </a>
        <span> 安全なセッション追跡 - 適切な方法を選択することは電子商取引の成功には極めて重要です。 http://www.ddj.com/database/184414717</span>
      </p>
      <p>
        <span>&nbsp;</span>
      </p>
    </div>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>