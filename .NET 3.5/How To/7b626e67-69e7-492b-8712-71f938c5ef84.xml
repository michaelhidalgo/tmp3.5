<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1739012882" Content_Hash="145809246">
  <Metadata>
    <Id>7b626e67-69e7-492b-8712-71f938c5ef84</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>SQL インジェクション バグをテストする方法</Title>
    <Category>入力とデータの検証</Category>
    <Phase>テスト</Phase>
    <Technology>Web アプリケーション</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>適用対象</h1>
  <p>以下に示すようなデータベースと相互作用するすべてのアプリケーション:</p>
  <ul>
    <li>データベースを使用して ASP、ASP .NET、PHP、Visual Basic、C#、Java、または Perl で書かれた Web アプリケーション<li>データベース バックエンドと相互作用する Web 以外のアプリケーション</li></li>
  </ul>
  <p />
  <h1>概要</h1>
  <p>SQL インジェクションは Web データベースに関係する脆弱性の一般的なタイプです。&amp;nbsp;&amp;nbsp;SQL インジェクションは、データベース バックエンドと相互作用する Web サイト アプリケーションで一般的になっています。&amp;nbsp;これらのサイトではユーザー入力に基づいて SQL コマンドまたはクエリを構築します。&amp;nbsp;たとえば、ユーザーが Web フォームに入力した説明に基づいて製品データベースを検索することができます。&amp;nbsp;ユーザーの入力をフィルタリングしなかったり、ストアド プロシージャを使用しなかったり、パラメータ変数を結合することなく SQL クエリを構築した場合、アプリケーションは SQL インジェクションに対して脆弱です。&amp;nbsp;これにより、攻撃者は追加の句、条件、またはコマンドさえも元のクエリで実行するように追加することができます。&amp;nbsp;&amp;nbsp;&amp;nbsp;攻撃者は SQL インジェクション バグを使用して、データの盗用やタンパリング、認証の回避、情報漏えい、および特権の昇格など、さまざまなタイプの攻撃を実行することができます。</p>
  <p>以下に SQL インジェクション バグのテストに必要な手順の概要を示します。</p>
  <ul>
    <li>
      <b>手順 1</b>:  SQL インジェクション攻撃のシナリオを理解する<li><b>手順 2</b>:  ハイリスク コンポーネントとエントリ ポイントを一覧表示する<li><b>手順 3</b>:  テストと調査を開始する<li><b>手順 4</b>:  テスト データの調整</li></li></li></li>
  </ul>
  <p />
  <p>
    <b>手順 1:&amp;nbsp; 攻撃シナリオを理解する</b>
  </p>
  <p>SQL インジェクションをテストする場合に調査する対象を把握できるように、攻撃シナリオを理解することは重要です。&amp;nbsp;ここに一般的な攻撃シナリオを 2 つ示します:</p>
  <ul>
    <li>検索エンジンのシナリオ<li>フォーム認証のシナリオ</li></li>
  </ul>
  <p>
    <b>
      <i>検索エンジンのシナリオ</i>
    </b>
  </p>
  <p>ほとんどの Web サイトには検索ページがあり、そこではユーザーからの検索クエリを受け取って、それで SQL クエリを作成し、SQL バックエンド データベースでクエリを実行し、結果をユーザーに返します。&amp;nbsp;以下のコンポーネントは結果的にこれと同じ SQL を作成します:</p>
 <pre>SELECT &amp;#42; item, description FROM products WHERE description LIKE usersearch (from input)</pre>
  <p>たとえば、Web サーバーはユーザーからフォームまたは以下のような URL のいずれかから検索データを受け取ります:</p>
 <pre>http://www.teammentorexample.com/products/search.php?prod=bike (PHP)</pre>
 <pre>http://www.teammentorexample.com/products/search.asp?prod=bike (ASP)</pre>
  <p>サーバーは検索コンポーネントで以下のようなコードを使用することができます:</p>
 <pre>&amp;#36;query = "select item, description from productTable where description LIKE '&amp;#37;" . &amp;#36;_GET&amp;#91;"prod"&amp;#93; . "&amp;#37;'"&amp;nbsp;&amp;nbsp;(PHP)</pre>
 <pre>var query = "select item, description from productTable where description LIKE '&amp;#37;" &amp;#43;Request.QueryString("prod") &amp;#43; "&amp;#37;'"&amp;nbsp;(ASP)</pre>
  <p>上記の両方のケースで攻撃者は URL を変更し、クエリに連結させて SQL クエリの一部として実行される SQL ステートメントを挿入することができます。&amp;nbsp;攻撃者が催促されて渡された値を変更する場合:</p>
 <pre>any OR 1=1</pre>
  <p>2 番目の条件 1=1 が常に true であるため、クエリはテーブルのすべての行を返します:&amp;nbsp; </p>
  <p>SELECT &amp;#42; item, description FROM products WHERE　description LIKE 'any' OR 1=1</p>
  <p>
    <b>
      <i>Forms Authentication シナリオ</i>
    </b>
  </p>
  <p>ハイリスク コンポーネントのもう一つの例は、Forms Authentication で使用されるコードです。 たとえば、以下のコードは SELECT クエリを構築してユーザーを検証するための資格情報を受け入れます。&amp;nbsp;データはユーザー名とパスワード変数を使用して Web フォームの POST から login.php ページに渡されます。&amp;nbsp;</p>
  <p>SQL インジェクション バグはこのコードに存在します:</p>
 <pre>&amp;#36;query = "SELECT &amp;#42; FROM Accounts WHERE UserName = '" . &amp;#36;_POST&amp;#91;'name'&amp;#93; . "'" . " AND password = '" . &amp;#36;_POST&amp;#91;'pass'&amp;#93; . "'"; </pre>
 <pre>&amp;#36;result = odbc_exec(&amp;#36;connection, &amp;#36;query);</pre>
 <pre>if (&amp;#36;result_count == 0) &amp;#123;</pre>
 <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;print('unable to login');</pre>
 <pre>&amp;#125;</pre>
 <pre>else &amp;#123;</pre>
 <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;print('user logged in');</pre>
 <pre>&amp;#125;</pre>
  <p>攻撃者は最初のシナリオと同じ文字列を送信することができます:</p>
 <pre>any OR 1=1</pre>
  <p>これにより、以下のステートメントが構築されます:</p>
 <pre>SELECT &amp;#42; FROM Accounts WHERE UserName = any or 1=1</pre>
  <p>ステートメントはアカウント テーブルからすべての行を返します。&amp;nbsp;コードの if 条件は false になり、攻撃者は有効なパスワードを使用せずにログインできるようになります。</p>
  <p>
    <b>
      <i>ストアド プロシージャのシナリオ</i>
    </b>
  </p>
  <p>SQL インジェクション バグはアプリケーション層で制限されているとは限りません。&amp;nbsp;たとえば、データベース層で使用されたストアド プロシージャも SQL インジェクションに悩まされる場合があります。&amp;nbsp;製品名をパラメータにして内部に動的な SELECT ステートメントを構築することによってデータベースを検索する以下のプロシージャを考慮します:</p>
  <p>&amp;nbsp;</p>
 <pre>CREATE PROCEDURE sp_SearchProducts &amp;#64;prodname varchar(400) = NULL AS</pre>
 <pre>DECLARE &amp;#64;sql nvarchar(4000)</pre>
 <pre>SELECT &amp;#64;sql = ' SELECT ProductID, ProductName, Category, Price ' &amp;#43;</pre>
 <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;' FROM Product Where ProductName LIKE ''' &amp;#43; &amp;#64;prodname &amp;#43; ''''</pre>
 <pre>EXEC (&amp;#64;sql)</pre>
  <p>&amp;nbsp;</p>
  <p>これにより、アプリケーション層で以下のようなプロシージャを呼び出すことができます:</p>
 <pre>exec sp_SearchProducts('any'' OR 1=1--')</pre>
  <p>最終的なステートメントは以下のようになります:</p>
 <pre>SELECT ProductID, ProductName, Category, Price FROM Product Where ProductName LIKE 'any' OR 1=1&amp;#8212;'</pre>
  <p>&amp;nbsp;</p>
  <p>これにより、製品テーブルのすべての行が返されます。&amp;nbsp;</p>
  <p>このタイプのシナリオには注意が必要です。というのも、ストアド プロシージャとバインド パラメータを使用することで自動的に SQL インジェクションが解決すると一般的に誤信されているからです。</p>
  <p>&amp;nbsp;</p>
  <p>
    <b>手順 2: リスクの高いコンポーネントとエントリ ポイントのリストを作成する</b>
  </p>
  <p>SQL インジェクション テストの次の手順では、コードでユーザー指定の入力からSQL ステートメントが構築されるすべての場所を一覧表示します: これは、アプリケーションがステートメントを操作してデータベースに伝える方法と場所を理解するためです。&amp;nbsp;最も一般的なものを以下に示します:</p>
  <ul>
    <li>Web ページの検索<li>プロファイルに関係する Web ページ<li>認証フォーム<li>電子商取引または金融取引関連のページ<li>データベース相互作用のパブリック API と DCOM メソッド<li>データベース システム レベルのクライアント</li></li></li></li></li></li>
  </ul>
  <p>
    <b>
      <i>ハイリスク コンポーネントを識別する</i>
    </b>
  </p>
  <p>SQL インジェクションの詳細について理解したら、ハイリスク コンポーネントを一覧表示します。これには、コードをホストするメソッド、可能な場合はクエリ文字列の名前、およびクエリの構築に影響する変数名を含めます。&amp;nbsp;</p>
  <p>上記のシナリオで示したようなコードを探します。 Web 入力を使用して SQL ステートメントが構築されたコードです。&amp;nbsp;次に、これらの Web ページをハイリスク コンポーネントとしてすべてリストに表示します。</p>
  <p>
    <b>
      <i>ハイリスク コンポーネントをエントリ ポイントと一致させる</i>
    </b>
  </p>
  <p>ランタイム時に SQL ステートメントが構築されたアプリケーションのすべての場所をリストに表示したら、&amp;nbsp; これらの場所にデータが送り込まれた方法を特定する必要があります。&amp;nbsp;たとえば、危険な SQL ステートメントを構築する "search.asp" という名前の Web ページをリストに表示します。&amp;nbsp;ここに、このページに入力された方法と そのエントリ ポイントは何かをリストに表示します。&amp;nbsp;エントリ ポイントは意図的なもの (プログラムまたはアプリケーションによって予測された) と意図的でないもの (プログラムまたはアプリケーションによって予測されなかった) の両方の可能性があることに留意してください。&amp;nbsp;SQL インジェクションのエントリ ポイントの一般的なリストを以下に示します:</p>
  <ul>
    <li>URL バー コンテンツ<li>Web フォーム入力値<li>Web サービス メソッド<li>ネットワーク パケット<li>パブリック API<li>DCOM メソッド<li>アプリケーション UI テキスト フィールド<li>プロセス間通信パイプ</li></li></li></li></li></li></li></li>
  </ul>
  <p>最初の 3 つは Web サービスとアプリケーションで最も一般的なエントリ ポイントです。&amp;nbsp;ただし、このリストに表示されていない新しいエントリ ポイントを常に調べるようにしてください。&amp;nbsp;危険にさらされたコンポーネントによって操作されたデータが他の手段によって渡されることがないように確認してください。</p>
  <p>理想的には手順 2 の最後に上記に示すようなテーブルが作成されて、テキストの実行を体系的に誘導します。</p>
  <p>
    <b>手順 3: テストと調査を開始する</b>
  </p>
  <p>以下の手順では、考えられる SQL インジェクション バグのヒントを提供するアプリケーションに入力を指定することから始めます。&amp;nbsp;手順 2 で作成したリストを使用して、すべての変数を体系的に検証し、テスト入力が処理される方法を調査することができます。&amp;nbsp;この手順では、ファズ文字列と基本条件を使用して最初のパスを実行することをお勧めします。</p>
  <p>
    <b>
      <i>単純なファズ文字列を使用して開始する</i>
    </b>
  </p>
  <p>最初に推奨するテストでは、いくつかの文字列と一重引用符または丸括弧を最後に追加します。&amp;nbsp;ほとんどの SQL インジェクションのケースでは、この種の文字列はサーバー側のエラーを生成し、クライアントのブラウザに戻って表示されます。</p>
 <pre>xyz') "&amp;#93;</pre>
  <p>次に、サーバーの反応を観察します。&amp;nbsp;ケースによっては、特殊文字をはじき出す場合があります。これは、インジェクションから保護しているサインです。&amp;nbsp;しかし、その他のケースでは、一重引用符などの特殊文字がステートメントを予期せずに閉じたためにアプリケーションが SQL 関連のエラー メッセージを返す場合があります。&amp;nbsp;その結果、ステートメントが動的に構築されたことを推測できます。&amp;nbsp;これは、SQL インジェクション バグが実際に存在するかどうかを観察し続ける必要があることを明示しています。</p>
  <p>
    <b>
      <i>単純な true と false 条件で続ける</i>
    </b>
  </p>
  <p>次の手順では、単純な SQL ステートメントを追加してみます。&amp;nbsp;試行できる最も単純な方法は、1=1 や 2&gt;1 などの整数の比較、または OR が後ろに続く 'a'='a' などの文字の比較です。&amp;nbsp;例: </p>
 <pre>xyz' OR 1=1 --</pre>
  <p>&amp;nbsp;次に結果を観察します。&amp;nbsp; o を挿入した true ステートメントがテーブルのすべての行を返した形跡を探します。&amp;nbsp;次に、false ステートメントを試行して違いを調べます。</p>
 <pre>xyz' OR 1&gt;2 --</pre>
  <p>量またはサーバーの動作の結果が明らかに異なる場合は、SQL インジェクション バグの可能性が高くなります。&amp;nbsp;データベースの構造に関する情報がなかったり、他の深刻な攻撃が可能でない場合であっても、基本的なサーバーおよびエラー メッセージを観察することによって、SQL インジェクションを特定することができます。&amp;nbsp;</p>
  <p>以下のシナリオを考慮します。&amp;nbsp;文字列 "xyz' OR 1=1" が送信されてサーバーが次のような 500 エラーを返します:</p>
 <pre>&amp;nbsp;"Results Buffer too Large" and when "xyz' OR 1&gt;2 -" </pre>
  <p>が送信されると、サーバーは一致がなかったことを示す有効なページを返します。&amp;nbsp;したがって、条件が true の場合、サーバーには多数の結果が返されます。&amp;nbsp;false の場合、結果は返されません。&amp;nbsp;このケースでは、挿入された条件の処理は明らかで SQL インジェクション バグがあるという意味です。&amp;nbsp;悪用されることはないかもしれませんが、存在することは確かで、サーバー動作におけるこの単純な違いがそれを十分に証明しています。</p>
  <p>
    <b>
      <i>注意: 有効な数値結果に注意してください</i>
    </b>
  </p>
  <p>数字の比較を使用する場合、コンテンツによるのではなく、比較によって結果は異なります。&amp;nbsp;たとえば、1=1 を使用している場合、サーバーは "11" の電話番号を返しますが、1&gt;2 が "21" の番号または一致を返す場合は実際の比較を処理していないことを意味します。&amp;nbsp;アプリケーションは 1 と 2 の番号をクエリしているため、結果は異なります。&amp;nbsp;サーバーは追加の条件を別のステートメントとして実行していません。 検索するデータの一部としてそれらを正しく含めているため、SQL インジェクション脆弱性の証拠はありません。&amp;nbsp;このシナリオに注意を払って追加の条件が実際に別々に実行されたか否かを認識する必要があります。</p>
  <p>
    <b>手順 4: テスト ケース データを調整する</b>
  </p>
  <p>この時点で、入力変数からの調査用パスの実行が開始されました。&amp;nbsp;手順 4 では、変数テーブル内の各変数のすべてのエントリ ポイントを網羅することに集中する必要があります。</p>
  <p>
    <b>
      <i>データベース タイプのバージョンを把握する</i>
    </b>
  </p>
  <p>データベースのアプリケーションやバージョンが異なると、クエリの処理も異なります。&amp;nbsp;たとえば、SQL サーバーはステートメントで &amp;#43; を使用して文字列を連結しますが、Oracle は &amp;#124; を使用します。&amp;#124;.&amp;nbsp;&amp;nbsp;SQL サーバーではセミコロン (;) で区切られている限り、ステートメント内でバッチされたまたは複数の SQL コマンドを実行できますが、Oracle および MySQL ではこれを禁止しています。&amp;nbsp;データベースのブランドおよびバージョンは、サーバーでネットワーク ポートをスキャンするか、ネットワーク トラフィックをスニッフィングするか、または SQL に関連するエラー メッセージを調べることによって、収集できます。</p>
  <p>
    <b>
      <i>エントリ ポイントに応じて文字列の書式とエンコーディングを考慮する</i>
    </b>
  </p>
  <p>危険性のある変数およびエントリ ポイントを調査する際には、異なる形式が各エントリ ポイントに適用されていることを考慮してください。&amp;nbsp;たとえば、この項目では以下の文字列を Web フォームに渡すことを説明しました。</p>
 <pre>xyz' OR 1=1 --</pre>
  <p>しかしながら、URL は空白スペースを許可しないため、URL で上記のような文字列を渡すことはできません。&amp;nbsp;サーバー アプリケーションは、異なるエンコーディング関数を使用して URL コンテンツを送信します。&amp;nbsp;サーバー アプリケーションは、データをエンコードしてからサーバー側でデコードします。&amp;nbsp;エンコーディングとデコードは、サーバーのプログラミング言語によって異なります。&amp;nbsp;たとえば、エンコーディング関数は空白スペースをプラス (&amp;#43;) 記号で置換する場合があり、上記の文字列は次のようになります:</p>
 <pre>xyz'&amp;#43;OR&amp;#43;1=1&amp;#43;--</pre>
  <p>他のエンコーディング ケースでは、サーバーは空白スペースを &amp;#37;20.&amp;nbsp; で置換する場合もあります。 その場合、テスト文字列は次のように表示される必要があります:</p>
 <pre>xyz'&amp;#37;20OR&amp;#37;201=1&amp;#37;20--</pre>
  <p>この一般的なエンコーディング スキームではスペースを 16 進数の値 &amp;#37;HH で置換します。&amp;nbsp;また、一重引用符などの予約文字をエンコードすることも推奨します。&amp;nbsp;その結果、エンコードした文字列は次のように表示されます:</p>
 <pre>xyz&amp;#37;27&amp;#43;OR&amp;#43;1&amp;#37;3D1&amp;#43;--</pre>
  <p>Java URL エンコード関数は次のような文字列を使用して特殊文字を変換します &amp;#37;uXXXX ここで XXXX は文字です&amp;#180;s Unicode 値は 4 桁で表示されます。&amp;nbsp;上記の文字列は次のように表示されます:</p>
 <pre>xyz&amp;#37;u2019&amp;#43;OR&amp;#43;1&amp;#37;3D1&amp;#43;--</pre>
  <p>エンコーディングのメカニズムにはさまざまなタイプがあります。&amp;nbsp;簡単にソースを見直して使用されているエンコーディング関数と特定の関数で利用可能なドキュメンテーションを確認することは重要です。 詳細については、<a href="http://en.wikipedia.org/wiki/Percent-encoding">http://en.wikipedia.org/wiki/Percent-encoding</a> で「Percent Encoding」を参照してください。</p>
  <p>
    <b>
      <i>注意:&amp;nbsp; ダブル エンコーディングを使用するように試行する</i>
    </b>
  </p>
  <p>ダブル エンコーディング ケースを実行するように試行することは重要です。&amp;nbsp;&amp;nbsp;ダブル エンコーディングはセキュリティ コントロールを回避するための特殊なエンコーディングです。&amp;nbsp;これにより、パーセント文字は 16 進数値 (25) で置換されます。&amp;nbsp;次のようなシングル エンコーディングを使用してテストしている場合:</p>
 <pre>xyz&amp;#37;27&amp;#43;OR&amp;#43;1&amp;#37;3D1&amp;#43;--</pre>
  <p>次に、ダブル エンコーディングの以下の文字列を試行します:</p>
 <pre>xyz&amp;#37;2527&amp;#43;OR&amp;#43;1&amp;#37;253D1&amp;#43;--</pre>
  <p>
    <b>
      <i>異なる構文を試行する</i>
    </b>
  </p>
  <p>SQL インジェクションのテストの目的は、追加のステートメントを追加することによって、元の SQL ステートメントの論理を変えることにあります。&amp;nbsp;しかし、追加のステートメントを実行するには、攻撃されたクエリが構文的に正解でないと、実行に失敗します。&amp;nbsp;テスト入力のさまざまな変種を考慮して引用符および括弧の閉じるに対処します。&amp;nbsp;ここに試すことができるいくつかの変種を示します:</p>
  <ul>
    <li>x' or 1=1 -- <li>x' or 'a'='a <li>x" or 1=1 # <li>x&amp;#37;' or 1=1 --&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<li>x&amp;#37;" or 1=1 # <li>x') or 1=1 # &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<li>x') or 'a'='a' -- &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<li>x') or ('a'='a</li></li></li></li></li></li></li></li>
  </ul>
  <p>
    <b>
      <i>テストの結果を取得するさまざまな方法を考慮する</i>
    </b>
  </p>
  <p>SQL インジェクション データはさまざまなチャネルで取得することができます:</p>
  <ul>
    <li>
      <b>イン バンド</b> - 攻撃されたサーバーがデータを攻撃者に返す場合は、Web ページの表示テーブルなどの既存のチャネルを使用するか、または制限されたページにユーザーをログオンします。<li><b>アウト オブ バンド</b> – サーバーにトロイの木馬をインストールするなど、攻撃者が新しい接続を開いてサーバーからデータを取得する場合は、xp_cmdshell などの高度なストアド プロシージャを使用してリモート接続を開くか、または MS SQL の OPENROWSET() を使用してデータベースに直接接続します。 <li><b>推測</b> - 攻撃されたサーバーが攻撃者にデータを送信しないのに攻撃者が攻撃を実行する必要がある場合、別のクエリを使用してエラー コードを観察します。</li></li></li>
  </ul>
  <p>この手順では、サーバーからデータを取得するさまざまな方法を網羅します。&amp;nbsp;&amp;nbsp;<b><i>&amp;nbsp;</i></b></p>
  <p>
    <b>
      <i>さまざまなペイロードを実行する</i>
    </b>
  </p>
  <p>単純な true または false 条件を実行しても、具体的な結果が生成されない場合があります。&amp;nbsp;そのため、さまざまなペイロードを試行する必要があります。&amp;nbsp;SQL インジェクション攻撃には実行できるペイロードが何百とあります。&amp;nbsp;これらのほとんどのペイロードは SQL サーバー アプリケーションによって異なり、Web で見つけることができます。&amp;nbsp;どれほどペイロードが違ってくる可能性があるかを知るために、データベースから情報を盗もうとするケースを思い浮かべます。 &amp;nbsp;ペイロードは以下の間で異なる場合があります。</p>
  <ul>
    <li>(OR 1=1 のような) すべての行を返す単純な条件を有する OR <li>追加の SELECT クエリを実行して元の結果セットに結果を加える UNION SELECT ステートメント。 詳細については、<a href="http://www.securitydocs.com/pdf/2656.PDF">SQL インジェクションを参照してください。 使用している Web アプリケーションは脆弱なのか?</a><li>ハッカーのデータベースへの接続を開き、リモートの攻撃者にデータを送信する OPENROWSET コマンド。 詳細については、次を参照してください。<a href="http://www.appsecinc.com/presentations/Manipulating_SQL_Server_Using_SQL_Injection.pdf">SQL インジェクションの使用による Microsoft SQL Server の操作</a><li>攻撃者に情報を送信して返すバックドアやトロイの木馬をインストールするための xp_cmdshell などのストアド プロシージャの呼び出し。 <li>1 バイトずつデータを取得するために CASE ステートメントを使用する推論攻撃。 詳細については、<a href="http://www.ngssoftware.com/papers/sqlinference.pdf">SQL インジェクションと推論によるデータ マイニング</a></li></li></li></li></li>
  </ul>
  <p>タンパリングにもさまざまなシナリオがあります。</p>
  <ul>
    <li>データベースからテーブルを削除するための追加の DROP ステートメント <li>テーブルにレコードを追加するための追加の DROP ステートメント <li>テーブルの既存のデータを置換するための追加の UPDATE ステートメント</li></li></li>
  </ul>
  <p>異なるペイロードを試行する必要があります。&amp;nbsp;&amp;nbsp;テスト中のデータベースに対して実行できるすべてのペイロードをリストすることが推奨されます。&amp;nbsp;&amp;nbsp;その次は、前記の構文的に異なるステートメントで各ペイロードを実行します。&amp;nbsp;これを実行することで、SQL インジェクション テスト ケースを拡張し、最大のテスト範囲を得ます。 </p>
  <p>それでも、ペイロード テストをやり過ぎないことも重要であることに留意してください。&amp;nbsp;特定の変数エントリ ポイントが SQL インジェクションに対する危険にさらされていない (そのコマンド文字がパラメータ化またはエスケープされている場合がある) ことが分かったら、次の変数に進み、多くのペイロードをテストする無駄な時間をかけないでください。&amp;nbsp;</p>
  <p>
    <b>
      <i>注意:&amp;nbsp; 適切なテスト モニターやインジケータを使用する</i>
    </b>
  </p>
  <p>インジェクションをテストする際、特にデータを返すために別のチャンネルを開く帯域外では、テストの通過または失敗を待つインジケータを必ず用意してください。&amp;nbsp;ペイロードがバックドアを開く場合は、バックドアに接続します。&amp;nbsp;&amp;nbsp;ペイロードがデータベースをリモート データベースにコピーする場合は、そのサーバーをセットアップし、盗まれたデータを受信する準備を行います。&amp;nbsp;&amp;nbsp;適切なインジケータとモニターを用意することが、すべてのテスト ケースの結果を求める唯一の方法です。</p>
  <p>
    <b>
      <i>データベース構造について学び、テスト ケースを調整するために使用する</i>
    </b>
  </p>
  <p>ほとんどすべての情報漏えいとタンパリングのシナリオでは、攻撃者はテーブルとカラム名を知る必要があります。&amp;nbsp;&amp;nbsp;データベースの詳細の発見において成功する 1 つの方法は、エラー メッセージを巧みに使用することです。&amp;nbsp;&amp;nbsp;テーブル名とカラムなどのデータベース構造を発見するもう 1 つの方法は、テーブル名やカラム名をブルート フォースで有効なものを探すことです。&amp;nbsp;最後に、推論技術の使用により、データベースに関する詳細を発見できます。</p>
  <p />
  <h1>結論</h1>
  <p>良い SQL インジェクション テストは、異なるエントリ ポイントを通るすべての SQL 関連の入力変数の範囲が適切であることに依存します。&amp;nbsp;アプリケーションの SQL 関連の入力変数、クエリ構造、およびエントリ ポイントに関する攻撃のシナリオを理解して、包括的な分析を行うことから始めます。&amp;nbsp;基本的なテストを試行し、異なるエントリ ポイントに基づいてテスト データを調整して、アプリケーションがどう反応するかを注意して観察します。&amp;nbsp;&amp;nbsp;最後に、適切なペイロードを使用してデータを調整し、取得または推測されたデータベース構造でテスト ケース データを調整し続けます。</p>
  <h1>追加リソース</h1>
  <div>
    <br />
  </div>
  <ul>
    <li>パーセント エンコーディング&amp;nbsp;Wikipedia <a href="http://en.wikipedia.org/wiki/Percent-encoding">http://en.wikipedia.org/wiki/Percent-encoding</a><li><a href="http://www.securitydocs.com/pdf/2656.PDF">SQL インジェクションを参照してください。 使用している Web アプリケーションは脆弱なのか? Kevin Spett。&amp;nbsp;Spi Dynamics。</a><li><a href="http://www.appsecinc.com/presentations/Manipulating_SQL_Server_Using_SQL_Injection.pdf">SQL の使用による Microsoft SQL Server の操作  インジェクション。 Cesar Cerrudo。 Application Security, Inc.</a><li><a href="http://www.ngssoftware.com/papers/sqlinference.pdf">SQL インジェクションと推論によるデータマイニング。 &amp;nbsp;David Litchfield&amp;nbsp;NGS ソフトウェア。</a></li></li></li></li>
  </ul>
  <h1>関連する項目</h1>
  <ul>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>