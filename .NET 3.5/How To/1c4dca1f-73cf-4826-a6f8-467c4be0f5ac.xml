<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-160466625" Content_Hash="-1579561141">
  <Metadata>
    <Id>1c4dca1f-73cf-4826-a6f8-467c4be0f5ac</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>脅威モデルを作成する</Title>
    <Category>セキュリティ工学</Category>
    <Phase>設計</Phase>
    <Technology> 任意</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>概要</h1>
  <p>このページでは、Web アプリケーションの脅威モデルの作成方法を説明します。 脅威モデルのアクティビティにより、セキュリティ設計のモデルを作成し、欠陥のある設計に時間やリソースを費やしたり、問題の修正が困難になったりする前に、セキュリティ設計の潜在的な不備や脆弱性を明らかにすることができます。 このページは、脅威モデルのアクティビティに役立つ、優先度を設定された脆弱性のカテゴリーや脅威のリストを提供しています。 </p>
  <h1>目次</h1>
  <ul>
    <li>目的<li>概要<li>はじめに<li>入力<li>出力<li>手順の概要<li>手順 1: セキュリティ上の目的の特定<li>手順 2: アプリケーション概要の作成<li>手順 3: アプリケーションの分解<li>手順 4: 脅威の特定<li>手順 5 脆弱性の特定<li>次の作業<li>Agile の留意事項<li>MSF Agile の留意事項<li>その他のリソース</li></li></li></li></li></li></li></li></li></li></li></li></li></li></li>
  </ul>
  <h1>
    <br />目的</h1>
  <p>このモジュールの手順を実行することで、以下のことが可能になります。</p>
  <ul>
    <li>特定のアプリケーション シナリオに関連する脅威を特定する <li>アプリケーション設計の主要な脆弱性を特定する <li>セキュリティ設計を改善する</li></li></li>
  </ul>
  <h1>概要</h1>
  <p>脅威モデルは、アプリケーションの脅威や脆弱性を特定して評価するための、構造化されたアクティビティです。 ここでは、アプリケーション設計プロセスの初期の段階でセキュリティ設計の問題を特定する際に役立つ、脅威モデルの質問方式のアプローチを提示します。 このアプローチにより、アプリケーション シナリオの基本的な脅威モデルを迅速に作成できます。 作成した脅威モデルは、アプリケーション設計を初期段階から洗練させたり、チーム メンバーのコミュニケーションを促進させたりするのに役立ちます。 </p>
  <p>ここで示される 脅威モデルのアプローチは、脆弱性の特定と対処を中心的に扱います。 アクティビティの初期段階で特定するセキュリティ上の目的、脅威、攻撃は、アプリケーションの脆弱性を探す際に役立つように設計されたスコーピング メカニズムです。 特定した脆弱性は、設計の具体化やセキュリティ テストの指示や対象範囲の決定に役立ちます。</p>
  <h1>はじめに</h1>
  <p>このモジュールを使用してアプリケーションに対して効果的な脅威モデルを迅速に作成します。 このモジュールを使用する際は、以下に留意してください。</p>
  <ol>
    <li>
      <p>
        <b>手順または実装が完了できなくてもそこでとどまらない:  </b>アプローチに集中します。 特定の手順で行き詰まった場合は、手順 4 の「脅威を特定する」までスキップします。このアクティビティの主な目的は、モデリングのためのモデルではなく、セキュリティ設計を改善することです。 </p>
      <li>
        <p>
          <b>シナリオを使用し、モデリング アクティビティの範囲範囲を決める: </b> スコープ外のシナリオを特定し、脅威モデルのアクティビティを制限します。 たとえば運用手順などが 調査の対象範囲外になる場合があります。 </p>
        <li>
          <p>
            <b>既存の設計文書がある場合は、それらを使用する: </b> 文書化された使用事例やユーザー ストーリー、データ フロー図、アーキテクチャ図、その他の設計文書がある場合はそれらを使用します。 </p>
          <li>
            <p>
              <b>最初にホワイトボードを用意する: </b> 文書情報の収集を開始する前にホワイトボードを用意しておくと、作業を簡単に進めることができ、細部で迷うことがなくなります。 デジタル カメラや印刷機能付きのホワイトボードを使用して、ホワイトボードの情報を文書化して配布すると便利な手法です。 </p>
            <li>
              <p />
              <b>反復アプローチを使用する: </b> 設計と開発を継続し、詳細を随時追加しながら脅威モデルを発展させます。 継続的なモデリングを行うことでリスクを軽減し、設計上の決定を通知します。 たとえば設計プロセスの初期段階では、基本的な使用事例、初期展開のトポロジー、アプリケーション レイヤーのアイディアしかない場合があります。 反復アプローチを使用すれば、モデリングのプロセスをより深く理解し、より詳細な情報を得るにつれて、脅威モデルを発展させて「仮定に基づいた」シナリオを検証することができます。 <p>より形式的なアプローチを採用し、モデルを再検討するためのマイルストーンを特定することもできます。 最も重要なことは、新しいレベルのリスクが懸念される技術上の判断を下す際や、重要な設計上の選択をする際に、デルを再検討することです。 </p><li><p><b>テンプレート (Web アプリケーション脅威モデル) をレビューして使用する: </b> 脅威モデルを作成する際は、手引きとなるテンプレートを使用します。 テンプレートには、このページで説明されている各手順の終了基準が含まれます。 </p><li><b>アクティビティを状況に適応させる: </b> 新しい Threat Modeling を行う場合、アプローチについてより深く理解するために、この文書に続けて手引書の「ウォークスルー: Web アプリケーションの脅威モデルの作成」を確認することを検討します。 既存のアプリケーションを使用する場合、手順 4 および 5 のアプローチで脅威と脆弱性を特定できます。 この情報により、どこを重点的に確認すればよいかを判断できます。 <li><p><b>システム管理者およびネットワーク管理者からホストとネットワークの制約についての情報を得る: </b> 完全な展開シナリオを導き出して理解するには、ホスト設定、ファイアウォール ポリシー、可能なプロトコルやポートなどの情報が必要です。 システム管理者やネットワーク管理者に連絡してこれらの情報を得ます。 </p></li></li></li></li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <h1>入力</h1>
  <p>Threat Modeling では以下の入力が便利です。</p>
  <ul>
    <li>使用事例と使用シナリオ<li>データ フロー<li>データ スキーマ<li>配置図</li></li></li></li>
  </ul>
  <p>これらはすべて役立ちますが、いずれも必須ではありません。 しかし、アプリケーションの主要な機能とアーキテクチャについての知識は必ず必要です。</p>
  <h1>出力</h1>
  <p>脅威モデル アクティビティの出力は脅威モデルです。 脅威モデルでキャプチャーされる主な項目には以下のものがあります。</p>
  <ul>
    <li>脅威のリスト<li>脆弱性のリスト</li></li>
  </ul>
  <h1>手順の概要</h1>
  <p>図1 に脅威モデルの5 つの主要な手順を示します。 </p>
  <p>
    <img alt="" src="http://msdn2.microsoft.com/en-us/library/ms978527.f01tmwa01(en-us,MSDN.10).gif" border="0" />
  </p>
  <p>
    <b>図 1:  脅威モデルの反復プロセス</b>
  </p>
  <p>手順は以下のとおりです。</p>
  <ol>
    <li>
      <p>
        <b>セキュリティの目的を特定します。</b> 目的を明確にすることにより、脅威モデルのアクティビティに注目して、後続の手順にどの程度労力を費やす必要があるかを判断できます。 </p>
      <li>
        <p>
          <b>アプリケーション概要を</b>
          <b>作成する:  </b>アプリケーションの重要な特性と動作者を項目別に分類しておくと、ステップ 4 で行う関連する脅威の特定に役に立ちます。 </p>
        <li>
          <p>
            <b>アプリケーションを分解します。</b> アプリケーションの構造を詳細に把握することにより、脅威の関連性と詳細を簡単に解明できます。 </p>
          <li>
            <p>
              <b>脅威を特定します。 </b>ステップ 2 と 3 で得られた詳細な情報を使用して、アプリケーションのシナリオとコンテキストに関連する脅威を特定します。 </p>
            <li>
              <p>
                <b>脆弱性を特定します。</b> アプリケーションの各レイヤーをレビューし、脅威に関連する脆弱性を特定します。 脆弱性のカテゴリーを利用し、最も間違いが起こりやすい領域を集中的に確認します。 </p>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>アプリケーション開発ライフ サイクルが進み、アプリケーション設計の詳細が明らかになるにしたがって、脅威モデルを徐々に詳細化します。 脅威モデルで特定された主要なリソースは、パフォーマンスや機能の観点からも主要なリソースとなる傾向があるため、モデルを再検討して調整することですべてのニーズのバランスを取ることができます。 これはプロセスの結果として一般的かつ価値のあるものです。</p>
  <h1>手順 1: セキュリティ上の目的の特定</h1>
  <p>セキュリティ上の目的は、データとアプリケーションの機密性、完全性、可用性に関連する目標と制約です。 以下の要素が含まれます。</p>
  <ul>
    <li>
      <b>機密性: </b> 不正な情報漏えいに対する保護を含みます。 <li><b>完全性: </b> 情報の不正な変更の防止を含みます。 <li><b>可用性: </b> 攻撃にさらされている際の必要なサービスの提供を含みます。 </li></li></li>
  </ul>
  <p>セキュリティ固有の目標は、プロジェクトの目的のサブセットであり、 脅威モデルにおいてこれらをガイドとして利用してください。 セキュリティ上の目的を制約の観点から考えると便利な場合があります。 「何が起きてほしく<i>ない</i> か」を考えてみましょう。たとえば、攻撃者にユーザーの Credential 情報を盗まれるという状況は回避する必要があります。 </p>
  <p>重要なセキュリティ上の目的を特定することで、集中的に作業する領域を判断できます。 目的の特定は、潜在的な攻撃者の目標を理解し、アプリケーションの中でより細かな注意が必要な領域に集中するうえでも役立ちます。 たとえば、顧客のアカウント情報が保護を必要とする機微データであると特定した場合は、データがどの程度安全に保存されているか、データへのアクセスがどのように制御および監査されているかを調査できます。</p>
  <p>セキュリティ上の目的を決定するには、以下の点について検討します。</p>
  <ul>
    <li>
      <b>保護が必要なクライアント データは何か: </b> たとえば、アプリケーションが使用するユーザー アカウントとパスワード、個人情報を含む顧客のアカウント情報、財務履歴や取引記録、顧客のクレジット カード番号、口座情報、旅行日程などがあります。 <li><b>コンプライアンス要件があるかどうか: </b> コンプライアンス要件には、セキュリティ ポリシー、プライバシー法、規制や標準が含まれます。 <li><b>具体的なサービス品質要件が定められているかどうか:  </b>サービス品質要件には可用性やパフォーマンス要件が含まれます。 <li><b>保護が必要な無形アセットがあるかどうか: </b> 無形資産には会社の評判、取引上の機密情報、知的財産が含まれます。 </li></li></li></li>
  </ul>
  <p>以下は一般的なセキュリティ上の目的の例です。</p>
  <ul>
    <li>攻撃者がパスワードや個人情報などの機微な顧客データを取得できないようにする。 <li>アプリケーションの可用性について同意したサービス レベルを満たす。 <li>会社のオンライン ビジネスの信頼性を保護する。 </li></li></li>
  </ul>
  <h1>手順 2: アプリケーション概要の作成</h1>
  <p>この手順では、Web アプリケーションの動作の概要を決定します。 目的は、アプリケーションの主な機能、特性、クライアントを特定することです。 この手順は、手順 4 で関連する脅威を特定するのに役立ちます。</p>
  <blockquote>
    <b>注意</b>: &nbsp;&nbsp;脅威モデルが反復プロセスであることを忘れないでください。 この手順にとどまる必要はありません。 現時点で可能な限りの詳細を特定し、設計が定まるにしたがって後から詳細を追加してください。 たとえば、設計の中間段階で物理的な配置にまだ取り組んでいないためにデータが少ない場合であっても、この手順は実行できます。 詳細な項目は判明した時点で追加してください。</blockquote>
  <p>アプリケーション概要の作成方法: </p>
  <ul>
    <li>
      <b>完全な配置シナリオを作成する</b>
      <li>
        <b>ロールを特定する</b>。<li><b>主な使用シナリオを特定する</b><li><b>技術を特定する</b>。<li><b>アプリケーションのセキュリティ メカニズムを特定する</b></li></li></li></li>
    </li>
  </ul>
  <p>各項目は次のセクションで説明します。</p>
  <h2>完全な配置シナリオを作成する</h2>
  <p>ホワイトボードを使用して完全な配置シナリオを作成します。 最初に、アプリケーションの構成や構造、サブシステム展開上の特性を説明する大まかな図を作成します。 認証、認可、通信メカニズムは明らかになり次第、詳細を追加します。 設計プロセスの初期段階では、すべての詳細を把握しておく必要はありません。</p>
  <p>図 2 に、アプリケーションのアーキテクチャと一部の詳細を表した初期のホワイトボードの図の例を示します。</p>
  <p>
    <img alt="" src="http://msdn2.microsoft.com/en-us/library/ms978527.f01tmwa02(en-us,MSDN.10).gif" border="0" />
  </p>
  <p>
    <b>図 2:  アプリケーションのアーキテクチャを表したホワイトボードの図の例</b>
  </p>
  <p>一般的に、配置図は以下の要素を含む必要があります。</p>
  <ul>
    <li>
      <b>完全な配置トポロジー:  </b>サーバのレイアウトを示し、イントラネット、エクストラネット、インターネットのアクセスを指定します。 論理的なネットワーク トポロジーから開始し、詳細が明らかになり次第、物理トポロジーを示すものに洗練させていきます。 具体的な物理トポロジーの選択に応じて、脅威を追加または削除できます。 <li><b>論理レイヤー: </b> プレゼンテーション レイヤー、ビジネス レイヤー、データ アクセス レイヤーの場所を示します。 詳細が明らかになり次第、物理サーバ境界を含めたものに洗練させていきます。 <li><b>主要コンポーネント:  </b>各論理レイヤーの重要なコンポーネントを示します。 詳細が明らかになり次第、実際のプロセスやコンポーネント境界を含むものに洗練させていきます。 <li><b>主要なサービス: </b> 重要なサービスを特定します。 詳細が明らかになり次第、これらをプロセスとして表示します。 <li><b>通信ポートおよびプロトコル:  </b>互いに通信するサーバ、コンポーネント、サービスとその方法を示します。 詳細が明らかになり次第、具体的な送受信の情報パッケージを示します。 <li><b>識別情報: </b> アプリケーションや関連するサービス アカウントが使用する識別情報を示します (該当する場合)。 <li><b>外部依存関係: </b> アプリケーションの外部システムとの依存関係を示します。 モデリング プロセスの後半で、外部システムに対する仮定が間違っていたり、外部システムが何らかの方法で変更されたりする場合、この情報は起こり得る脆弱性の特定に役立ちます。 </li></li></li></li></li></li></li>
  </ul>
  <blockquote>
    <b>注意</b>: &nbsp;&nbsp;設計が発展するにしたがい、定期的に脅威モデルを再検討して詳細を追加する必要があります。 たとえば、初期段階ではコンポーネントの全てを把握できない場合があります。 必要に応じてアプリケーションを分割し、脅威の詳細を把握します。</blockquote>
  <h2>ロールを特定する</h2>
  <p>アプリケーションのロール、つまりアプリケーションで誰が何をするか、を特定します。 ユーザーが何をするか。 高い権限を持つユーザー グループはどのようなものになるか。 たとえば、データについて読み取れるのは誰か、更新できるのは誰か、削除できるのは誰かなど。 </p>
  <p>ロールを特定することで、何が起こり、何が起こってはならないかを判断できるようになります。</p>
  <h2>主要な使用シナリオを特定する</h2>
  <p>アプリケーションの重要な機能は何か。 機能を利用して何ができるか。 アプリケーションの 使用事例を使用してこれらの情報を得ます。 アプリケーションの主な機能と使用方法を特定し、「作成」、「読み取り」、「更新」、「削除」の要素を把握します。 </p>
  <p>主要な機能は通常、使用事例の文脈で説明されます。 使用事例は、アプリケーションの使用目的や、起こり得る誤用について理解する際に役立ちます。 使用事例により、モデリング プロセスの後半で脅威を特定する際にデータ フローを特定して集中的に作業できます。</p>
  <p>可能性のあるユース ケースをすべてリストする必要はありません。 アプリケーションの重要な「作成」、「読み取り」、「更新」、「削除」の機能を実行する主要な使用事例の特定から始めます。 たとえば、従業員が使用する人材管理アプリケーションには以下の使用事例が含まれます。</p>
  <ul>
    <li>従業員が財務データを確認する。 <li>従業員が個人データを更新する。 <li>マネージャーが従業員の情報を確認する。 <li>マネージャーが従業員の記録を削除する。 </li></li></li></li>
  </ul>
  <p>これらのケースでは、ビジネス ルールの誤用の可能性を調べることができます。 たとえば、ユーザーが他のユーザーの個人情報を変更しようとする場合があります。 完全な分析を行うには、同時進行する複数の 使用事例を検討しなければならない場合もよくあります。 </p>
  <p>さらに、検討の対象範囲外となるシナリオを特定し、主要なシナリオに限定して議論します。 たとえば、バックアップや復元などの実際の運用手順は、初期の 脅威モデルでは対象範囲外となる場合があります。</p>
  <h2>技術を特定する</h2>
  <p>可能な場合は、ソフトウェアの技術や主要な機能および使用する技術のリストを作成します。 以下を特定します。</p>
  <ul>
    <li>オペレーティング システム<li>Web サーバ ソフトウェア<li>データベース サーバ ソフトウェア<li>プレゼンテーション、ビジネス、データ アクセスの各レイヤーで使用される技術<li>開発言語</li></li></li></li></li>
  </ul>
  <p>技術を特定することにより、脅威モデル アクティビティの後半で技術固有の脅威を集中的に確認できます。 また、正確で最も適切な軽減策の決定にも役立ちます。 </p>
  <h2>アプリケーションのセキュリティ メカニズムの特定</h2>
  <p>以下について、判明している重要なポイントを特定します。</p>
  <ul>
    <li>入力とデータの検証<li>認証<li>認可<li>設定管理<li>機微データ<li>セッション管理<li>暗号化<li>パラメータ操作<li>例外管理<li>監査とログの記録</li></li></li></li></li></li></li></li></li></li>
  </ul>
  <p>この作業の目的は、注目すべき詳細を特定し、必要に応じて詳細を追加し、さらに調査が必要な領域を特定することです。</p>
  <p>たとえば、データベースによるアプリケーションの認証方法やユーザーの認可方法が判明する場合があります。 アプリケーションが認証や認可を実行するその他の領域が判明する場合があります。 入力検証の実行方法について特定の詳細が判明する場合があります。 これらを含むアプリケーションのセキュリティ メカニズムについての重要なエレメントに注目します。</p>
  <h1>手順 3: アプリケーションの分解</h1>
  <p>この手順では、アプリケーションを分解して信頼境界、データ フロー、エントリ ポイント、Exit Points を特定します。 アプリケーションの構造についての理解が深いほど、脅威や脆弱性を発見しやすくなります。 アプリケーションの分解方法: </p>
  <ul>
    <li>
      <b>信頼境界を特定します。</b>
      <li>
        <b>データ フローを特定する</b>
        <li>
          <b>エントリ ポイントを特定する</b>
          <li>
            <b>Exit Points を特定する</b>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>各項目は次のセクションで説明します。</p>
  <h2>信頼境界を特定する</h2>
  <p>アプリケーションの信頼境界を特定すると、注意が必要な領域を集中的に分析できるようになります。 信頼境界は、信頼レベルが変化する場所を示します。 信頼性は、機密性と完全性の観点から考えることができます。 たとえば、リソースへのアクセスや操作に固有のロールや特権レベルが必要なアプリケーションで、アクセス制御レベル変化すると、信頼レベルも変化します。 他の例としては、アプリケーションのエントリ ポイントで、エントリ ポイントに渡されたデータを完全に信頼できない状況があります。</p>
  <p>信頼境界の特定方法: </p>
  <ul>
    <li>外部システムの境界の特定から始めます。 たとえば、アプリケーションがサーバ X へのファイルへの書き込み、サーバ Y のデータベースへのコール、Web サービス Z のコールを行える場合、これがシステム境界を定義します。 <li>アクセス制御ポイントやアクセスのために追加特権やロール メンバーシップが必要な場所を特定します。 たとえば、特定のページの閲覧がマネージャーに限定されている場合があります。 ページにアクセスするには認証が必要で、さらに呼び出し元が特定のロールを持つメンバーであることが必要です。 <li>信頼境界をデータ フローの観点から特定します。 各サブシステムについて、アップストリーム データ フローまたはユーザー入力が信頼できるかどうかを検討します。信頼できない場合は、データ フローと入力の認証方法および認可方法を検討します。 信頼境界にどのエントリポイントが存在するかを把握することで、これらの重要なエントリ ポイントで脅威を集中的に識別できます。 たとえば、信頼境界にあるエントリ ポイントを介して渡されたデータに対してより厳密な検証を行う場合があります。 </li></li></li>
  </ul>
  <p>以下に信頼境界の例を示します。</p>
  <ul>
    <li>周囲のファイアウォール:  ファイアウォールは多くの場合、最初の信頼境界となります。 信頼できないインターネットからの情報のうち、条件に適合したものを信頼されるデータ センターに移動します。 <li>Web サーバとデータベース サーバの間の境界:  データベースにはアプリケーションの信頼境界が含まれる場合と含まれない場合があります。 Web サーバは多くの場合、データベースの 2 番目のファイアウォールとして機能します。 これによってデータベースへのネットワーク アクセスは大幅に制限されるため、Attack Surface (攻撃対象領域) は縮小します。 データ センター内のネットワーク トポロジーを記述します。 データベースへの書き込みを行う他のアプリケーションが存在する場合、 これらのアプリケーションを信頼できるかどうかを確認します。 データベースへの書き込みを行うアプリケーションが信頼できる場合でも、データベースが信頼できるとは限りません。保護されているかどうかを確認する必要があります。 <li>特権データ ( 特定のユーザーのみが利用可能であるはずのデータ) を暴露しているビジネス コンポーネントへのエントリ ポイント:  この場合、アクセス チェックを実行し、適切な呼び出し元のみがアクセスを許可されていることを確認する必要があります。 これが信頼境界となります。 <li>アプリケーションとサード パーティ サービスの間の境界:  サービスの同一性を信頼できるかどうか。 サービスから返されるデータを信頼できるかどうか。 </li></li></li></li>
  </ul>
  <h2>データ フローを特定する</h2>
  <p>アプリケーション全体にわたって、アプリケーションのデータ入力をエントリからイグジットまで追跡します。 これにより、アプリケーションと外部システムやクライアントとの相互作用や内部コンポーネントの相互作用を理解できます。 信頼境界を横断するデータ フローや信頼境界のエントリ ポイントでデータがどのように検証されるかに特に注意する必要があります。 機微データ項目とこれらがシステム全体にわたってどのように移動するか (ネットワークを通じて渡される場所や維持される場所) にも特別な注意が必要です。</p>
  <p>優れたアプローチは、最高レベルから開始し、各サブシステム間のデータ フローを分析してアプリケーションを分解する方法です。 たとえば、Web アプリケーション、中間階層サーバ、データベース サーバの間のデータ フローの分析から開始します。 その後、ページ間やコンポーネント間のデータ フローを検討します。 </p>
  <h2>エントリ ポイントを確認する</h2>
  <p>アプリケーションのエントリ ポイントは、攻撃のエントリ ポイントにもなります。 エントリ ポイントには、HTTP 要求を受け入れるフロントエンドの Web アプリケーションが含まれる場合があります。 このエントリ ポイントは、クライアントへにさらされることを目的としています。 アプリケーションのレイヤーを横断してサブコンポーネントにさらされる内部エントリ ポイントなどの、その他のエントリ ポイントは、他のコンポーネントとの内部通信のサポートのためだけに存在する場合があります。 ただし、攻撃者がアプリケーションのフロント ドアをバイパスし、内部エントリ ポイントへの直接攻撃を行う場合に備えて、これらの場所と受信する入力型を把握する必要があります。 確認レベルを追加することで、多層防御を実現できますが、費用やパフォーマンスの観点からはコストがかかる場合があります。</p>
  <p>エントリ ポイントにアクセスするために必要な信頼レベルとエントリ ポイントによってさらされる機能の型を検討します。 脅威モデル アクティビティの初期においては、管理インターフェイスなどの特権を持つ機能を暴露するエントリ ポイントを集中的に確認します。</p>
  <h2>Exit Points を特定する</h2>
  <p>アプリケーションがクライアントや外部システムにデータを送信するポイントを特定します。 アプリケーションが、クライアントからの入力や共有データベースなどの信頼できないソースからのデータを含む、データの書き込みを行う Exit Points の優先度を設定します。 </p>
  <h1>手順 4: 脅威の特定</h1>
  <p>この手順では、アプリケーションに影響を与え、セキュリティ上の目的を侵害する脅威と攻撃を特定します。 これらの脅威はアプリケーションに悪影響を与える可能性があります。 この特定プロセスを行うには、開発チームとテスト チームのメンバーが協力して、十分な情報を確保したうえでブレインストーミングのセッションを行います。 ホワイトボードを使って潜在的な脅威を特定します。 チームは、アプリケーションの設計者、セキュリティ専門家、開発者、テスト担当者、システム管理者で構成されることが理想的です。</p>
  <p>2 つの基本的なアプローチが利用できます。</p>
  <ul>
    <li>
      <b>一般的な脅威と攻撃から始めます。</b> このアプローチでは、アプリケーションの脆弱性のカテゴリーでグループ分けされた一般的な脅威のリストから開始します。 次に脅威リストをアプリケーションのアーキテクチャに適用します。 同時に収集したデータも使用します。 たとえば、エントリ ポイントや信頼境界が交差する場所に特に注意しながら、特定したシナリオを使用してデータ フローをレビューします。 一部の脅威はアプリケーションやその使用事例に適用しないため、すぐに排除できます。 開始点として「カンニング ペーパー: Web アプリケーション セキュリティ フレーム」を使用します。 <li><b>質問方式のアプローチを使用します。</b> 質問方式のアプローチは、関連する脅威や攻撃の特定に役立ちます。 STRIDE の分類には、スプーフィング、タンパリング、否認、情報漏えい、DoS 攻撃など、幅広い脅威のカテゴリーが含まれます。 STRIDE モデルを使用して、アプリケーションのアーキテクチャや設計の各要素に関連する質問を確認できます。 これは、攻撃者の目標を予想する、目標に基づいたアプローチになります。 たとえば、攻撃者がサーバや Web アプリケーションにアクセスするための識別情報をスプーフィングできるかどうか、 ネットワーク上やデータ ストア内でデータのタンパリングが実行できるかどうか、 エラー メッセージの報告やイベントのログ記録時に機密情報が暴露されるかどうか、 サービスを拒否できるかどうか、などを確認します。 </li></li>
  </ul>
  <p>脅威を特定しながら、アプリケーションを階層ごと、レイヤーごと、機能ごとに確認します。 脆弱性のカテゴリーに集中することで、セキュリティ上の間違いが最も起こりやすい場所を集中的に確認できます。 この段階で特定された脅威は、必ずしも脆弱性を意味しません。 潜在的な脅威と、アプリケーションをエクスプロイトするために攻撃者が試行する可能性のある操作を特定します。</p>
  <p>この手順では、以下の作業を実行します。</p>
  <ul>
    <li>
      <b>一般的な脅威と攻撃を特定する</b>
      <li>
        <b>使用事例に従って脅威を特定する</b>
        <li>
          <b>データ フローに従って脅威を特定する </b>
        </li>
      </li>
    </li>
  </ul>
  <p>各項目は次のセクションで説明します。</p>
  <h2>一般的な脅威と攻撃を特定する</h2>
  <p>一般的な脅威と攻撃の多くは、一般的な脆弱性に依存します。 開始点として、添付文書の「カンニング ペーパー: Web アプリケーション セキュリティ フレーム」を使用します。カンニング ペーパーは、アプリケーションに関連する脅威と攻撃の特定に役立ちます。 </p>
  <h3>Web アプリケーション セキュリティ フレーム</h3>
  <p>以下の脆弱性のカテゴリーは、多くの Web アプリケーションにわたって重要なセキュリティ問題を検査および分析したセキュリティの専門家によって開発されています。 これらは、Microsoft コンサルタント、製品サポート エンジニア、顧客、Microsoft のパートナーからの情報によって改善されています。 このセクションは、各カテゴリーについての重要な一連の質問を説明します。</p>
  <h3>認証</h3>
  <p>以下を確認して認証をレビューします。</p>
  <ul>
    <li>攻撃者が識別情報をスプーフィングする方法。 <li>攻撃者が Credential 情報の保存場所にアクセスする方法。 <li>攻撃者が辞書攻撃を実行する方法。 ユーザーの Credential 情報の保管方法と定められているパスワード ポリシー。 <li>攻撃者がユーザーの Credential 情報のリセット メカニズムを変更、傍受、バイパスする方法。 </li></li></li></li>
  </ul>
  <h3>認可</h3>
  <p>以下を確認して認可をレビューします。</p>
  <ul>
    <li>攻撃者が特権のある操作にアクセスするために、認可の確認に影響を与える方法。 <li>攻撃者が特権を高める方法。 </li></li>
  </ul>
  <h3>入力とデータの検証</h3>
  <ul>
    <li>以下を確認して入力検証とデータ検証をレビューします。<li>攻撃者が SQL コマンドを実行する方法。 <li>攻撃者がクロスサイト スクリプティング攻撃を実行する方法。 <li>攻撃者が入力検証をバイパスする方法。 <li>攻撃者が無効な入力を送信してサーバ上のセキュリティ論理に影響を与える方法。 <li>攻撃者が不正な形式の入力を送信してアプリケーションをクラッシュする方法。 </li></li></li></li></li></li>
  </ul>
  <h3>設定管理</h3>
  <p>以下を確認して設定管理をレビューします。</p>
  <ul>
    <li>攻撃者が管理機能にアクセスする方法。 <li>攻撃者がアプリケーションの設定データにアクセスする方法。 </li></li>
  </ul>
  <h3>機密のデータ</h3>
  <p>以下を確認して機微データをレビューします。</p>
  <ul>
    <li>アプリケーションが機微データを保存する場所と方法。 <li>機微データがネットワークを通じて渡される時期と場所。 <li>攻撃者が機微データを確認する方法。 <li>攻撃者が機微データを操作する方法。 </li></li></li></li>
  </ul>
  <h3>セッション管理</h3>
  <p>以下を確認してセッション管理をレビューします。</p>
  <ul>
    <li>カスタムの暗号化アルゴリズムを使用しているかどうかと、アルゴリズムを信頼できるかどうか。 <li>攻撃者がセッションをハイジャックする方法。 <li>攻撃者が他のユーザーのセッション状態を確認して操作する方法。 </li></li></li>
  </ul>
  <h3>暗号化</h3>
  <p>以下を確認して暗号化をレビューします。</p>
  <ul>
    <li>攻撃者が暗号を無効化するために必要な要素。 <li>攻撃者が暗号鍵にアクセスする方法。 <li>使用している暗号化標準と、 これらの標準に対する既知の攻撃 (該当する場合)。 <li>独自の暗号化を作成しているかどうか。 <li>選択した暗号化の方法に対する展開トポロジーの潜在的な影響。 </li></li></li></li></li>
  </ul>
  <h3>パラメータ操作</h3>
  <p>以下を確認してパラメータ操作をレビューします。</p>
  <ul>
    <li>攻撃者がパラメータを操作してサーバのセキュリティ論理に影響を与る方法。 <li>攻撃者が機微なパラメータ データを操作する方法。 </li></li>
  </ul>
  <h3>例外管理</h3>
  <p>以下を確認して例外管理をレビューします。</p>
  <ul>
    <li>攻撃者がアプリケーションをクラッシュする方法。 <li>攻撃者が価値のある例外の詳細情報を入手する方法。 </li></li>
  </ul>
  <h3>監査とログ記録</h3>
  <p>以下を確認して監査とログ記録をレビューします。</p>
  <ul>
    <li>攻撃者が形跡を隠す方法。 <li>攻撃者 (または正当なユーザー) が特定のアクションを起こしたことを証明する方法。 </li></li>
  </ul>
  <h2> 使用事例に従って脅威を特定する</h2>
  <p>前半で特定したアプリケーションの主要な 使用事例を調べ、ユーザーが故意にまたは意図せずにアプリケーションに認可されていない操作を強制したり、機微データやプライベート データを漏えいさせたりする方法について確認します。</p>
  <p>あらゆる確認項目について点検し、攻撃者の行動を予測します。 以下は確認が必要な項目の例です。</p>
  <ul>
    <li>クライアントが悪意のある入力を注入できるかどうか。 <li>書き込まれているデータが基づいているのはユーザー入力か、もしくは検証されていないユーザー入力か。 <li>攻撃者がセッション データを操作する方法。 <li>ネットワークを通じて渡される機微データを攻撃者が取得する方法。 <li>攻撃者が認可確認をバイパスする方法。 </li></li></li></li></li>
  </ul>
  <h2>データ フローに従って脅威を特定する</h2>
  <p>主要な使用事例およびシナリオをレビューし、データ フローを分析します。 アーキテクチャーの個々のコンポーネント間のデータ フローを分析します。 信頼境界を横断するデータ フローは特に重要です。 コードは、コードの信頼境界外部からのすべてのデータを悪意のあるものとみなす必要があります。 コードはデータを完全に検証する必要があります。 </p>
  <p>データ フローに関連する脅威を特定する際は、以下の点を確認します。</p>
  <ul>
    <li>アプリケーションのフロント エンドからバック エンドへのデータの流れ。 <li>どのコンポーネントがどのコンポーネントを呼び出すか。 <li>有効なデータとはどのようなものか。 <li>検証が実行される場所。 <li>データがどのように制限されるか <li>想定される長さ、範囲、書式、型についてデータはどのように検証されるか。 <li>コンポーネント間およびネットワークを通じて渡されるのはどんな機微データか、また転送中にデータの安全はどのように確保されるか。 </li></li></li></li></li></li></li>
  </ul>
  <blockquote>
    <b>注意</b>: &nbsp;&nbsp;既存の文書が存在する場合は使用します。 たとえば、データ フロー図 (DFD) と統合モデル言語 (UML) シーケンス図は、アプリケーションの分析とデータフローの特定に役立ちます。</blockquote>
  <h2>脅威/攻撃ツリーを使用してその他の脅威を調べる</h2>
  <p>前のアクティビティでは、明確かつ一般的なセキュリティ上の問題を特定しました。 ここではその他の脅威と攻撃を調べます (このアクティビティにとどまることがないように制限時間を決めておくと便利です)。</p>
  <p>攻撃ツリーと攻撃パターンは、多くのセキュリティ専門家が使用する重要なツールです。 これらにより、脅威について既知の内容を超えてさらに深く分析し、その他の潜在的脅威を特定できます。</p>
  <p>既知の脅威の分類リストで露呈できるのは、一般的な既知の脅威だけです。 脅威/攻撃ツリーや攻撃パターンを使用する追加的アプローチは、その他の潜在的脅威の特定に役立ちます。</p>
  <p>攻撃ツリーは、システムへの潜在的攻撃を、構造化された階層的な方法で特定して文書化するための手段です。 ツリー構造により、攻撃者がシステムを侵害するために使用する様々な攻撃の実態を詳細に把握できます。 攻撃ツリーを作成することにより、脅威やその軽減に集中するために役立つ、セキュリティ問題の再利用可能な説明図が完成します。 テスト チームはツリーを使用してセキュリティ 設計を検証するテスト計画を作成できます。 アーキテクトやデベロッパーの責任者は、ツリーを使用して代替アプローチのセキュリティ コストを評価できます。 開発者はツリーを使用し、コードを実装する際に十分な情報に基づいて決断を下すことができます。</p>
  <p>攻撃パターンは企業の攻撃情報をとらえるための形式化されたアプローチです。 これらのパターンは一般的な攻撃手法の特定に役立ちます。</p>
  <h3>攻撃ツリーの作成</h3>
  <p>攻撃ツリーを作成する際は、攻撃者のロールを考慮します。 攻撃を成功させるために必要な要素を考え、攻撃の目標とサブ目標を特定します。 階層図を使用して攻撃ツリーを表したり、単純なアウトラインを使用したりできます。 重要なことは、アプリケーションの攻撃プロファイルを表現することです。 これによってセキュリティ リスクを評価し、設計アプローチの修正、構成設定の強化やその他のソリューションなどの適切な対策をとって攻撃を軽減できます。</p>
  <p>攻撃者の目的を表すルート ノードを作成し、攻撃ツリーの構築を開始します。 その後、独自の攻撃方法を表すリーフ ノードを追加します。 単純な例を図 3 に示します。</p>
  <p>
    <img alt="" src="http://msdn2.microsoft.com/en-us/library/ms978527.f01tmwa03(en-us,MSDN.10).gif" border="0" />
  </p>
  <p>
    <b>図 3 攻撃ツリーの例</b>
  </p>
  <p>リーフ ノードには AND および OR をラベル付けできます。 たとえば、図 3 では、攻撃に結びつく脅威として 1.1 と 1.2 の両方が発生します。</p>
  <p>図 3 のような攻撃ツリーはすぐに複雑さが増す傾向があります。 また、作成には時間がかかります。 別のアプローチとして、以下の様なアウトラインを使用して攻撃ツリーを構造化できます。</p>
  <div>
 <pre>1.  Goal One<br />    1.1 Sub-goal one<br />    1.2 Sub-goal two2<br />2.  Goal Two<br />    2.1 Sub-goal one<br />    2.2 Sub-goal two   </pre>
  </div>
  <blockquote>
    <b>注意</b>: &nbsp;&nbsp;目標とサブ目標に加えて、攻撃ツリーは方法と必要な条件を含みます。 </blockquote>
  <p>以下はアウトライン アプローチのより詳細な例です。</p>
  <div>
 <pre>Threat #1 Attacker obtains authentication credentials by monitoring the network<br />  1.1 Clear text credentials sent over the network<br /> AND<br />  1.2 Attacker uses network-monitoring tools<br />      1.2.1 Attacker recognizes credential data   </pre>
  </div>
  <h1>手順 5 脆弱性の特定</h1>
  <p>この手順では、Web アプリケーションのセキュリティ フレームをレビューし、脆弱性を詳細に調べます。 前の手順で脅威を特定した際と同じように、脆弱性のカテゴリーに集中します。 しかし、このセクションで示されるサンプルの質問は、脅威ではなく脆弱性の特定に役立つように設計されています。 先に進むための方法は、アプリケーションをレイヤーごとに調べ、各脆弱性カテゴリーの有無を確認することです。</p>
  <h2>認証</h2>
  <p>以下を確認し、認証の脆弱性を特定します。</p>
  <ul>
    <li>ユーザー名とパスワードが、保護されていないチャンネルを介して平文で送信されるかどうか。 機微情報のためにアドホックな暗号化が使用されているかどうか。 <li>Credential 情報が保管されているかどうか。 保存されている場合は、保存と保護の方法。 <li>強力なパスワードが定められているかどうか。 他にどんなパスワード ポリシーが定められているか。 <li>Credential 情報はどのように検証されるか。 <li>認証されたユーザーは初回ログイン後にどのように特定されるか。 </li></li></li></li></li>
  </ul>
  <p>以下の一般的な脆弱性を確認し、認証をレビューします。</p>
  <ul>
    <li>暗号化されていないネットワーク リンクを通じて Credential 情報または認証 Cookie を渡すこと (認証情報のキャプチャーやセッション ハイジャックが発生する可能性があります)<li>弱いパスワードやアカウント ポリシーの使用 (認可されていないアクセスが発生する可能性があります)<li>個人化と認証の混同</li></li></li>
  </ul>
  <h2>認可</h2>
  <p>以下を確認して認可の脆弱性を特定します。</p>
  <ul>
    <li>アプリケーションのエントリ ポイントでどんなアクセス制御が使用されているか。 <li>アプリケーションがロールを使用するかどうか。 ロールを使用する場合は、ロールはアクセス制御や目的の監査のために十分に細かく設定されているか。 <li>認可のためのコードはフェイル セーフが実施され、Credential 情報の確認に成功した場合のみアクセスを与えているか。 <li>システム リソースへのアクセスが制限されているかどうか。 <li>データベースへのアクセスを制限しているかどうか。 <li>データベースで認可がどのように実施されるか。 </li></li></li></li></li></li>
  </ul>
  <p>以下の一般的な脆弱性を確認し、認可をレビューします。</p>
  <ul>
    <li>特権が過剰なロールやアカウントの使用<li>不十分なロール粒度<li>特定のアプリケーションへのシステム リソースを制限していない</li></li></li>
  </ul>
  <h2>入力とデータの検証</h2>
  <ul>
    <li>以下を確認して入力およびデータ検証の脆弱性を特定します。<li>すべての入力データが検証されているかどうか。 <li>長さ、範囲、書式、型を検証しているかどうか。 <li>Client-side Validation に依存しているかどうか。 <li>攻撃者がアプリケーションにコマンドや悪意のあるデータを投入できるかどうか。 <li>Web ページに書き出したデータを信頼できるかどうか、またはクロスサイト スクリプティングを防ぐために HTML エンコードが必要かどうか。 <li>入力を SQL ステートメントで使用する前に検証し、SQL インジェクションを防いでいるかどうか。 <li>独立した信頼境界の間でデータが渡される時、受信側のエントリ ポイントで検証されているかどうか。 <li>データベースのデータを信頼できるかどうか。 <li>入力ファイル名、URL、ユーザー名を受け入れているかどうか。 正規化による課題に対処しているかどうか。 </li></li></li></li></li></li></li></li></li></li>
  </ul>
  <p>以下の一般的な脆弱性を確認し、入力検証をレビューします。</p>
  <ul>
    <li>Client-side Validation への排他的依存<li>入力フィルタリングでの、<i>許可</i> ではなく <i>拒否</i> アプローチの使用<li>検証していないデータの Web ページへの書き出し<li>検証していない入力を使用した SQL クエリーの生成<li>安全でないデータ アクセス コーディング 技術の使用 (SQL インジェクションによる脅威が増す可能性があります)<li>入力ファイル名、URL、ユーザー名を使用したセキュリティ上の判断</li></li></li></li></li></li>
  </ul>
  <h2>設定管理</h2>
  <p>以下を確認して設定管理の脆弱性を特定します。</p>
  <ul>
    <li>リモート管理インターフェイスをどのように保護しているか。 <li>設定ストアを保護しているかどうか。 <li>機密設定データを暗号化しているかどうか。 <li>管理者特権を分離しているかどうか。 <li>プロセス アカウントおよびサービス アカウントに最小限の特権を使用しているかどうか。 </li></li></li></li></li>
  </ul>
  <p>以下の一般的な脆弱性を確認し、設定管理をレビューします。</p>
  <ul>
    <li>接続文字列やサービス アカウントの Credential 情報など、設定の機密情報の平文での保存<li>管理インターフェイスを含むアプリケーションの設定管理要素の保護の欠如<li>特権の過剰なプロセス アカウントやサービスアカウントの使用</li></li></li>
  </ul>
  <h2>機密のデータ</h2>
  <p>以下を確認して機微データの脆弱性を特定します。</p>
  <ul>
    <li>機密情報を persistent store に保存しているかどうか。 <li>機微データをどのように保存しているか。 <li>機密情報をメモリに保存しているかどうか。 <li>機微データをネットワークを通じて渡しているかどうか。 <li>機微データをログに記録しているかどうか。 </li></li></li></li></li>
  </ul>
  <p>以下の一般的な脆弱性を確認し、機微データをレビューします。</p>
  <ul>
    <li>必要がない場合に機密情報を保存している<li>コードに機密情報を保存している<li>平文で機密情報を保存している<li>機微データを 平文でネットワーク上で渡している</li></li></li></li>
  </ul>
  <h2>セッション管理</h2>
  <p>以下を確認し、セッション管理の脆弱性を特定します。</p>
  <ul>
    <li>セッション Cookie がどのように生成されているか。 <li>セッション識別子がどのように交換されているか。 <li>ネットワーク上を送信される際にセッション状態がどのように保護されているか。 <li>セッション ハイジャックを防ぐために、セッション状態がどのように保護されているか。 <li>セッション状態ストアがどのように保護されているか。 <li>セッション存続時間を制限しているかどうか。 <li>アプリケーションがセッション ストアでどのように認証を行うか。 <li>Credential 情報がネットワークを通じて渡され、アプリケーションによって維持されるかどうか。 維持される場合は、どのように保護されるか。 </li></li></li></li></li></li></li></li>
  </ul>
  <p>以下の一般的な脆弱性を確認し、セッション管理をレビューします。</p>
  <ul>
    <li>暗号化されていないチャンネルを通じてセッション識別子を渡している<li>セッション存続時間が長い<li>セッション状態ストアが安全でない<li>クエリー文字列内のセッション識別子</li></li></li></li>
  </ul>
  <h2>暗号化</h2>
  <p>以下を確認し、暗号化の脆弱性を特定します。</p>
  <ul>
    <li>どんなアルゴリズム手法および暗号化手法が使用されているか。 <li>カスタム暗号化アルゴリズムを使用しているかどうか。 <li>特定のアルゴリズムを使用する理由。 <li>暗号鍵の長さと保護方法。 <li>鍵がリサイクルされる頻度。 <li>暗号鍵がどのように配布されるか。 </li></li></li></li></li></li>
  </ul>
  <p>以下の一般的な脆弱性を確認し、暗号化をレビューします。</p>
  <ul>
    <li>カスタム暗号化の使用<li>間違ったアルゴリズムまたは小さ過ぎる鍵サイズの使用<li>暗号鍵を保護していない<li>同じ鍵を長い間使用している</li></li></li></li>
  </ul>
  <h2>パラメータ操作</h2>
  <p>以下を確認し、パラメータ操作のパラメータを特定します。</p>
  <ul>
    <li>すべての入力パラメータを検証しているかどうか。 <li>フォーム フィールド、表示ステータス、Cookie データ、HTTP ヘッダーのすべてのパラメータを検証しているかどうか。 <li>機微データをパラメータで渡しているかどうか。 <li>タンパリングされたパラメータをアプリケーションが検出するかどうか。 </li></li></li></li>
  </ul>
  <p>以下の一般的な脆弱性を確認し、パラメータ操作をレビューします。</p>
  <ul>
    <li>すべての入力パラメータを検証していない:  これによりアプリケーションは、SQL インジェクションや XSS を含む DoS 攻撃やコード インジェクション攻撃の影響を受けやすくなります。 <li>暗号化されていない Cookie に機微データが含まれる:  Cookie データがクライアント側で変更されたり、ネットワークを通じて渡される場合にキャプチャーされて変更されたりする可能性があります。 <li>クエリー文字列とフォーム フィールドに機微データが含まれる:  クエリー文字列とフォーム フィールドはクライアント側で簡単に変更されます。 <li>HTTP ヘッダー情報を信頼する:  この情報はクライアント側で簡単に変更されます。 </li></li></li></li>
  </ul>
  <h2>例外管理</h2>
  <p>以下を確認し、例外管理の脆弱性を特定します。</p>
  <ul>
    <li>アプリケーションがエラー条件をどのように処理するか。 <li>例外をクライアントにプロパゲートすることができるかどうか。 <li>例外メッセージにどんな種類のデータが含まれるか。 <li>クライアントに対して過剰な情報を露呈しているかどうか。 <li>例外の詳細をログ記録する場所。 ログ ファイルが安全かどうか。 </li></li></li></li></li>
  </ul>
  <p>以下の一般的な脆弱性を確認し、例外管理をレビューします。</p>
  <ul>
    <li>すべての入力パラメータを検証していない<li>クライアントへの過剰な情報の露呈</li></li>
  </ul>
  <h2>監査とログ記録</h2>
  <p>以下を確認し、監査とログ記録のの脆弱性を特定します。</p>
  <ul>
    <li>主要な監査対象アクティビティを特定できているかどうか。 <li>アプリケーションがすべてのレイヤーとサーバにわたってアクティビティを監査するかどうか。 <li>ログ ファイルがどのように保護されるか。 </li></li></li>
  </ul>
  <p>以下の一般的な脆弱性を確認し、監査とログ記録をレビューします。</p>
  <ul>
    <li>失敗したログオンを監査していない<li>監査ファイルを保護していない<li>アプリケーションのレイヤーとサーバにわたって監査していない</li></li></li>
  </ul>
  <h1>次の作業</h1>
  <p>脅威モデル アクティビティの完了後、以下を実行します。</p>
  <ul>
    <li>文書の脅威モデルをキャプチャーした場合は、更新を容易に行えるように、文書を軽い状態に保ち、過剰な書式設定を避けます。 主な内容には、セキュリティ上の目的、主要なシナリオ、保護リソース、脅威リスト、脆弱性リストが含まれる必要があります。 <li>脆弱性を使用し、セキュリティの設計と実装を具体化します。 たとえば、開発者は特定された脆弱性に対抗するパターンを把握し、パターンを使用して問題に対処する必要があります。 <li>脆弱性を使用し、システムのテストを計画して調査します。 たとえば、テスト担当者は脆弱性についてテストを行い、開発チームがすべての脆弱性の修正または対処を行っていることを確認する必要があります。 <li>作業項目追跡システム内で脆弱性を追跡し、優先度を設定します。 <li>優先度の高い脅威があり、対応する脆弱性がない場合は、決断が必要です。 追跡や対処が必要な脆弱性がない場合、特定された脅威は簡単に見過ごされる可能性があります。 脆弱性を特定できるまで調査を続行するか、対象範囲外として扱うか、リスクを受け入れるかを選択しなければいけません。 <li>キャプチャーした情報を関連チームのメンバーに伝達します。 関連チームにはアプリケーション開発チーム、テスト チーム、ネットワーク管理者およびシステム管理者が含まれます。 </li></li></li></li></li></li>
  </ul>
  <h1>Agile の留意事項</h1>
  <p>脅威モデルの作業はプロジェクトの初期に開始し、脅威モデルがアプリケーションの設計に影響を与えるようにする必要があります。 脅威モデルを作成および更新するには、ユーザー ストーリーを展開します。 ユーザー ストーリーは、顧客の視点からアプリケーションに求められる動作を記述するものです。 ここでは、脅威、攻撃、セキュリティ上の目的に関連するストーリーを作成します。 ストーリーは 1 つのイタレーションで完成させられるものであることが必要です。 脅威モデルを作成および更新すると、新しいストーリーの展開が必要になる場合があります。 </p>
  <p>ストーリーを計画する際は、以下のことに留意してください。</p>
  <ul>
    <li>プロジェクトの初期段階では、候補アーキテクチャーを作成し、アーキテクチャーのすべてのレイヤーを用いる、構造的に重要な包括的なシナリオをサポートしてリスクを軽減します。 <li>この候補アーキテクチャーに対して最初の脅威モデルを作成します。 このモデルは変更されますが、よいきっかけになります。 <li>脅威モデルをガイドとして使用し、アーキテクチャー、設計、コードを変更してセキュリティ上の目的を達成します。 <li>その時点で判明している情報に基づいて脅威モデルを作成し、後続のストーリーやイタレーションで確認する質問リストを定義します。 <li>アーキテクチャーと設計の重要な変更を行った後は、これらの変更を反映するストーリーの作成を検討します。 アーキテクチャーと設計の変更で小さなものはまとめ、同時に対処します。 <li>外部のセキュリティ グループと協力する必要がある場合は、脅威モデルを外部のグループに提供するために、モデルを完成させる時期について予定を立てる必要があります。 これらのグループは、アプリケーション全体を理解することで優れた情報を提供できるようになる傾向があります。 </li></li></li></li></li></li>
  </ul>
  <h1>MSF Agile の留意事項</h1>
  <p>Microsoft Solutions Framework (MSF) Agile Software Development プロセスは、Microsoft Visual Studio Team System のアーキテクチャー図を使用します。 これらのプロセスは、使用事例の代わりにシナリオを使用します。 そのため、脅威モデル アクティビティを MSF for Agile Software Development または MSF for CMMI Process Improvement に適用する際は、シナリオやシステムおよび論理データ センター図を入力として使用します。 </p>
  <p>システムおよび論理データ センター図を使用した脅威モデルの作成の詳細については、MSF プロセス ガイダンスまたは MSF Web サイトを参照してください。 </p>
  <h2>
  </h2>
  <p />
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>