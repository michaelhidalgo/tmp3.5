<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1266588388" Content_Hash="675858960">
  <Metadata>
    <Id>ed5aa7eb-d6a1-4776-9199-2ee4991c361b</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>ASP.NET で RSA を使用して構成セクションを暗号化する方法</Title>
    <Category>構成</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>概要</h1>
  <p>このハウツーは、RSA保護構成プロバイダーとAspnet_regiis.exeツールを使用して構成ファイルのセクションを暗号化する方法について説明します。 Web.config と Machine.config ファイルに保持されている接続文字列など機微データを暗号化するには、Aspnet_regiis.exe ツールを使うことができます。 サーバからサーバにRSA鍵を簡単にエクスポートおよびインポートすることができます。 これは、ウェブファーム内の複数のサーバ上で使用される構成ファイルの暗号化にRSA暗号化を特に有効にします。</p>
  <h1>目次</h1>
  <ul>
    <li>目的<li>概要<li>手順の概要<li>手順 1:  暗号化すべき構成セクションを識別してください<li>手順 2:  マシンレベルまたはユーザーレベルコンテナを選択します。<li>手順 3:  構成ファイルデータを暗号化してください<li>ウェブファームのシナリオ<li>その他のリソース</li></li></li></li></li></li></li></li>
  </ul>
  <h1>目的</h1>
  <ul>
    <li>ASP.NET内構成ファイルの機微データを暗号化するための鍵の変更を学習します。 <li>マシンレベルまたはユーザーレベル コンテナの選択方法を学習します。 <li>RSA保護構成プロバイダーと、暗号化できるセクションとできないセクションがどれであるかを学びます。 <li>RSA保護構成プロバイダーを使用して、接続文字列を暗号化します。 <li>RSA鍵コンテナを作成します。 <li>RSA鍵をWebファーム内の複数のサーバ間でインポートおよびエクスポートします。 </li></li></li></li></li></li>
  </ul>
  <h1>概要</h1>
  <p>Web.config ファイルなどの構成ファイルは、ユーザー名、パスワード、データベース接続文字列および暗号鍵を含む機微情報を保持するためにしばしば使用されます 暗号化する必要のある機微な情報を一般的に含むセクションには、以下のようなものがあります:</p>
  <ul>
    <li>&lt;appSettings&gt;. このセクションはカスタム･アプリケーション設定を含みます。 <li>&lt;connectionStrings&gt;. このセクションは接続文字列を含みます｡ <li>&lt;ID&gt;. このセクションはなりすましの Credential 情報を含む可能性があります。 <li>&lt;sessionState&gt;. このセクションは、アウト オフ プロセス セッション状態プロバイダーの接続文字列を含みます。 </li></li></li></li>
  </ul>
  <p>データの暗号化と復号化をすると、パフォーマンスのオーバーヘッドが発生します。 このオーバーヘッドを最小限に抑えるには、構成ファイルのうち、機微データが保存されているセクションのみを暗号化してください。</p>
  <h1>手順の概要</h1>
  <p>RSA保護構成プロバイダーを使用して構成セクションを暗号化するには、次の手順に従います。</p>
  <ul>
    <li>手順 1:  暗号化する構成のセクションを特定します。 <li>手順 2:  マシンレベルまたはユーザーレベルの鍵コンテナを選択します。 <li>手順 3:  構成ファイルのデータを暗号化します。 </li></li></li>
  </ul>
  <h1>手順 1:  暗号化すべき構成セクションを識別してください</h1>
  <p>データの暗号化と復号化をすると、パフォーマンスのオーバーヘッドが発生します。 このオーバーヘッドを最小限に抑えるには、構成ファイルのうち、機微データが保存されているセクションのみを暗号化してください。</p>
  <h2>保護構成を使用して暗号化できないセクション</h2>
  <p>次のいずれかの構成セクションに機微データを保存する場合、保護構成プロバイダーおよびAspnet_regiis.exeツールを使用しての暗号化はできません:</p>
  <ul>
    <li>&lt;processModel&gt; <li>&lt;runtime&gt; <li>&lt;mscorlib&gt; <li>&lt;startup&gt; <li>&lt;system.runtime.remoting&gt; <li>&lt;configProtectedData&gt; <li>&lt;satelliteassemblies&gt; <li>&lt;cryptographySettings&gt; <li>&lt;cryptoNameMapping&gt; <li>&lt;cryptoClasses&gt; </li></li></li></li></li></li></li></li></li></li>
  </ul>
  <p>リストされている構成セクションでは、NET Frameworkの前バージョンでも使用できるAspnet_setreg.exeツールを使用する必要があります。</p>
  <h1>手順 2:  マシンレベルまたはユーザーレベルの鍵コンテナを選択する</h1>
  <p><b>RSAProtectedConfigurationProvider</b> は、マシンレベルおよびユーザーレベルの鍵保存コンテナに対応します。 マシンレベルの鍵コンテナは、すべてのユーザーが使用できますが、ユーザーレベルのコンテナはそのユーザーのみの使用となります。</p>
  <p>コンテナの選択は、アプリケーションがサーバを他のアプリケーションと共有するかどうか、または各アプリケーションにおいて機微データを非公開に保つ必要があるかどうかに依存します。</p>
  <h2>マシン鍵コンテナ</h2>
  <p>次の状況においては、マシンレベルの鍵コンテナを使用します:</p>
  <ul>
    <li>アプリケーションは、他のアプリケーションが実行されない、専用サーバで実行されます。 <li>同一のサーバ上において複数のアプリケーションを持っており、そのアプリケーションに機微な情報と暗号鍵を共有させる場合。 </li></li>
  </ul>
  <p>RSAマシンの鍵コンテナは次のフォルダに保存されます:</p>
  <p>\Documents and Settings\All Users\Application Data\Microsoft\Crypto\RSA\MachineKeys</p>
  <h2>ユーザー鍵コンテナ</h2>
  <p>アプリケーションを共有ホスティング環境で実行し、アプリケーションの機微データがサーバ上の他のアプリケーションにアクセスできないようにする場合は、ユーザーレベルの鍵コンテナを使用します。 この状況では、各アプリケーションは個別のIDを持ち、アプリケーションのリソース（ファイルやデータベースなど）はそのIDのみに制限されなければなりません。</p>
  <p>RSAユーザーレベル鍵コンテナは次のフォルダに保存されます:</p>
  <p>\Documents and Settings\{UserName}\Application Data\Microsoft\Crypto\RSA</p>
  <h1>手順 3:  構成ファイルデータを暗号化してください</h1>
  <p>このステップでは、Web.configファイル内で接続文字列をどのように暗号化するかを説明します。 マシンストアを用いて行う方法を紹介し、その後ユーザーストアでの方法を示します。</p>
  <h2>マシンレベルの鍵コンテナでRSAを使用し、Web.configファイル内の接続文字列を暗号化します。</h2>
  <p><b>RSAProtectedConfigurationProvider</b> がデフォルトのプロバイダーであり、マシンレベルの鍵コンテナを使用するように設定されます。</p>
  <h3>Web.configの接続文字列セクションを暗号化するには</h3>
  <ol>
    <li>MachineRSAという名の新規Webサイトを作成します。 このディレクトリが仮想ディレクトリとして設定されていることを確認してください。 <li>このディレクトリにWeb.config構成ファイルを追加します。 <li>次の例に似た、<b>connectionString</b> サンプルを追加します。<div><pre>&lt;connectionStrings&gt;<br />&nbsp; &lt;add name="MyLocalSQLServer" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connectionString="Initial Catalog=aspnetdb;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data source=localhost;Integrated Security=SSPI;" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; providerName="System.Data.SqlClient"/&gt;<br />&lt;/connectionStrings&gt;   </pre></div><li>.NET コマンドプロンプトから次のコマンドを実行し、<b>connectionStrings</b>セクションを暗号化します:<p><b>aspnet_regiis -pe "connectionStrings" -app "/MachineRSA"</b></p><p>-<b>app</b>の入った上記コマンドは、MachineRSAと呼ばれるIISバーチャルディレクトリがあることが分かります。 IISでなくVisual Studio Web サーバを使用する場合、構成ファイルの物理ディレクトリ ロケーションを指定できる-<b>pef</b> スイッチを使用します。 </p><p><b>aspnet_regiis.exe -pef "connectionStrings" C:\Projects\MachineRSA</b></p><blockquote><b>注意</b>: &nbsp;&nbsp;Aspnet_regiis.exe ユーティリティツールは次のディレクトリに位置します:</blockquote><blockquote>%WinDir%\Microsoft.NET\Framework\&lt;<i>versionNumber</i>&gt;</blockquote><ul><li><b>-pe</b> スイッチは暗号化する構成セクションを指定します。 これは、構成セクションのXMLエレメント名です。 <p>&lt;<b>pages</b>&gt;などのネストエレメント、 &lt;<b>system.web</b>&gt;内のセクションについて、XML名には含まれるセクショングループが入っている必要があります。 たとえば、<b>"system.web/pages"</b>。</p><li><b>-pef</b> スイッチは、暗号化する構成セクションを指定し、構成ファイル用に物理ディレクトリ パスを提供することができます。 <li><b>-app</b> スイッチは Web アプリケーションの仮想パスを指定します。 入れ子型アプリケーションの場合は、 たとえば、 <b>"/test/aspnet/MachineRSA"</b>。<li>デフォルトのプロバイダーをデフォルト設定で使用するため、プロバイダー名を指定する-<b>prov</b> スイッチを使用する必要がありません。 </li></li></li></li></ul><p>コマンドが正常に実行された場合は、次の出力が表示されます。</p><div><pre>Encrypting configuration section...Succeeded!  </pre></div><blockquote><b>注意</b>: &nbsp;&nbsp;RSA マシン鍵コンテナは次のフォルダに保存されます:</blockquote><blockquote>\Documents and Settings\All Users\Application Data\Microsoft\Crypto\RSA\MachineKeys</blockquote><li>Web.config ファイルを見直して変化を調べます。 次のエレメントが作成されています:<ul><li>&lt;<b>EncryptedData</b>&gt; <li>&lt;<b>EncryptionMethod</b>&gt; <li>&lt;<b>KeyInfo</b>&gt; <li>&lt;<b>EncryptedKey</b>&gt; <li>&lt;<b>KeyName</b>&gt; <li>&lt;<b>CipherData</b>&gt; <li>&lt;<b>CipherValue</b>&gt; </li></li></li></li></li></li></li></ul><p>暗号化した<b>connectionStrings</b> セクションの変更済みWeb.Configファイルは、次の例に類似であるはずです。</p><div><pre>...<br />&lt;connectionStrings configProtectionProvider="RsaProtectedConfigurationProvider"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;EncryptedData Type="<a href="http://www.w3.org/2001/04/xmlenc#Element">http://www.w3.org/2001/04/xmlenc#Element</a>"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;              xmlns="<a href="http://www.w3.org/2001/04/xmlenc">http://www.w3.org/2001/04/xmlenc</a>#"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;EncryptionMethod Algorithm="<a href="http://www.w3.org/2001/04/xmlenc#tripledes-cbc">http://www.w3.org/2001/04/xmlenc#tripledes-cbc</a>" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;KeyInfo xmlns="<a href="http://www.w3.org/2000/09/xmldsig">http://www.w3.org/2000/09/xmldsig</a>#"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;EncryptedKey xmlns="<a href="http://www.w3.org/2001/04/xmlenc">http://www.w3.org/2001/04/xmlenc</a>#"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;EncryptionMethod Algorithm="<a href="http://www.w3.org/2001/04/xmlenc#rsa-1_5">http://www.w3.org/2001/04/xmlenc#rsa-1_5</a>" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;KeyInfo xmlns="<a href="http://www.w3.org/2000/09/xmldsig">http://www.w3.org/2000/09/xmldsig</a>#"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;KeyName&gt;Rsa Key&lt;/KeyName&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/KeyInfo&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;CipherData&gt; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;CipherValue&gt;R7cyuRk+SXJoimz7wlOpJr/YLeADGnwJVcmElHbrG/<br />                         B5dDTE4C9rzSmmTsbJ9Xcl2oDQt1qYma9L7pzQsQQYqLrkajqJ4i6ZQH1cmiot8ja7Vh+yItes7TRU1AoXN9T0mbX5H1Axm0O3X/<br />                         285/MdXXTUlPkDMAZXmzNVeEJHSCE=<br />            &lt;/CipherValue&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/CipherData&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/EncryptedKey&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/KeyInfo&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;CipherData&gt; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;CipherValue&gt;d2++QtjcVwIkJLsye+dNJbCveORxeWiVSJIbcQQqAFofhay1wMci8FFlbQWttiRYFcvxrmVfNSxoZV8GjfPtppiodhOzQZ+0/<br />                     QIFiU9Cifqh/T/7JyFkFSn13bTKjbYmHObKAzZ+Eg6gCXBxsVErzH9GRphlsz5ru1BytFYxo/<br />                     lUGRvZfpLHLYWRuFyLXnxNoAGfL1mpQM7M46x5YWRMsNsNEKTo/PU9/Jvnh/<br />                     lT+GlcgCs2JRpyzSfKE7zSJH+TpIRtd86PwQ5HG3Pd2frYdYw0rmlmlI9D<br />        &lt;/CipherValue&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/CipherData&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/EncryptedData&gt;<br />&nbsp; &lt;/connectionStrings&gt;<br />...</pre></div><li>以下のDefault.aspx ウェブページをアプリケーションの仮想ディレクトリに追加し、その後、このページを参照して暗号化と復号が正しく機能するか確認します。 <div><pre>&lt;%@ Page Language="C#" %&gt;<br />&lt;script runat="server"&gt;<br />&nbsp;&nbsp;&nbsp; protected void Page_Load(object sender, EventArgs e)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response.Write("Clear text connection string is: " + <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       ConfigurationManager.ConnectionString["MyLocalSQLServer"].ConnectionString);<br />&nbsp;&nbsp;&nbsp; }<br />&lt;/script&gt;<br />&lt;html&gt;<br />&nbsp; &lt;body /&gt;<br />&lt;/html&gt;   </pre></div><li><p>MyLocalSQLServer は、Web.configで先に指定した接続文字列の名前です。 </p><blockquote><b>注意</b>: &nbsp;&nbsp;ASP.NETアプリケーションIDが.NETフレームワーク構成鍵ストアにアクセスを持たない場合、次のメッセージが返されます:</blockquote><div><pre>Parser Error Message: Failed to decrypt using provider 'RsaProtectedConfigurationProvider'.<br />Error message from the provider: The handle is invalid.  </pre></div><blockquote><b><b></b>ASP.NETアプリケーションIDへのアクセスを与える</b></blockquote><ol><li>どのIDを使用するのかわからないとき、次のコードを使用してWebページからIDをチェックします:<div><pre>using System.Security.Principal;<br />...<br />protected void Page_Load(object sender, EventArgs e)<br />{<br />&nbsp; Response.Write(WindowsIdentity.GetCurrent().Name);<br />}  </pre></div><li>デフォルトでは、Windows Server 2003上のASP.NETアプリケーションはNT AUTHORITY\ ネットワークサービスアカウントを使用して実行されます。 .NETコマンドプロンプロを開き、次のコマンドを使用してNetFrameworkConfigurationKey ストアへののアカウントアクセスを与えます: <blockquote><b><b>aspnet_regiis</b> -pa "NetFrameworkConfigurationKey" "NT Authority\Network Service"</b></blockquote><blockquote><b>もし</b> コマンドが無事実行されると、次の出力が表示されます:</blockquote><div><pre>Adding ACL for access to the RSA Key container...Succeeded!  </pre></div><blockquote><b>次のフォルダ内の</b>ファイルのACLを確認します:</blockquote><blockquote><b><b>\Documents</b> Settings\All Users\Application Data\Microsoft\Crypto\RSA\MachineKeys</b></blockquote><blockquote><b></b><b></b>RSA 鍵コンテナファイルは、このフォルダ内にある最も新しいタイムスタンプのあるファイルです。</blockquote></li></li></ol><li><b>connectionStrings</b> セクションを元の平文に戻すには、コマンド プロンプトから次のコマンドを実行します:<p><b>aspnet_regiis -pd "connectionStrings" -app "/MachineRSA"</b></p><p>コマンドが正常に実行された場合は、次の出力が表示されます。</p><div><pre>Decrypting configuration section...Succeeded!  </pre></div><p>アプリケーション構成ファイルへの物理パスを指定する<b>connectionStrings</b> セクションを復号化するには、次に示す<b>-pdf</b> スイッチを使用します。 </p><p><b>aspnet_regiis -pdf "connectionStrings" C:\Projects\MachineRSA</b></p></li></li></li></li></li></li></li></li>
  </ol>
  <h2>ユーザーレベルの鍵コンテナでRSAを用いて、Web.config内の接続文字列を暗号化します。</h2>
  <p>次のステップは、&lt;<b>connectionStrings</b>&gt; セクションを、ユーザーレベルの鍵コンテナで<b>RSAProtectedConfigurationProvider</b> (RSA)を使用して暗号化する方法を説明します。</p>
  <p>デフォルトでは、ASP.NETアプリケーションは、NT AUTHORITY \ Networkサービスアカウントの下で動作します。 ユーザーレベル鍵コンテナのRSA暗号化を使用して暗号化済み構成セクションにアクセスする際は、過去にデータの暗号化を行ったアカウントと同じユーザーIDでアプリケーションの動作を行うことに注意してください。 </p>
  <h3>Web.configの接続文字列セクションを暗号化するには</h3>
  <ol>
    <li>UserRSAという名前の新規Webサイトを作成します。 このディレクトリが仮想ディレクトリとして設定されていることを確認してください。 <li>このディレクトリにWeb.config構成ファイルを追加します。 <li>次の例に似た、<b>connectionString</b> サンプルを追加します。<div><pre>&lt;connectionStrings&gt;<br />&nbsp; &lt;add name="MyLocalSQLServer" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connectionString="Initial Catalog=aspnetdb;data source=localhost;Integrated Security=SSPI;"<br />       providerName="System.Data.SqlClient" /&gt;<br />&lt;/connectionStrings&gt;   </pre></div><li>ユーザー鍵コンテナを使用するには、保護済み構成プロバイダーを追加および設定します。 これを行うには、次の &lt;<b>configProtectedData</b>&gt; を追加します。 Web.config ファイルへのセクション。 プロバイダーがユーザーレベル鍵コンテナを使用するように<b>useMachineContainer</b>=<b> "false"</b>に設定しなければなりません。 一意のプロバイダー名を使用しないと、ランタイム エラーが発生します。 <div><pre>&lt;configProtectedData&gt; <br />&nbsp; &lt;providers&gt;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; &lt;add keyContainerName="NetFrameworkConfigurationKey"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    useMachineContainer="false"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    description="Uses RsaCryptoServiceProvider to encrypt and decrypt"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    name="MyUserRSAProtectedConfigurationprovider" <br />         type="System.Configuration.RsaProtectedConfigurationProvider,System.Configuration,<br />               Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/providers&gt;&nbsp;&nbsp; <br />&lt;/configProtectedData&gt;   </pre></div><li>SDKコマンド プロンプトから次のコマンドを実行し、<b>connectionStrings</b> 節句ションを暗号化します:<p><b>aspnet_regiis -pe "connectionStrings" -app "/UserRSA" -prov "MyUserRSAProtectedConfigurationProvider"</b></p><ul><li><b>-pe</b> スイッチは暗号化する構成セクションを指定します。 これは、構成セクションのXMLエレメント名です。 <p>&lt;<b>pages</b>&gt;などのネストエレメント、 セクション、（&lt;<b>system.web</b>&gt;内）XML名には含まれるセクショングループが入っている必要があります。 たとえば、<b>"system.web/pages"</b>。</p><li><b>-app</b> スイッチは Web アプリケーションの仮想パスを指定します。 入れ子型アプリケーションの場合は、 たとえば、 <b>"/test/aspnet/MachineRSA"</b>。<li><b>-prov</b> スイッチはプロバイダー名を指定します。 この場合<b>"MyUserRSAProtectedConfigurationProvider"</b>に設定されますが、これはステップ4で設定時に指定した名前です。 </li></li></li></ul><p>コマンドが正常に実行された場合は、次の出力が表示されます。</p><div><pre>Encrypting configuration section...Succeeded!  </pre></div><blockquote><b>注意</b>: &nbsp;&nbsp;RSAユーザーレベル鍵コンテナは次のフォルダに保存されます。</blockquote><blockquote>\Documents and Settings\{UserName}\Application Data\Microsoft\Crypto\RSA</blockquote><li>Web.configを見直し変更を検証します。 次のエレメントが作成されます。 <ul><li>&lt;<b>EncryptedData</b>&gt; <li>&lt;<b>EncryptionMethod</b>&gt; <li>&lt;<b>KeyInfo</b>&gt; <li>&lt;<b>EncryptedKey</b>&gt; <li>&lt;<b>KeyName</b>&gt; <li>&lt;<b>CipherData</b>&gt; <li>&lt;<b>CipherValue</b>&gt; </li></li></li></li></li></li></li></ul><p>暗号化した<b>connectionStrings</b> セクションの変更済みWeb.Configファイルは、次の例に類似であるはずです。</p><div><pre>...<br />  &lt;connectionStrings configProtectionProvider="MyUserRSAProtectedConfigurationprovider"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;EncryptedData Type="<a href="http://www.w3.org/2001/04/xmlenc#Element">http://www.w3.org/2001/04/xmlenc#Element</a>"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;              xmlns="<a href="http://www.w3.org/2001/04/xmlenc">http://www.w3.org/2001/04/xmlenc</a>#"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;EncryptionMethod Algorithm="<a href="http://www.w3.org/2001/04/xmlenc#tripledes-cbc">http://www.w3.org/2001/04/xmlenc#tripledes-cbc</a>" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;KeyInfo xmlns="<a href="http://www.w3.org/2000/09/xmldsig">http://www.w3.org/2000/09/xmldsig</a>#"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;EncryptedKey xmlns="<a href="http://www.w3.org/2001/04/xmlenc">http://www.w3.org/2001/04/xmlenc</a>#"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;EncryptionMethod Algorithm="<a href="http://www.w3.org/2001/04/xmlenc#rsa-1_5">http://www.w3.org/2001/04/xmlenc#rsa-1_5</a>" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;KeyInfo xmlns="<a href="http://www.w3.org/2000/09/xmldsig">http://www.w3.org/2000/09/xmldsig</a>#"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;KeyName&gt;Rsa Key&lt;/KeyName&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/KeyInfo&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;CipherData&gt; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;CipherValue&gt;In7jNc0GA1eE5nvVR2hrHQ6cC1O1kMbfBXH0alBwlY2OBM4sMa8NbK4pBnUdxFkrx+oSzLYE8SHS6dYZwE3Uf5x7hk46Jx+Z/<br />                         hn1hneWMyxWn23t41708lQzySsotYnzL5VOdR4P7MrIlhW9eSpbWp7PopSzcLxlGbs41dH7L3E=<br />            &lt;/CipherValue&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/CipherData&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/EncryptedKey&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/KeyInfo&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;CipherData&gt; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;CipherValue&gt;Zbu2LQQeiHaUFXWPjLvPR9OLwrozCZj5i2zvcEFlx/<br />                     UICt2Cn0fTdy51dbHQRjTUXnOyx2PC5vptALXsvxrhPo5I+<br />                     I2SCr21rRUQ5H55P0ejJZMsAirkNjdhCe5RflVLdK96a6Sw0cz93inWi4rNkE1SiXB76cD08Y+DHrsjmGkW8/<br />                     TeHCK2f4xSykmdJGRwpxxdt2+3DxMjQPfg39Xkr4JjRlE6FvQ/R6hkEyyqLmCxUxbTV/<br />                     +mcBcwyE3AzrbOIl+627SG1fP4ovLmMkNvjlTl5lCZnoj6<br />        &lt;/CipherValue&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/CipherData&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/EncryptedData&gt;<br />&nbsp; &lt;/connectionStrings&gt;<br />...</pre></div><li>アプリケーションのバーチャルディレクトリに、次のDefault.aspx Webページを追加し、さらにこのページを見直して暗号化と復号化が共に適切に機能しているかを確認します。 <div><pre>&lt;%@ Page Language="C#" %&gt;<br />&lt;script runat="server"&gt;<br />&nbsp;&nbsp;&nbsp; protected void Page_Load(object sender, EventArgs e)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response.Write("Clear text connection string is: " + <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            ConfigurationManager.ConnectionStrings["MyLocalSQLServer"].ConnectionString);<br />&nbsp;&nbsp;&nbsp; }<br />&lt;/script&gt;<br />&lt;html&gt;<br />&nbsp; &lt;body /&gt;<br />&lt;/html&gt;   </pre></div><li><p>アプリケーションは、これまでのデータ暗号化に使用したIDと同じものを使用してデータへのアクセスを行う必要があるため、アプリケーション サービスアカウントIDを使用して暗号化コマンドを頻繁に実行することになります。 これにより、下記のように適切にドメインおよびユーザー名を指定して、<b>runas</b>コマンドを使用することでコマンドWindowを開始できます。 </p><p><b>Runas /profile /user:domain\user cmd</b></p><p>結果のコマンドウィンドウからAspnet_regiisを実行する時、暗号化を行うための指定されたIDを使用します。 これにより、実行時に、同じIDを使用するアプリケーションがデータの復号化を行うことができます。 </p><p>データの暗号化に使用したアカウントと異なるアカウントでアプリケーションが実行される場合、ASP.NETはRSAユーザーレベル鍵コンテナにアクセスできず、次のエラーを生成します:</p><div><pre>Parser Error Message: Failed to decrypt using provider 'RsaProtectedConfigurationProvider'. <br />Error message from the provider: Keyset does not exist   </pre></div><li><b>connectionStrings</b> セクションを平文に戻すために、.NETコマンドプロンプトからの次のコマンドを実行します:<p><b>aspnet_regiis -pd "connectionStrings" -app "/UserRSA"</b></p><p>コマンドが正常に実行された場合は、次の出力が表示されます。</p><div><pre>Decrypting configuration section...Succeeded!  </pre></div></li></li></li></li></li></li></li></li></li>
  </ol>
  <h1>ウェブファームのシナリオ</h1>
  <p>RSA鍵はエキスポートできるので、ウェブファームでRSA暗号化を使用できます。 データを Web ファームにおける他のサーバに展開する前に Web.config ファイルで暗号化する場合、これを行う必要があります。 その場合､データを暗号解読するのに必要な私有鍵は、エキスポートして他のサーバへ配置する必要があります。</p>
  <h2>RSAプロバイダーを使用して、Webファーム内のWeb.configで接続文字列を暗号化する</h2>
  <p>これを行うとき、カスタムRSA暗号化鍵コンテナを作成し、ウェブファーム内のすべてのサーバで同じ鍵コンテナを使用します。 デフォルトのRSA暗号鍵である<b>"NetFrameworkConfigurationKey"</b>はコンピュータごとに異なるため、デフォルトでは機能しません。</p>
  <h3>RSA暗号化をWebファームで使用する</h3>
  <ol>
    <li>コマンド プロンプトから次のコマンドを実行し、カスタムRSA暗号鍵を作成します:<p><b>aspnet_regiis -pc "CustomKeys" -exp</b></p><p><b>-exp</b>スイッチは鍵がエクスポート可能であることを示します。 </p><p>コマンドが正常に実行された場合は、次の出力が表示されます。</p><div><pre>Creating RSA Key container...Succeeded!  </pre></div><p>ファイルを探して、次の場所でタイムスタンプをチェックすることにより、カスタム鍵コンテナが存在することを確認できます。</p><p>\ Documents and Settings\All Users\Application Data\Microsoft\Crypto\RSA<br />\MachineKeys</p><li>WebFarmRSAという名前の新しいウェブプロジェクトを作成します。 このディレクトリが仮想ディレクトリとして設定されていることを確認してください。 <li>このディレクトリにWeb.config構成ファイルを追加します。 <li>次の例に似た、<b>connectionString</b> サンプルを追加します。<div><pre>&lt;connectionStrings&gt;<br />&nbsp; &lt;add name="MyLocalSQLServer" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connectionString="Initial Catalog=aspnetdb;data source=localhost;Integrated Security=SSPI;" <br />       providerName="System.Data.SqlClient" /&gt;<br />&lt;/connectionStrings&gt;   </pre></div><li>カスタム保護された構成プロバイダーを追加し、構成します。 これを行うには、次の &lt;<b>configProtectedData</b>&gt; を追加します。 セクションから、Web.configファイルへ。 鍵コンテナ名は<b>"CustomKeys"</b>に設定されており、これは以前作成された鍵コンテナの名前です。 <div><pre>...<br />&lt;configProtectedData&gt; <br />&nbsp; &lt;providers&gt;<br />&nbsp; &lt;add keyContainerName="CustomKeys" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;useMachineContainer="true"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description="Uses RsaCryptoServiceProvider to encrypt and decrypt"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name="CustomProvider"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type="System.Configuration.RsaProtectedConfigurationProvider,System.Configuration,<br />             Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;<br />&nbsp; &lt;/providers&gt;<br />&lt;/configProtectedData&gt;<br />...  </pre></div><li>SDK コマンドプロンプトから次のコマンドを実行し、カスタムRSA鍵を使用して<b>connectionStrings</b>セクションの暗号化を行います。<p><b>aspnet_regiis -pe "connectionStrings" -app "/WebFarmRSA" -prov "CustomProvider"</b></p><p>暗号化に成功した場合は、次のような出力が表示されます。</p><div><pre>Encrypting configuration section...Succeeded!  </pre></div><li>Web.configファイルを確認して、変更を調べます。 次のエレメントが変更されます。<ul><li>&lt;<b>EncryptedData</b>&gt; <li>&lt;<b>CipherData</b>&gt; <li>&lt;<b>CipherValue</b>&gt; </li></li></li></ul><p>暗号化した<b>connectionStrings</b> セクションの変更済みWeb.Configファイルは、次の例に類似であるはずです。</p><div><pre>...<br />  &lt;connectionStrings configProtectionProvider="CustomProvider"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;EncryptedData Type="<a href="http://www.w3.org/2001/04/xmlenc#Element">http://www.w3.org/2001/04/xmlenc#Element</a>"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;              xmlns="<a href="http://www.w3.org/2001/04/xmlenc">http://www.w3.org/2001/04/xmlenc</a>#"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;EncryptionMethod Algorithm="<a href="http://www.w3.org/2001/04/xmlenc#tripledes-cbc">http://www.w3.org/2001/04/xmlenc#tripledes-cbc</a>" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;KeyInfo xmlns="<a href="http://www.w3.org/2000/09/xmldsig">http://www.w3.org/2000/09/xmldsig</a>#"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;EncryptedKey xmlns="<a href="http://www.w3.org/2001/04/xmlenc">http://www.w3.org/2001/04/xmlenc</a>#"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;EncryptionMethod Algorithm="<a href="http://www.w3.org/2001/04/xmlenc#rsa-1_5">http://www.w3.org/2001/04/xmlenc#rsa-1_5</a>" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;KeyInfo xmlns="<a href="http://www.w3.org/2000/09/xmldsig">http://www.w3.org/2000/09/xmldsig</a>#"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;KeyName&gt;Rsa Key&lt;/KeyName&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/KeyInfo&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;CipherData&gt; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;CipherValue&gt;MWOaFwkByLRrvoGYeFUPMmN7e9uwC0D7gFEeyxs3Obll710dLQvD5XaMWcRxg1WwtOE9nysPQRrIJUaCm0b26LGUoa/<br />                         giGEfvWnslU2kig9SPICzsQAqUSB/inhRckWceb2xdy7TT+EI/vfsu6itJwE2AicMCTwx5I828mP8lV4=<br />            &lt;/CipherValue&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/CipherData&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/EncryptedKey&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/KeyInfo&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;CipherData&gt; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;CipherValue&gt;IKO9jezdlJ/k1snyw5+e11cd9IVTlVfHBHSiYLgICf1EnMNd5WxVDZWP1uOW2UaY3Muv7HrSZCRbqq6hfA2uh2rxy5qAzFP+iu7Sg/<br />                     ku1Zvbwfq8p1UWHvPCukeyrBypiv0wpJ9Tuif7oP4Emgaoa+ewLnETSN411Gow28EKcLpbKWJDOC/<br />                     9o7g503YM4cnIvkQOomkYlL+MzMb3Rc1FSLiM9ncKQLZi+<br />                     JkRhlDIxFlsrFpKJhdNf5A0Sq2P71ZLI6G6QDCehHyn3kCZyBmVWJ0ueoGWXV4y<br />        &lt;/CipherValue&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/CipherData&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/EncryptedData&gt;<br />&nbsp; &lt;/connectionStrings&gt;<br />...</pre></div><li>カスタムRSA暗号鍵をエクスポートするには.NETコマンドプロンプトから次のコマンドを実行します。<p><b>aspnet_regiis -px "CustomKeys" "C:\CustomKeys.xml" -pri</b></p><p><b>-pri</b> スイッチは私有および公開鍵がエクスポートするようにします。 これは、暗号化と復号の両方を可能にします。 -<b>pri</b> スイッチがないと、エクスポート済みの鍵を使ってのみデータの暗号化が可能になります。 </p><p>コマンドが正常に実行された場合は、次の出力が表示されます。</p><div><pre>Exporting RSA Keys to file...Succeeded!  </pre></div><li>別のサーバコンピュータ上のアプリケーションと暗号化されたWeb.configファイルを展開します。 また、CustomKeys.xml ファイルを他のサーバ上のローカルディレクトリ、例えばC:\ ディレクトリにコピーします。 <li>カスタムRSA暗号鍵をインポートするには、移行先サーバ上で、コマンドプロンプトから次のコマンドを実行します。<p><b>aspnet_regiis -pi "CustomKeys" "C:\CustomKeys.xml"</b></p><p>コマンドが正常に実行された場合は、次の出力が表示されます。</p><div><pre>Importing RSA Keys from file..Succeeded!  </pre></div><blockquote><b>注意</b>: &nbsp;&nbsp;RSA鍵のエクスポートおよびインポートが完了したら、CustomsKeys.xmlファイルを両方のマシンから削除することがセキュリティの観点から重要です。 </blockquote><li>ASP.NETアプリケーションアイデンティティへのアクセスを許可します。 <p>ウェブアプリケーションの実行に使用するアカウントは、RSA鍵コンテナを読み取ることができる必要があります。 アプリケーションで使用するアイデンティティがわからない場合は、ウェブページに以下のコードを追加することにより、これをチェックすることができます。</p><div><pre>using System.Security.Principal;<br />...<br />protected void Page_Load(object sender, EventArgs e)<br />{<br />&nbsp;&nbsp;&nbsp; Response.Write(WindowsIdentity.GetCurrent().Name);<br />}  </pre></div><p>デフォルトでは、Windows Server 2003上のASP.NETアプリケーションはNT AUTHORITY\ ネットワークサービスアカウントを使用して実行されます。 次のコマンドは、CustomKeysストアへこのアカウントのアクセス権を付与します。</p><p><b>aspnet_regiis -pa "CustomKeys" "NT Authority\Network Service"</b></p><p>コマンドが正常に実行されると、次のような出力が表示されます。 </p><div><pre>Adding ACL for access to the RSA Key container...Succeeded!  </pre></div><p>次のフォルダ内のファイルのACLをチェックすることができます。</p><div><pre>\Documents and Settings\All Users\Application Data\Microsoft\Crypto\RSA\MachineKeys  </pre></div><p>RSA鍵コンテナファイルは、このフォルダ内で最新のタイムスタンプを持つファイルです。 </p><li>以下のDefault.aspx ウェブページをアプリケーションの仮想ディレクトリに追加し、その後、このページを参照して暗号化と復号が正しく機能するか確認します。 <div><pre>&lt;%@ Page Language="C#" %&gt;<br />&lt;script runat="server"&gt;<br />&nbsp;&nbsp;&nbsp; protected void Page_Load(object sender, EventArgs e)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response.Write("Clear text connection string is: " + <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       ConfigurationManager.ConnectionStrings["MyLocalSQLServer"].ConnectionString);<br />&nbsp;&nbsp;&nbsp; }<br />&lt;/script&gt;<br />&lt;html&gt;<br />&nbsp; &lt;body/&gt;<br />&lt;/html&gt;   </pre></div></li></li></li></li></li></li></li></li></li></li></li></li>
  </ol>
  <p>MyLocalSQLServerは、Web.configファイルで以前に指定した接続文字列の名前です。 </p>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>