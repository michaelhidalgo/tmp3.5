<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-1490688001" Content_Hash="-538606825">
  <Metadata>
    <Id>b1993b12-1cd9-4028-8176-fc1ec8c23f3c</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>ASP.NET で複数のアプリケーションをホストする場合にセキュリティを向上させる方法</Title>
    <Category>展開の考慮事項</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>その方法</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>ASP.NET 3.5</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用先</h1>
  <ul>
    <li>Windows Server 2003 <li>Internet Information Services (IIS) 6.0</li></li>
  </ul>
  <h1>概要</h1>
  <p>このガイドは、Web ホスティング環境において複数のアプリケーションを相互に分離し、また、共有システム リソースから分離する方法について説明しています。  ホスティング環境は、さまざまな企業からの複数の信頼されていないアプリケーションをホストするInternet Service Provider (ISP) により提供される Web サーバであるかもしれません。また、複数のアプリケーションをホストする単一組織の共有 Web サーバであるかもしれません。 十分に分離されなければ、質の悪い設計のアプリケーションまたは悪意のあるコードを含むアプリケーションが、サーバ上の他のアプリケーションのオペレーションに悪影響を与える可能性があります。</p>
  <h1>目次</h1>
  <ul>
    <li>目的<li>概要<li>IIS 6.0 プロセス モデル分離<li>手順の概要<li>手順 1:  アプリケーションを部分的信頼に構成する<li>手順 2:  プロセス分離にアプリケーション プールを使用する<li>手順 3:  machineKey 設定を確認する<li>信頼レベルの概要<li>その他のリソース</li></li></li></li></li></li></li></li></li>
  </ul>
  <h1>目的</h1>
  <ul>
    <li>コード アクセス セキュリティを使用して、共有サーバ上の複数のアプリケーションを分離します。 <li>カスタム ID を使用して複数の IIS 6.0 アプリケーション プールでそれぞれアプリケーションを起動します。 <li>複数のアプリケーションをホストするサーバに適切な machineKey エレメント設定を確立します。 </li></li></li>
  </ul>
  <h1>概要</h1>
  <p>共有 Web サーバ上で複数の ASP.NET Web アプリケーションをホストする場合、アプリケーション分離の使用を検討することをお勧めします。 たとえば、個別のアプリケーションがランタイムに相互に影響を与えないことをどのようにして保証できますか? 他のアプリケーションの正常な起動を維持するために必要なサーバ上の重大なシステム レベルのリソースを、1 つの質の悪い設計のアプリケーションが消費することを、どのように防ぐことができますか? ある企業の 1 つのアプリケーションが、別の企業のアプリケーションに含まれる機微データにアクセスできないことをどのようにして確認できますか?</p>
  <p>セキュリティの問題は、さまざまな企業の多数の信頼されていないアプリケーションをホストするインターネット サービス プロバイダー (ISP) にとって特に重要です。 ホスティングのシナリオでは、新しいアプリケーションのインストールにより既存のアプリケーションのオペレーションに悪影響を与えないことを確認することが不可欠です。</p>
  <p>ASP.NET アプリケーションを分離する主要な方法は以下のとおりです。</p>
  <ul>
    <li>
      <b>コード アクセス セキュリティを使用する</b>. たとえば、ASP.NET の中信頼レベルを使用して、各アプリケーションを部分的信頼により起動できます。 これは、システム リソースおよび他のアプリケーションに属するリソースへのアクセス許可が限定されている場合に、各アプリケーション用の制限された実行環境 (サンドボックスとしても知られる) を提供します。 <li><b>各アプリケーションに別のプロセスを使用する</b>. Windows Server&nbsp;2003 および IIS&nbsp;6.0 で、固有の ID 下で起動するように構成されている独自のアプリケーション ツールで各アプリケーションを起動します。 これにより、Windows 監査を使用して各アプリケーションのアクティビティを別々に監査できるようになります。また、各アプリケーションについて Windows アクセス制御リスト (ACL) を独立して構成できます。 <li><b>暗号鍵と異なる復号鍵を使用する</b>。<b>machineKey</b> エレメントで指定された鍵が各アプリケーションについて固有であることを確認します。 これらの鍵は、Forms Authentication チケットおよび表示ステータスを含むアイテムの暗号化に使用されます。 別の鍵を保持することにより、あるアプリケーションからアクセスされたデータに別のアプリケーションからアクセスされたとしても、データの完全性の確保に役立ちします。 </li></li></li>
  </ul>
  <h1>IIS 6.0 プロセス モデル分離</h1>
  <p>Windows Server 2003 では、IIS 6.0 は複数のワーカー プロセスを使用して別の Web アプリケーションをホストできるようにします。 これは図 &nbsp;1 に示されています。</p>
  <p>
    <img alt="" src="http://msdn2.microsoft.com/en-us/library/Aa480478.iis6architecture(en-us,MSDN.10).gif" border="0" />
  </p>
  <p>
    <b>図 1:  IIS 6.0 を備えた Windows Server 2003 上のASP.NET アーキテクチャ</b>
  </p>
  <p>IIS ワーカー プロセスの別のインスタンス (W3wp.exe) を使用して Web アプリケーションをホストできます。 デフォルトでは、これらのプロセスは、ネットワーク上のコンピュータ アカウントとして機能するアクセス許可制限を備えたローカル アカウントである、NetworkService アカウントを使用して起動します。 NetworkService アカウントのコンテキストにおいて起動する Web アプリケーションは、認証用にコンピュータの Credential 情報をリモート サーバに提供します。</p>
  <p>分離を提供するために、別のカスタム アカウントを使用して各アプリケーションを共有サーバ上で起動することをお勧めします。 これにより、各アプリケーションのアクティビティを個別に監査し、Windows アクセス制御リスト (ACL) で各アプリケーションを個別に認証できます。</p>
  <h1>手順の概要</h1>
  <p>ASP.NET で複数のアプリケーションをホストする際にセキュリティを向上させるには、以下のステップを実行します。</p>
  <ul>
    <li>手順 1:  アプリケーションの部分的信頼を構成する<li>手順 2:  プロセス分離にアプリケーション プールを使用する<li>手順 3:  machineKey 設定を確認します。 </li></li></li>
  </ul>
  <h1>手順 1:  アプリケーションを部分的信頼に構成する</h1>
  <p>デフォルトでは、ASP.NET&nbsp;Web アプリケーションおよび Web サービスは完全信頼で起動します。 結果として、コード アクセス セキュリティは、アプリケーションがアクセス可能なリソースおよびオペレーションを制限しません。また、リソース アクセスは、オペレーティング システム セキュリティおよび ACL のみに基づいています。</p>
  <p>コード アクセス セキュリティを使用して制限された実行環境 (またはサンドボックス) を提供し、アプリケーションが実行可能なリソースおよびオペレーションを制限して、アプリケーション同士を分離することができます。 ホスティングのシナリオに適した信頼レベルを選択します。 中信頼は、特にさまざまな組織またはカスタマーにより書き込まれるアプリケーション コード ベース間で厳格なセキュリティ分離を実行する必要のある、ISP およびその他の展開環境の必要性について提供されました。 その他のシナリオでは、カスタムのアクセス許可セットを認めるカスタム ポリシーを作成する必要がある場合があります。</p>
  <h2>中信頼を使用</h2>
  <p>ISP シナリオなど、共有サーバ上で複数のアプリケーションをホストする必要がある場合、中信頼レベルを使用してアプリケーションを制限します。 ASP.NET の中信頼レベルは、ISP サーバ上でホストされる複数のアプリケーションの分離に最適な制限された実行環境を提供します。</p>
  <h3>サーバ上のすべてのアプリケーションを中信頼で起動するように構成するには</h3>
  <ol>
    <li>%windir%\Microsoft.NET\Framework\{version}\CONFIG フォルダーのマシン レベルの Web.config ファイルを開きます。 <li>以下のコードの例に示されるように、<b> trust level </b>属性のデフォルト設定を<b>完全</b>から<b>中</b>に変更することにより、<b> trust </b>エレメントを構成します。<div><pre>&lt;location allowOverride="true"&gt;<br />&nbsp; &lt;system.web&gt;<br />&nbsp;&nbsp;&nbsp; &lt;securityPolicy&gt;<br />&nbsp;&nbsp;&nbsp; ...<br />&nbsp;&nbsp;&nbsp; &lt;/securityPolicy&gt;<br />&nbsp;&nbsp;&nbsp; &lt;trust level="Medium" originUrl="" /&gt;<br />&nbsp; &lt;/system.web&gt;<br />&lt;/location&gt;   </pre></div><blockquote><b>注意</b>: &nbsp;&nbsp;存在する場合は、<b>WebPermission</b> などの特定のアクセス許可により <b> originUrl</b> 属性を使用して、定義済みのネットワーク アドレス セットへの接続性を制限できます。</blockquote><li>個別のアプリケーション設定がグローバル設定を無効にしないようにするために、信頼設定がマシン レベルの Web.config ファイルにおいてロックされていることを確認します。 </li></li></li>
  </ol>
  <h2>信頼レベルをロックする</h2>
  <p>サービス プロバイダー、または同一サーバ上で複数の Web アプリケーションを実行することに関する責任者は、マシン レベルの Web.config ファイルで信頼ポリシー設定を適用し、すべての Web アプリケーションについて信頼レベルをロックすることをお勧めします。</p>
  <p>これを行うには、以下のコードの例で示されるように、マシン レベルの Web.config ファイルで <b>allowOverride</b> 属性を <b>false</b> に設定します。</p>
  <div>
 <pre>&lt;location allowOverride="false"&gt;<br />&nbsp; &lt;system.web&gt;<br />&nbsp;&nbsp;&nbsp; &lt;securityPolicy&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;trustLevel name="Full" policyFile="internal" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;trustLevel name="High" policyFile="web_hightrust.config" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;trustLevel name="Medium"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; policyFile="web_mediumtrust.config" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;trustLevel name="Low"&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; policyFile="web_lowtrust.config" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;trustLevel name="Minimal" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; policyFile="web_minimaltrust.config" /&gt;&nbsp; <br />&nbsp;&nbsp;&nbsp; &lt;/securityPolicy&gt;<br />&nbsp; &lt;trust level="Medium" originUrl="" /&gt;<br />&nbsp; &lt;/system.web&gt;<br />&lt;/location&gt;   </pre>
  </div>
  <p><b>allowOverride</b> 属性を <b>false</b> に設定することにより、個々の開発者がアプリケーションの Web.config ファイルにおいて中信頼設定を無効にしないようにします。</p>
  <h2>カスタム ポリシーの使用</h2>
  <p>共有イントラネット サーバ上で複数のアプリケーションをホストしている場合、カスタム ポリシーを開発してアプリケーションの特定の要件をサポートする必要がある場合があります。 </p>
  <h3>適切な信頼レベルを選択するには</h3>
  <ol>
    <li>ホストされるアプリケーションのアクセス許可要件を決定します。 手動でコードを分析して、コードがアクセスするリソースの種類、必要とするリソース アクセスの種類 (読み取り/書き込みなど)、および実行する特権オペレーションを決定することにより、アクセス許可要件を決定できます。 また、サポートとして PermCalc ツールを使用できます。 <li>高信頼から始めて、各信頼レベルを調べます。 %windir%\Microsoft.NET\Framework\{version}\CONFIG フォルダーからWeb_HighTrust.config ポリシー ファイルを開き、高信頼レベル設定がアプリケーションを十分に制限しているかどうかを決定するためのアクセス許可を調べます。<li>アプリケーションが、高信頼レベルにより提供されるよりも少ないコード アクセス セキュリティ権限を必要とする場合、中信頼レベルを検討します。 <blockquote><b>注意</b>: &nbsp;&nbsp;低および最小の信頼レベルは、ロック ダウンされた実行環境、または大部分の Web アプリケーションが 物理 .aspx ページ コードの代わりにグローバル アセンブリ キャッシュ (GAC) におけるアセンブリに存在する環境用に設計されています。</blockquote></li></li></li>
  </ol>
  <p>このプロセスによって、アプリケーションのコード アクセス セキュリティのアクセス許可要件に可能な限り近いものに一致する信頼レベルを特定しやすくなりますが、アプリケーションに必要のないアクセス許可が付与されることはありません。 提供された信頼レベルの 1 つにアプリケーションのアクセス許可要件が直接的に適合しない場合、カスタム ポリシー ファイルを作成する必要がある場合があります。 この実行方法に関する詳細については、<a href="http://msdn2.microsoft.com/en-us/library/ms998326.aspx">「ASP.NET 2.0 と共にコード アクセス セキュリティを使用する方法」を参照してください。</a></p>
  <h1>手順 2:  プロセス分離にアプリケーション プールを使用する</h1>
  <p>Windows Server&nbsp;2003 および IIS&nbsp;6.0 を起動する際は、複数のアプリケーション プールを使用し、各アプリケーションが独自の固有 ID で独自のワーカー プロセス (W3wp.exe) において起動するよう構成することをお勧めします。 これによりプロセス レベルの分離を提供し、それによりアプリケーションを別々に監査し、適切に構成された ACL で個別のアプリケーションを制限できるようになります。</p>
  <blockquote>
    <b>注意</b>: &nbsp;&nbsp;IIS が IIS&nbsp;分離モードでなくワーカー プロセス分離モード (デフォルト) で起動している場合にのみ、アプリケーション プールを使用できます。</blockquote>
  <h2>アプリケーション プールに分離を使用するには</h2>
  <ol>
    <li>アプリケーションごとに 1 つずつカスタムな ローカルまたはドメイン アカウントのセットを作成し、各アプリケーション プール プロセス インスタンスを起動します。 <blockquote><b>注意</b>: &nbsp;&nbsp;アプリケーションをデフォルトの NetworkService アカウントで起動しないことにより、このアカウントのアクセス許可に対する意図的または偶発的な変更がアプリケーションに影響を与えないことを確認します。 さらに、別の ID を持つことにより、別の監査、および各アプリケーションについて別箇に ACL を構成する機能から利益を得ることができます。</blockquote><li>各アカウントの NTFS アクセス許可を構成し、各アカウントが適切なファイル システム ファイルおよびフォルダーのみにアクセスでき、オペレーティング システム ツールなどの重大なリソースにアクセスできないことを確認します。 カスタム サービス アカウントをローカル IIS_WPG グループに追加するには:<ol><li><b>[スタート]</b> メニューで、<b>[コントロール パネル]</b> をクリックし、<b></b><b>[AdministrativeTools]</b><b></b> をクリックして <b>[コンピュータ管理]</b> をクリックします。<li><b>[ローカル ユーザーおよびグループ]</b> をダブルクリック (展開) し、<b>[グループ]</b> をダブルクリック (展開) します。<li><b>[IIS_WPG]</b> グループを右クリックし、<b>[グループに追加]</b> をクリックします。<li><b>[追加]</b> をクリックしてカスタム アカウント名を入力し、<b>[OK]</b> をクリックします。</li></li></li></li></ol><p>アカウントを IIS_WPG グループに追加することにより、ファイル システム フォルダーおよびレジストリ キーへの適切なアクセス権をアカウントに付与し、Web アプリケーション プロセスを起動するために必要なユーザー権限をアカウントに付与します。 </p><li>各アカウントについて、以下の ASP.NET IIS 登録ツール (Aspnet_regiis.exe) コマンドを実行し、関連する ASP.NET アクセス許可をアカウントに割り当てます。<p><b>aspnet_regiis -ga accountname</b></p><blockquote><b>注意</b>: &nbsp;&nbsp;Windows Server&nbsp;2003 では、&lt;CODE&gt;<b><i>Aspnet_regiis.exe-ga</i></b><b><i></i></b>&lt;/CODE&gt; コマンドを実行することによりアカウントを IIS_WPG グループに追加します。 IIS_WPG グループは、<b>バッチ ジョブとしてログオンする</b>アクセス許可を提供し、必要なファイル システムのアクセス許可が付与されていることを確認します。</blockquote><p>このツールの詳細については、<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cptools/html/cpgrfaspnetiisregistrationtoolaspnet_regiisexe.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cptools/html/cpgrfaspnetiisregistrationtoolaspnet_regiisexe.asp</a> の「ASP.NET IIS 登録ツール (Aspnet_regiis.exe)」を参照してください。</p><li>新しいアプリケーション プールを作成し、それらが新しいアカウントの下で起動するよう構成します。 <ol><li>Internet Information Services (IIS) Manager を起動し、左のペインで、ローカル コンピュータ ノードをダブルクリック (展開) して <b>[アプリケーション プール]</b> をダブルクリック (展開) します。<li>[アプリケーション プール] を右クリックし、[新規アプリケーション プール] をクリックします。<li><b>[新規アプリケーション プールの追加]</b> ダイアログ ボックスで、ホストされるアプリケーションに関連する固有のアプリケーション プール名を入力します。 <b>[新規アプリケーション プールにデフォルトの設定を使用する]</b> オプションを選択したままにして、<b>[OK]</b> をクリックします。指定された名前の新規アプリケーション プールが作成されます。 <li>新規アプリケーション プールを右クリックし、<b>[プロパティ]</b> をクリックします。<li><b>Identity( ID )</b> タブをクリックしてください。 <b>Application pool identity(アプリケーション プール ID )</b> セクションで、<b>Configurable(構成可能)</b> をクリックしてください。<li>アカウント名とパスワードを入力し、<b>[適用]</b> をクリックします。<b>Confirm Password(パスワードの確認)</b> ダイアログ ボックスが表示されます。 パスワードを再度入力し、<b>OK</b> をクリックし、次に再度 <b>OK</b> をクリックしてください。 </li></li></li></li></li></li></ol><li>各アプリケーションを独自のアプリケーション ツールで起動するように構成します。 </li><ol><li>IIS で、ホストされているアプリケーションの仮想ディレクトリを右クリックし、<b>[プロパティ]</b> をクリックします。<li><b>[ディレクトリ]</b> タブの <b>[アプリケーション設定]</b> セクションで、前に作成したアプリケーション プールを選択して <b>[OK]</b> をクリックします。</li></li></ol></li></li></li></li>
  </ol>
  <h1>手順 3:  machineKey 設定を確認する</h1>
  <p>Web.config ファイルの <b>machineKey</b> エレメントは、暗号化や検証アルゴリズム、およびForms Authentication Cookie 、ロール Cookie 、匿名 ID Cookie 、およびページ レベル 表示ステータスの保護を支援するために使用される鍵を指定するために使用されます。 暗号鍵および検証鍵がアプリケーションごとに異なることを確認することをお勧めします。 これは、クロス アプリケーション認証、認可および匿名 ID を防止します。 また、さまざまなアプリケーション間で表示ステータスにアクセスできないことを確認するために役立ちます。 デフォルトで、検証および暗号鍵は、以下のデフォルト構成を使用して各アプリケーションについて固有の値に設定されています。</p>
  <div>
 <pre>...<br />&lt;system.web&gt;<br />&nbsp; &lt;machineKey validationKey="AutoGenerate,IsolateApps" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; decryptionKey="AutoGenerate,IsolateApps" ... /&gt;<br />&lt;/system.web&gt;<br />...  </pre>
  </div>
  <p>追加のセキュリティのため、各アプリケーションの Web.config ファイルにおいて、カスタム <b>validationKey</b> および <b>decryptionKey</b> 値を指定することをお勧めします。 </p>
  <blockquote>
    <b>注意</b>: &nbsp;&nbsp;アプリケーションを Web ファームに展開する場合、特定のアプリケーションについて各サーバ上の構成ファイルが <b>validationKey</b> および <b>decryptionKey</b> について同じ値を共有することを確認する必要があります。どのサーバで連続要求が処理されるか保証できないため、この手順が必須となります。 また、別個のアプリケーションについてはそれらが異なる値に設定されていることも確認する必要があります。</blockquote>
  <h1>信頼レベルの概要</h1>
  <p>さまざまな信頼レベルで起動するアプリケーションに利用可能な機能は、表&nbsp;1 に要約されています。</p>
  <p>
    <b>表 1 信頼レベルとその機能および制限</b>
  </p>
  <div>
    <table>
      <tbody>
        <tr>
          <th>信頼レベル</th>
          <th>主要な機能および制限</th>
        </tr>
        <tr>
          <td>完全</td>
          <td>コード アクセス セキュリティにより課される制限はありません。</td>
        </tr>
        <tr>
          <td>高</td>
          <td>アンマネージ コードを扱えません。<br />エンタープライズ サービスを扱えません。<br />Microsoft SQL Server およびその他の OLE DB データ ソースにアクセスできます。<br />SMTP サーバを使用して、電子メールを送信することができます。<br />リフレクションのアクセス許可がかなり制限を受けます。 リフレクションを使用してプライベート コードを起動できません。<br />広範囲にわたる一連のその他のフレームワーク機能を使用できます。 アプリケーションはファイル システムおよびソケットに対する完全アクセス権を付与されます。</td>
        </tr>
        <tr>
          <td>中</td>
          <td>アクセス許可は、アプリケーションのディレクトリ構造内でそのアプリケーションがアクセスできるものに限定されます。<br />アプリケーションの仮想ディレクトリ階層外では、ファイル アクセスは許可されません。<br />SQL Server データ ソースにアクセスできます。<br />SMTP サーバを使用して、電子メールを送信することができます。<br />特定の共通環境変数に対する権利が制限されます。<br />リフレクションのアクセス許可はまったく受けられません。<br />ソケットのアクセス許可を受けられません。<br />Web リソースまたは Web サービスにアクセスするには、<b>trust</b> エレメントの <b>originUrl</b> 属性内またはポリシー ファイル内に、エンドポイント URL を明示的に追加する必要があります。</td>
        </tr>
        <tr>
          <td>低</td>
          <td>ネットワーク接続を持たない読み取り専用のアプリケーション、またはコードの大部分がグローバル アセンブリ キャッシュに格納されたアセンブリに位置するアプリケーション、といった概念をモデル化することを目的としています。<br />アプリケーションの仮想ディレクトリ構造内のファイル I/O に対する読み取り専用アクセス。<br />スレッド上または  <b>HttpContext</b> 上の <b>IPrincipal を変更することはできません。</b></td>
        </tr>
        <tr>
          <td>最小</td>
          <td>実行専用。<br />スレッド上または  <b>HttpContext</b> 上の <b>IPrincipal</b> を変更することはできません。</td>
        </tr>
      </tbody>
    </table>
  </div>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>