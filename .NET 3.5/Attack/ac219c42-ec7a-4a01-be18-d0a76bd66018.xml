<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1102256527" Content_Hash="1390425320">
  <Metadata>
    <Id>ac219c42-ec7a-4a01-be18-d0a76bd66018</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>セッション予測攻撃</Title>
    <Category>アプリケーションの状態</Category>
    <Phase>実装</Phase>
    <Technology> 任意</Technology>
    <Type>攻撃</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>適用先</h1>
  <p>セッション識別子を利用して状態を維持しなければならないネットワーク アプリケーション。</p>
  <h1>説明</h1>
  <p>セッション予測攻撃では、悪意のあるユーザーが、過去、現在、未来のセッションに関してセッション ID の新規作成に使用される手法を見分けようとします。 セッション ID が推測できる場合、攻撃者は認証を受けたユーザーの Credential 情報をピギーバックし、そのユーザーになりすますことができます。</p>
  <h1>影響</h1>
  <p>特権の昇格: 攻撃者はセッション ハイジャックを利用して、セッションをユーザーからハイジャックし、そのユーザーとして行動できます。</p>
  <h1>脆弱性</h1>
  <ul>
    <li>貧弱な、あるいは予測可能なセッション識別子 – 使用する ID スペースが小さいと、ID を再利用しなければならなくない可能性とセッション ID の推測が成功する可能性が高くなります。<li>長いセッション タイムアウト – セッションが時間切れにならない、または時間切れまでの時間が非常に長い場合、セッション ID を推測し、スニッフィングした ID を利用する時間を攻撃者に多く与えます。<li>安全でない通信チャンネル – 安全でない通信チャンネルを利用すると、有効なセッション ID を攻撃者がリアルタイムでスニッフィングできます。</li></li></li>
  </ul>
  <h1>対策</h1>
  <ul>
    <li>セッション識別子として強力な乱数を利用する - 暗号論的に安全な乱数 (GUID など) の生成ツールをセッション ID に利用すると、セッション ID を予測できなくなります。<li>大きい ID スペースを利用する – これにより、セッション ID の繰り返し利用が減ります。<li>セッション タイムアウトに短い時間枠を使用する – 時間枠が非常に短ければ、攻撃者が有効なセッション ID を推測したり、スニッフィングしたりできたときにはセッションが時間切れとなっています。 <li>安全な通信チャンネルを利用する – 通信チャンネルが安全であれば、攻撃者にとってセッション ID の推測材料となるデータが少なくなり、セッション識別子をスニッフィングする可能性がなくなります。 <li>セッション識別子を再利用しない – 同じユーザーにセッション ID を再利用しないでください。ログインが成功するたびに新しく暗号論的にランダムなセッション ID を割り当ててください。 </li></li></li></li></li>
  </ul>
  <h1>例</h1>
  <p>攻撃者はサーバに複数回ログインし、多くのセッション ID を集めようとする場合があります。 十分にたくさんのセッション ID が集まったら、それに対して統計分析を行い、将来のセッション ID を予測しようとします。 攻撃者はまた、サーバが IP や MAC アドレスなどのその他の情報にセッション ID をバインドしていないことを確認することがあります。 この操作は、2 つの IP を利用して 2 台の異なるコンピューターからサービスにログインし、セッション ID を交換することで行えます。 </p>
  <p>最初に攻撃者は何度もログインして応答からセッション ID を引き出します。これは手動で行われることも、ツールを利用して行われることもあります。 この例のセッション ID では、次のセッション ID が集められました。</p>
  <p>
    <table>
      <tbody>
        <tr>
          <td>MTUzNTp1c2VyTmFtZQ==</td>
        </tr>
        <tr>
          <td>MTUzNzp1c2VyTmFtZQ==</td>
        </tr>
        <tr>
          <td>MTUzODp1c2VyTmFtZQ==</td>
        </tr>
        <tr>
          <td>MTU0MDp1c2VyTmFtZQ==</td>
        </tr>
      </tbody>
    </table>
  </p>
  <p>セッション ID の最後のイコール記号は Base64 エンコーディングであることを告げています。そのため、攻撃者はセッション ID を解読し、この Web アプリケーションではセッション ID をインクリメントしてユーザー名に付加して使用していることに気付きます。</p>
  <table>
    <tbody>
      <tr>
        <td>MTUzNTp1c2VyTmFtZQ==</td>
        <td>1535:userName</td>
      </tr>
      <tr>
        <td>MTUzNzp1c2VyTmFtZQ==</td>
        <td>1537:userName</td>
      </tr>
      <tr>
        <td>MTUzODp1c2VyTmFtZQ==</td>
        <td>1538:userName</td>
      </tr>
      <tr>
        <td>MTU0MDp1c2VyTmFtZQ==</td>
        <td>1540:userName</td>
      </tr>
    </tbody>
  </table>
  <p>セッション ID を予測するためのメカニズムがわかると、攻撃者はサーバへの攻撃を開始できます。 攻撃者は単純に現在のセッション ID より少し大きいか少し小さい数字を予測し、それを既知のユーザー名の一覧に付加します。 この方法で有効なセッション識別子が生成されると、攻撃者は別のユーザーとしてサーバにログインできます。</p>
  <h1>その他のリソース</h1>
  <ul>
    <li>セッション予測攻撃に関する詳細は、<a href="http://www.webappsec.org/projects/threat/classes/credential_session_prediction.shtml">Credential  情報/セッション予測</a>を参照してください。</li>
  </ul>
  <h1>関連する項目</h1>
  <ul>
    <li>
      <a href="/article/2c48bbd6-2677-4ab0-80df-57985b90bee4">ガイドライン: ASP.NET Session State を保護する</a>
      <li>
        <a href="/article/254ddab5-ecd2-4e05-a2b0-861e970bc0d9">ガイドライン: セッション Cookieを保護する</a>
      </li>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>