<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-384522435" Content_Hash="1015466804">
  <Metadata>
    <Id>350d9e10-d3d2-4e15-af89-f6ea84c01320</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>鍵の総当たり攻撃</Title>
    <Category>暗号化</Category>
    <Phase>実装</Phase>
    <Technology> 任意</Technology>
    <Type>攻撃</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>適用先</h1>
  <p>何らかの種類の暗号化を使用するアプリケーション。</p>
  <h1>説明</h1>
  <p>暗号化では、鍵を利用して暗号の動作を制御し、暗号化されたテキストをプレーン テキストに変換できるのは正しい鍵だけであるようにします。 ほとんどの暗号は一般に知られているアルゴリズムに基づくため、こうした鍵は文字通り城を開けるための鍵なのです。 鍵の総当たり攻撃 (Brute Force Attack)では、正しい鍵が見つかるまで、考えられるすべての鍵が試されます。 理解できるプレーン テキストが発見されるまで、暗号文はさまざまな鍵で解読されます。 鍵が長ければ、この種の攻撃で鍵を破るためにそれだけ多くの労力が必要になります。十分な長さの鍵を用意すれば、それに必要な労力はもはや実行不可能なレベルとなります。 そのため、この種の攻撃に抵抗するためには暗号鍵の長さが重要です。</p>
  <p>総当たり攻撃に必要なリソースは、鍵サイズが増えれば指数関数的にスケールアップします。 そのため、鍵サイズを倍にすると、必要な操作の数は倍になるのではなく、2 乗になります。 一部のアルゴリズムは長い鍵をサポートしないので避けるべきです。</p>
  <p>鍵のブルートフォースにかかる時間を短縮させ、攻撃者を支援する別の要因は、鍵の生成アルゴリズムです。 アルゴリズムが弱いか、推測可能な Seed を利用している場合、より少ない鍵のセットに対して徹底的な検索が可能になります (たとえば、辞書の言葉から生成された鍵)。</p>
  <p>暗号鍵を破るために以前に攻撃者を支援したもう 1 つの要因は鍵情報の漏えいに関するものです。 間違ったプロトコル実装により、暗号化されたトラフィックを観察している第三者に鍵の一部が「漏れて」いました。 このような例の 1 つは <a href="http://www.securityfocus.com/infocus/1814">WEP アルゴリズムを破ること</a>です。鍵の一部が漏れると、攻撃者ははるかに短時間で正しい鍵をブルートフォースできます。</p>
  <p>鍵のブルートフォース攻撃は、暗号化を意図していない鍵に対しても使用されます。たとえば、ソフトウェア製品有効化キーや Web アプリケーション認証で利用されるセッション ID です (<a href="/article/862e51f1-a026-40f9-826b-7a65fa5dc563">HTTP セッション ハイジャック攻撃</a>参照)。ここでの問題の原因も同様に、鍵の長さが十分ではなかったり弱い鍵を生成したりすることです。</p>
  <h1>影響</h1>
  <ul>
    <li>
      <strong>特権の昇格</strong>: 攻撃者は通信のいずれの側も気付かないうちに、安全であるはずのデータを危険にさらすことができます。</li>
  </ul>
  <h1>脆弱性</h1>
  <ul>
    <li>不適切に短い長さの鍵を利用すること。 <li>弱い鍵の生成アルゴリズムを利用すること。 <li>大きなサイズの鍵をサポートしない暗号化アルゴリズムを利用すること。 <li>情報漏れで鍵を弱体化させるプロトコルを利用すること。 <li>アルゴリズムの使用法が間違っていて、その力を弱めること。</li></li></li></li></li>
  </ul>
  <h1>対策</h1>
  <ul>
    <li>
      <strong>強力なアルゴリズムを使用する</strong>: 多くの場合、使用できる鍵の長さは使用するアルゴリズムに依存します たとえば、DES では 56 ビットの鍵しか使えず、ほとんどの目的で安全ではなくなりました。 <li><strong>長い鍵を使う</strong>: 適切な長さの鍵の選択は、総当たり攻撃が現実にどの程度な実現可能であるかに依存します。 対称アルゴリズムの場合 (AES など)、鍵の長さが 128 ビットであれば強力であると考えられます。 アメリカ政府は最高機密データに 192 ビットまたは 256 ビットの AES 鍵を要求しています。 非対称アルゴリズムの場合 (RSA など)、2048 ビットの長さか、それと同等の鍵が強力であると考えられます。 <li><strong>アルゴリズムを正しく使用する</strong>: 鍵データの漏えいなどによって、システムの完全性が侵害されないようにします。アルゴリズムとプロトコルの両方を正しく実装することは非常に難しいことです。システム ライブラリを常に使用してください。 <li><strong>プロトコルを正しく実装する:</strong> 元の設計に沿って暗号化プロトコルを実装します。 新しいプロトコルをゼロから設計することは新しい暗号化アルゴリズムを設計することと同じくらい困難であり、専門家に任せるべきものであることを理解してください。 <li><strong>強力な GUID またはその他の非暗号化鍵を利用する:</strong> 攻撃者の推測をチェックする難しさや予想される有効な GUID の数を想定し、非暗号化鍵を利用するときは、総当たり攻撃に対抗するために十分な長さのものを利用します。</li></li></li></li></li>
  </ul>
  <h1>その他のリソース</h1>
  <ul>
    <li>
      <a href="http://en.wikipedia.org/wiki/Brute_force_attack">Wikipedia の総当たり攻撃</a>
      <li>
        <a href="http://en.wikipedia.org/wiki/Cryptographic_key_length">Wikipedia の鍵サイズについての議論</a>
      </li>
    </li>
  </ul>
  <h1>関連する項目</h1>
  <ul>
    <li>
      <a href="/article/cd4ccbbb-be9c-4ff4-8b20-d116819b634b">ガイドライン: 安全な鍵の保管場所を使用する</a>
      <li>
        <a href="/article/b070122f-f1d1-47da-a378-57f845d5db61">ガイドライン: 通信リンクを暗号化する</a>
      </li>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>