<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1646158547" Content_Hash="23672707">
  <Metadata>
    <Id>5838dafd-cd19-4697-85c3-26d1ed4458e1</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>競合状態攻撃</Title>
    <Category>アプリケーションの状態</Category>
    <Phase>設計</Phase>
    <Technology> 任意</Technology>
    <Type>攻撃</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>適用先</h1>
  <p>あらゆるアプリケーション。</p>
  <h1>説明</h1>
  <p>攻撃者は競合状態を利用してアプリケーションの応答を止めたり、意図しないリソースを利用させたりします。 開発者がリソースの可用性をチェックするタイミングと、リソースが使用されるタイミングの間に入り込み、攻撃者はそのリソースに関する何かを変更し、アプリケーションの予期せぬ動作を引き起こすことができます。 複数のユーザー、プロセス、Threadを自動処理しない外部リソースはすべて、この種の攻撃に脆弱です。 この用語はもともと、2 つ以上の信号またはプロセスが競って出力を変更したり影響を与えたりすることから来ています。</p>
  <p>複数のThreadで、リソースが利用可能になるのを待っているとき、セマフォまたは鍵を使用して、リソースにアクセスできるThreadを指定できます。セマフォが適切に設定されていない場合や鍵を落とした場合、実際にリソースを利用しているThreadがないのに、すべてのThreadが待機状態に設定されることがあります。 あるいは、複数のThreadが同時に同じリソースを使用しようとした場合、リソースが停止、クラッシュ、またはデータ破損を起こすことがあります。</p>
  <p>攻撃者は、チェックと使用の間に時間が十分あれば、アプリケーションを別のリソースにリダイレクトできる場合もあります。 例については、例のセクションを参照してください。</p>
  <h1>影響</h1>
  <ul>
    <li>
      <strong> DoS攻撃</strong>: アプリケーションがリソースをチェックした後、リソースを使用する前に、攻撃者がリソースを利用不可能にできた場合、アプリケーションはリソースが利用可能になるのを待機して、クラッシュまたはハングすることがあります。 <li><strong>特権の昇格</strong>: 攻撃者はリソースをシンボリック リンクに置換することで、自分がアクセスできるリソースから、自分がアクセスできないリソースにユーザーをリダイレクトできます。</li></li>
  </ul>
  <h1>脆弱性</h1>
  <ul>
    <li>チェック後にリソースを使用するための待ち時間が必要以上に長い<li>トランザクションを利用しない<li>鍵またはセマフォの不適切な使用法</li></li></li>
  </ul>
  <h1>対策</h1>
  <ul>
    <li>
      <strong>適切な特権を確保する</strong>: リソースを扱うとき、アプリケーションが適切な特権を使用するようにします。<li><strong>排他的権利を確保する</strong>: アプリケーションまたはThreadが、リソースを使用する前に適切にロックするようにします。 <li><strong>チェックの直後にリソースを使用する</strong>: チェックの コードの直後に使用のコードを置くことで、チェックと使用の間の時間を最小限に抑えます。 可能な場合、リソース操作は最小単位で行います。 リソースは使用のたびにチェックするようにします。 <li><strong>可能であれば、トランザクションを利用する</strong>: トランザクションを使用すれば、コミット前にトランザクションの完了を確認できます。 トランザクションの完了前にリソースが変更された、または利用不可能になった場合、変更をロールバックし、別のトランザクションのためにリソースを準備できます。<li><strong>鍵またはセマフォの使用を徹底的にテストする</strong>: リソースのロックは難しい行為です。リリース前に適切にテストします。</li></li></li></li></li>
  </ul>
  <h1>例</h1>
  <p>Linux の人気のあるターミナル エディターに競合状態問題に対する脆弱さがあり、ユーザーはファイル システム上の任意の場所に書き込むことができました。 </p>
  <p>攻撃は次の手順を踏みました。</p>
  <ol>
    <li>ターミナル エディターのログ機能をオンにします。ホーム ディレクトリなど、自分が書込アクセス許可を持つファイルにログを取るように設定します。<li>ターミナル エディターの使用を始めます。ログ ファイルが作成されます。<li>ターミナル エディターが作成したログ ファイルを削除し、あなたが書込アクセス許可を持たないファイルへのシンボリック リンクで置換します。</li></li></li>
  </ol>
  <p>ターミナル エディターはrootとして実行されていたため、システムのどこにでも書き込める完全特権が与えられていました。 シンボリック リンクは別のファイルと区別できないため、ターミナル エディターはすべてのログをシンボリック リンクが指し示したファイルに追加しました。</p>
  <h1>その他のリソース</h1>
  <ul>
    <li>競合状態を防ぐ <a href="http://www-128.ibm.com/developerworks/linux/library/l-sprace.html">http://www-128.ibm.com/developerworks/linux/library/l-sprace.html</a><li>競合状態に関する情報 <a href="http://en.wikipedia.org/wiki/Race_condition">http://en.wikipedia.org/wiki/Race_condition</a></li></li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>