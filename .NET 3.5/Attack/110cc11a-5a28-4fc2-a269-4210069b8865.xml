<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-1283144909" Content_Hash="246396387">
  <Metadata>
    <Id>110cc11a-5a28-4fc2-a269-4210069b8865</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>サーバーサイド コード インジェクション攻撃</Title>
    <Category>入力とデータの検証</Category>
    <Phase>実装</Phase>
    <Technology> 任意</Technology>
    <Type>攻撃</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>適用先</h1>
  <p>ユーザーの入力をサーバー側で処理するすべての Web アプリケーション。</p>
  <h1>説明</h1>
  <p>攻撃者は、悪意のある入力を送信し、サーバーで実行させることによって、サーバーサイド コード インジェクション攻撃を行います。 この悪意のある入力を送信する方法は多数あり、それには Web フォーム要素や URL パラメータが含まれます。 悪意のある入力は、サーバー上のバックエンド アプリケーションに対して入力の処理を強制するような方法で作成し、送信する必要があるので、攻撃者は通常、バックエンド アプリケーションのことを理解している必要があります。 攻撃者は<a href="/article/7d83d845-cd2b-4067-bb4c-5fbb890b9c9e">情報漏えい攻撃</a>を使用して、バックエンド システムについての知識を得ます。</p>
  <p>攻撃のタイプは、バックエンド アプリケーションのタイプに応じて異なります。 一般的なサーバーサイド コード インジェクション攻撃としては、次のものがあります。</p>
  <ul>
  </ul>
  <h1>影響</h1>
  <ul>
    <li>サーバー上で悪意のあるコードが実行されるため、サービスとデータの機密性、完全性および可用性が脅威を受けます。</li>
  </ul>
  <h1>脆弱性</h1>
  <ul>
    <li>ユーザー入力の検証が弱い、または行われていないこと。 <li>昇格された特権で実行されること。これはコード実行につながりませんが、結果として、攻撃の影響が悪化します。 </li></li>
  </ul>
  <h1>対策</h1>
  <ul>
    <li>
      <strong>入力検証</strong>: ユーザーが指定した入力は、サーバーで処理する前に、そのタイプ、サイズ、形式および内容の検証を行う必要があります。 <li><strong>制御とデータ フローの分離</strong>: ユーザー入力は、制御情報が存在するコンテキストから隔離し、分離状態を維持する必要があります。</li></li>
  </ul>
  <h1>例</h1>
  <p>説明のセクションで言及されている特定の攻撃タイプで示されている例を参照してください。</p>
  <h1>その他のリソース</h1>
  <p />
  <h1>関連する項目</h1>
  <ul>
    <li>
      <a href="/article/5865cd19-5ead-401d-abd7-7e54cd2c1fc1">ガイドライン: ストアド プロシージャを使用する</a>
      <li>
        <a href="/article/b431b7df-36d8-461b-a437-675a20e9548b">ガイドライン: データベースに渡されるすべての入力を検証する</a>
      </li>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>