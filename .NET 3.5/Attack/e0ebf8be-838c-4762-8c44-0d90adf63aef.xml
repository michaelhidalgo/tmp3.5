<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-576817280" Content_Hash="1861320446">
  <Metadata>
    <Id>e0ebf8be-838c-4762-8c44-0d90adf63aef</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>アカウント ロックアウト攻撃</Title>
    <Category>認証</Category>
    <Phase>実装</Phase>
    <Technology> 任意</Technology>
    <Type>攻撃</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>適用先</h1>
  <p>認証を実行する、またはサードパーティの認証モジュールを使用するすべてのアプリケーション。</p>
  <h1>説明</h1>
  <p>ロックアウト ポリシーは認証中に使用され、攻撃者が特定のアカウントに対して大量のパスワードを試行するのを防ぎます。 しかしながら、このセキュリティ メカニズムを利用して、攻撃者がDoS状態を引き起こすことができます。 攻撃者が特定のアカウントの「無効なログイン試行」を限度をいっぱいまで使うと、そのアカウントは所有者の意志に反してロックアウトされます。</p>
  <p>この攻撃は、攻撃者がたくさんのユーザーにスクリプト攻撃を仕掛ける際、大量のユーザー名またはアカウント番号を推測できる場合に特に威力を発揮します。</p>
  <h1>影響</h1>
  <p>結果的に、アカウントがロックアウトされたユーザーはサービス拒否されます。</p>
  <h1>脆弱性</h1>
  <ul>
    <li>ロックアウト ポリシーの実装または設定が弱い。 弱いポリシーには次の特性があります。<ul><li>「無効なログイン試行」の限度が低すぎる。 <li>ログイン試行間のタイムアウトが短いか、設定されていない。 <li>失敗に終わったログイン試行間のタイムアウトのインクリメントがない。</li></li></li></ul><li>有効なユーザー名の漏えい<ul></ul></li></li>
  </ul>
  <h1>対策</h1>
  <ul>
    <li>
      <p>ロックアウト ポリシーを構成し、アプリケーションのセキュリティ要件に基づいて、「無効なログイン試行」の限度を受け入れ可能な限度に設定します。</p>
      <li>
        <p>ログインが失敗するたびにタイムアウトが増えるようにロックアウト ポリシーを構成します。 例: 最初にログイン試行が失敗した後にユーザーは 2 秒待たなければならず、2 度目の失敗の後は 4 秒、3 度目の失敗の後は 8 秒待ちます。これで、アカウントをハードロックしたり、正当なユーザーの認証を抑制したりしなくても、スクリプトの実用性がすぐに鈍化します。</p>
        <li>
          <p />ログイン試行の失敗後に <a href="http://en.wikipedia.org/wiki/Captcha">CAPTCHA</a> 値を使用します。 ユーザーがログインに失敗した場合、CAPTCHA レスポンスを要求することで、スクリプトではなくいことの証明をユーザーに要求します。<p /><li><p>ユーザー名が存在しないのかそれともパスワードが間違っているのかが分かるような情報を与えないでください。 これを防ぐには、以下のイベントの間、「ログイン情報が一致しません、または X 回以上ログインに失敗した場合、アカウントはロックされます」のような一般エラー メッセージを常に表示します。</p><ul><li>ユーザー名が無効<li>有効なユーザー名に対してパスワードが無効<li>ユーザー名とパスワードは有効だが、アカウントがロックアウトされている</li></li></li></ul></li></li>
      </li>
    </li>
  </ul>
  <p>ログイン タイムアウトをアカウント別にすることが重要です。 多くの場合、攻撃者が大量のアカウントを並行して攻撃するのを防ぐために、単一の IP のログイン失敗が多すぎる場合、ソース IP のロックアウトが試行されます。 しかしながら、たくさんのユーザーが単一のソース IP から正当にアクセスする場合が考慮されていません。 NAT デバイスの普及により、このような事例は現在では一般的になりました。 代わりに、攻撃者に必要な労力を増やす対策を取ることがより良い戦略となります。 たとえば、パスワードを何回もハッシュしてから送信するようにクライアントに要求します。 ハッシュされたバージョンはサーバに (安全に暗号化されて) 保管されます。サーバは正確性の検証に特別な時間を必要としません。 しかし、クライアント側のハッシュ化プロセスは計算コストが大きく、攻撃者は単一のマシンで複数のアカウントにブルート フォースすることはできません。 監視もここでは効果的です。 あるアカウントのロックされた状態が過度に長い時間続き、それが継続するようにログイン試行の失敗が再発するようであれば、サポート要員の注意を引き、おそらくはユーザーに連絡した後で、さらに積極的なフィルタリングの妥当性について判断します。</p>
  <h1>その他のリソース</h1>
  <ul>
    <li>
      <a href="http://en.wikipedia.org/wiki/Captcha">What is CAPTCHA?</a>
    </li>
  </ul>
  <h1>関連する項目</h1>
  <ul>
    <li>
      <a href="/article/ba207c2f-46a0-473d-9631-7292426b2dad">ガイドライン: 無効なユーザー アカウントを自動的にロックする</a>
      <li>
        <a href="/article/91b4d456-79cf-4da6-afee-23f8e5d8c7b3">ガイドライン: 連続してログインに失敗した後にアカウントをロックする</a>
        <li>
          <a href="/article/56a1ea9e-8981-4315-a048-127a2bea2285">ガイドライン: 特権アカウントの使用を監視する</a>
          <li>
            <a href="/article/740a1606-d091-4a93-bfd8-f0d4226adbf1">ガイドライン: 重大な機能を実行するときに再認証を強制する</a>
          </li>
        </li>
      </li>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>