<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="660857890" Content_Hash="-1450190782">
  <Metadata>
    <Id>61f8ac64-c4e1-4c31-9521-f20a1a64b6fd</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>クロス サイト スクリプティング攻撃</Title>
    <Category>入力とデータの検証</Category>
    <Phase>実装</Phase>
    <Technology> 任意</Technology>
    <Type>攻撃</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>適用先</h1>
  <p>すべての Web アプリケーション</p>
  <h1>説明</h1>
  <p>クロス サイト スクリプティング (XSS) 攻撃は、ブラウザーが信頼済みの Web サイトに接続しているときに、ユーザーのブラウザーで任意のコードを実行させることができます。 攻撃者は、アプリケーションそのものではなく、アプリケーションのユーザーをターゲットとしています。とはいえ、アプリケーションが攻撃のための道具とされます。 スクリプトは、ブラウザーが信頼済みのサイトからダウンロードするものなので、ブラウザーにはコードが正当なものかどうかを判断する方法がありません。 Internet Explorer のセキュリティ ゾーンも防御にはなりません。 攻撃者のコードは信頼済みのサイトに関連付けられているクッキーにアクセスし、ユーザーのローカル コンピュータに保存されるものなので、通常、ユーザーの認証クッキーが攻撃の対象となります。 </p>
  <p>XSS には 2 種類の主要なタイプがあります。持続的なものと被持続的なものです。 攻撃者が悪意のあるスクリプトを Web アプリケーションのデータ ストアにインジェクトすることができた場合、スクリプトは持続的なものとなります。そのコンテンツを含むページをロードする人は誰でも、そのスクリプトを実行することになって、攻撃の被害者となります。 フォーラムやユーザーが提供する HTML コンテンツを持つ他の Web サービスは、この典型的な例です。 このコンテンツが検証されずにエンコードされた場合には、誰でも悪意のあるスクリプトをサイトに残すことができます。 非持続的な XSS は、ペイロードを配信するための、ページのある反射的な性質を使用します。 Web アプリケーションはしばしば、ユーザーの入力を変更せずにエコー バックします。 検索エンジンは、この種の動作の良い例です。 攻撃者は悪意のあるスクリプトを含む URL を作成し、配布することができ、これはユーザーに送り返されます。 この最も一般的な例は、"ページが見つかりません" というエラー ページです。これはリクエストされたページをユーザーにエコー バックします。</p>
  <ul>
    <li>機密性: クロス サイト スクリプティングで実行される最も一般的な攻撃には、ユーザー クッキーに保存された情報を漏えいさせることが関係しています。 <li>アクセス制御: ある状況では、クロス サイト スクリプティングを他の欠陥と組み合わせることにより、被害者のコンピュータ上で任意のコードを実行することが可能な場合があります。 <li>特権の昇格: 攻撃者は、ユーザーの認証情報を得ることができなかった場合でも、そのユーザーとして振る舞うことができます。</li></li></li>
  </ul>
  <h1>影響</h1>
  <ul>
    <li>Credential 情報の漏えい<li>Credential 情報漏えい<li>情報漏えい<li>クライアント マシンでのコードの実行<li>特権の昇格<li>否認</li></li></li></li></li></li>
  </ul>
  <h1>脆弱性</h1>
  <ul>
    <li>入力が Web ページにエコー バックできるときに、ユーザー入力にスクリプト タグが含まれているか検証しないこと。 <li>共有データベースから取得したデータを信頼すること。 <li>リモートに提供されたデータのエンコードを行わないこと。これには DNS の逆引き、クッキーの内容、アップロードされたファイルなどが含まれます。<li>"安全な" タグを不適切に HTML に変換すること。 <li>ユーザー入力を、それが使用されているコンテキストに応じて適切にエンコードせずに、直接表示すること。 <li>ユーザーが送信したデータをホワイトリストではなくブラックリストを使用してチェックすること。</li></li></li></li></li></li>
  </ul>
  <h1>対策</h1>
  <ul>
    <li>信頼済みでない入力については、それをブラウザーにエコー バックする前に、エンコーディング ライブラリ (たとえば Microsoft アンチクロス サイト スクリプティング ライブラリまたは OWASP Reform) を使用して、コンテキストに応じたエンコーディングを行ってください。 言語固有の次のような機能は役に立つかもしれませんが、クロス サイト スクリプティングに対して適切な保護を行う点では十分ではありません。 代わりに、ホワイトリスティング ライブラリを使用するべきです。 これらのライブラリのほとんどは、記号 "、&amp;、&lt;、および &gt; だけを、安全な HTML の等価物に変換します。 <ul><li><strong>Python</strong>: cgi.escape (デフォルトでは 3 種類の文字のエスケープだけを行います。" のエスケーピングはオプションです) <li><strong>ASP</strong>: HttpUtility.HtmlEncode およびHttpUtility.UrlEncode (4 種類の文字のエンコードだけを行います) <li><strong>Perl</strong>: HTML::Entities::encode (デフォルトでは 4 種類の文字のエスケープだけを行いますが、他の安全でない文字も容易に指定できます) <li><strong>PHP</strong>: htmlentities および urlencode (デフォルトでは 4 種類の文字のエスケープだけを行います。オプションとして ' (シングル クォート) のエンコードも行います)</li></li></li></li></ul><li>信頼済みでない入力は、使用する前に、インクルージョン リストを基に検証するべきです。 たとえば、正規表現を使用して受け入れ可能な文字の並びを定義し、それをフィルターとして使用してください。 入力がプリミティブ型のものを意味している場合には、それが予期された型になるように適切に型変換し (型制約)、それから適切な範囲に収まっているかチェックすることができます (範囲制約)。 受け入れ可能な入力が限られた数しかない場合には、シンプルな if または switch 制御構造を使用するか、文字列の固定リストとマッチングを行って、入力をそのセット内に制約できます (ドメイン制約)。</li></li>
  </ul>
  <h1>その他のリソース</h1>
  <ul>
    <li>Microsoft アンチクロス サイト スクリプティング ライブラリについての詳細は、次を参照してください。 <a href="http://www.microsoft.com/downloads/details.aspx?familyid=9A2B9C92-7AD9-496C-9A89-AF08DE2E5982&amp;displaylang=en">Microsoft のダウンロード サイト</a><li>"Reform" エンコーディング プロジェクトの詳細については、次を参照してください。<a href="http://www.owasp.org/index.php/Category:OWASP_Encoding_Project">OWASP Encoding Project のサイト</a><li>クロス サイト スクリプティングについての詳細は、次を参照してください。<a href="http://www.owasp.org/index.php/Cross_site_scripting">OWASP サイトのクロス サイト スクリプティングについての説明</a><li>クロス サイト スクリプティングで使用される攻撃についての詳細は、次を参照してください。<a href="http://ha.ckers.org/xss.html">ha.ckers.org</a><li>緩和手段についての詳細は、次を参照してください。<a href="http://msdn2.microsoft.com/en-us/library/ms998274.aspx">ASP.NET の How To: Prevent Cross-Site Scripting</a></li></li></li></li></li>
  </ul>
  <h1>関連する項目</h1>
  <ul>
    <li>
      <a href="/article/d6ae90bf-1b44-4a89-b22e-55ea97e52ba5">ガイドライン: すべての出力データをエンコードする</a>
      <li>
        <a href="/article/254ddab5-ecd2-4e05-a2b0-861e970bc0d9">ガイドライン: セッション クッキーを保護する</a>
      </li>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>