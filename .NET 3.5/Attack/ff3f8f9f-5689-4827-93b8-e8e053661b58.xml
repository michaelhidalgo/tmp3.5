<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1207662561" Content_Hash="-1660251917">
  <Metadata>
    <Id>ff3f8f9f-5689-4827-93b8-e8e053661b58</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>API ハイジャッキング攻撃</Title>
    <Category>なりすましと委任</Category>
    <Phase>実装</Phase>
    <Technology> 任意</Technology>
    <Type>攻撃</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>適用先</h1>
  <p>すべてのアプリケーション。</p>
  <h1>説明</h1>
  <p>API インジェクション攻撃では、アプリケーションから外部ライブラリへのメソッド呼び出しを傍受します。 この攻撃を利用し、パラメータ値の選り分けや変更を行ったり、昇格した特権で悪意のあるコードを実行したりします。 メソッドは通常、アプリケーションをだましてトロイの木馬である外部ライブラリを読み込ませることで傍受します。 これは、ファイル システム上の外部ライブラリを悪意のあるライブラリに置換するか、アプリケーションをだましてファイル システム上の別の場所から悪意のあるライブラリを読み込ませることで達成されます。</p>
  <h1>影響</h1>
  <ul>
    <li>パラメータ値の選り分けによる機密情報の漏えい。 <li>暗号鍵の窃盗。 <li>パラメータ値の変更によるアプリケーション動作の改ざん。 <li>多くの場合は特権の昇格を利用した、悪意のあるライブラリによるコードの実行。</li></li></li></li>
  </ul>
  <h1>脆弱性</h1>
  <ul>
    <li>ライブラリへの完全パスを明示せずに外部ライブラリを読み込む。 <li>完全性を検証せずに外部ライブラリを読み込む。 <li>外部ライブラリのメソッド呼び出しに平文の機密情報をパラメータとして渡す。 <li>外部ライブラリのファイル アクセス許可が不適切なため、削除または置換が実行しやすい。</li></li></li></li>
  </ul>
  <h1>対策</h1>
  <ul>
    <li>
      <strong>明示的なパスを利用する</strong>: ライブラリの位置を見つける手段として環境パス変数に依存しないでください。読み込もうとするライブラリへの完全パスを明記してください。 <li><strong>ファイルのアクセス権</strong>: 攻撃者に改ざんされたり、置換されたりしないように、外部ライブラリのディレクトリとファイルに適切なアクセス許可を利用します。 <li><strong>バイナリ検証</strong>: 非システム外部ライブラリはすべて、信頼性を検証してから読み込むようにしてください。 これは、ライブラリにデジタル署名し、その署名を検証してからライブラリを読み込むことで達成されます。 <li><strong>暗号化</strong>: 上記の対策のいずれも採用できない場合、アプリケーションで機密情報をパラメータ値として外部ライブラリに渡す前に、すべての暗号化しなければなりません。 これでは攻撃者が悪意のあるコードを実行することを防げませんが、機密情報の漏えいは防ぎます。</li></li></li></li>
  </ul>
  <h1>例</h1>
  <p>現実世界の例として、一般的な Web ブラウザーである Internet Explorer 7 の脆弱性について考えてみましょう。 発表時は、DLL 読み込みハイジャッキング攻撃に対して脆弱でした。 実行時に読み込まれる DLL の完全パスを指定していませんでした。 Internet Explorer は昇格した特権で実行されるわけではありませんが、マルウェアの作者がこの脆弱性を悪用して攻撃し、ユーザーがインターネットを閲覧しているときにブラウザーから情報を盗み始めたので深刻な問題になりました。</p>
  <p>この問題に関する詳細は、次を参照してください。<a href="http://www.securityfocus.com/archive/1/450393">http://www.securityfocus.com/archive/1/450393</a></p>
  <h1>その他のリソース</h1>
  <p>Keyjacking: The Surprising Insecurity of Client-side SSL (<a href="http://www.ists.dartmouth.edu/library/ksi0204.pdf">http://www.ists.dartmouth.edu/library/ksi0204.pdf) </a></p>
  <h1>関連する項目</h1>
  <ul>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>