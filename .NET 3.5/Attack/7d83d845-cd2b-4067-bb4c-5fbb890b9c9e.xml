<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-134630211" Content_Hash="-587486448">
  <Metadata>
    <Id>7d83d845-cd2b-4067-bb4c-5fbb890b9c9e</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>情報漏えい攻撃</Title>
    <Category>機密のデータ</Category>
    <Phase>実装</Phase>
    <Technology> 任意</Technology>
    <Type>攻撃</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>適用先</h1>
  <p>構成と展開の詳細を含む、特定の種類の情報へのアクセスを制限するアプリケーション</p>
  <h1>説明</h1>
  <p>情報漏えい攻撃を受けると、アプリケーションから攻撃者に機密情報が漏えいされます。 機密情報の例としては、過度に説明的なエラー メッセージ、ソース コード、ソフトウェア配信番号やバージョン番号、データベース情報、パスワード、マシン名、その他の機密領域へのパスなど、システム固有データがあります。</p>
  <p>Web アプリケーションに関しては、攻撃者がアプリケーションから情報をさらに取得するための手法がいくつかあります。ディレクトリ インデックシング、パス トラバーサル、ソース コードまたはエラー メッセージや開発者が残したコメントを読み取るなどです。</p>
  <p>攻撃者がアプリケーションのバイナリにアクセスできるとき (インストールされているクライアント アプリケーションの場合)、または攻撃者が強制的ブラウジングやその他の攻撃でアクセスできるとき (サーバ アプリケーションの場合)、情報漏えいのAttack Surface (攻撃対象領域) は非常に大きくなります。 この場合、攻撃者はデバッガ、逆コンパイラ、バイナリ エディター、その他のツールを利用してアプリケーションに残された機密を検索できます。 </p>
  <p>SQL インジェクションも、Web アプリケーションとインストールされているクライアント アプリケーションに関係なく、情報漏えい攻撃の一種と考えられます。それは、SQL インジェクションがその他の類似クエリ ベース攻撃と同様に、データベースに保存されている機密情報にアクセスするために利用できるからです。</p>
  <h1>影響</h1>
  <ul>
    <li>
      <strong>機密性</strong>: 攻撃者は機密情報にアクセスし、それを利用してアプリケーションに対するさらなるエクスプロイトを始めます。アクセスされる情報が直接的な価値のある機密情報 (パスワードや社会保障番号など、ユーザーの機密情報) である場合もあります。<li><strong>認証</strong>: 過度の情報を露呈するエラー メッセージまたは SQL インジェクション エクスプロイトを利用して、攻撃者は他のユーザーの ID とパスワードを割り出し、そのユーザーとしてログインできる場合があります。 </li></li>
  </ul>
  <h1>脆弱性</h1>
  <ul>
    <li>
      <strong>不適切なアクセス許可:</strong>強制的ブラウジングにより、攻撃者はソース コード、バイナリ、バックアップ ファイルなど、見られるべきではない機密情報を発見する場合があります。<li><strong>有効なままにされたディレクトリ インデックシング:</strong>このような場合、攻撃者は Web サイトのディレクトリ全体を自由に閲覧し、サーバ上のすべての利用可能なファイルを把握できます。 <li><strong>プレーン テキストで機微データを保存する:</strong> 機微データをプレーン テキストやエンコーディングの不十分なテキストで保存すると、ユーザー名/パスワードのペア、暗号化鍵、その他の機微データを攻撃者に発見される場合があります。<li><strong>詳細なエラー メッセージ:</strong> SQL エラー、例外ハンドラー エラー、スタック トレースを伝えることはユーザーにとって問題解決の助けにならないばかりか、攻撃者がシステムをエクスプロイトするためにかかる時間を劇的に短縮する場合があります。 <li><strong>コードに残されたコメント:</strong> クライアントはクライアント側のすべてのコードをダウンロードし、また、それにアクセスできます。 HTML、AJAX、その他のスクリプトに残されたコメントは簡単に発見されることがあります。 <li><strong>ハード コードされたユーザー名とパスワード:</strong> アプリケーションをバイナリ エディターで開くと、そのアプリケーションのハード コードされた文字列が表示されます。これにより、攻撃者はハード コードされたCredential 情報に直接アクセスできます。<li><strong>必要以上の特権で運用する:</strong> これにより、攻撃者はサーバ上の見られるべきではない情報にアクセスできる場合があります。 SQL、Web サービス、Web アプリケーションなど、すべてのユーザーに対してアクセス許可を限定するべきです。</li></li></li></li></li></li></li>
  </ul>
  <h1>対策</h1>
  <ul>
    <li>
      <strong>言語固有のコメントを利用する:</strong> このようなコメントは解析エンジンまたはコンパイル エンジンにより自動的に削除され、クライアント側には表示されません。 注記: ColdFusion コメントなど、HTML コメントに似たコメントに注意します ( &lt;&amp;#33;--- comment ---&gt; )。 <li><strong>適切なアクセス許可を使用する:</strong> ユーザーがディレクトリ/パス トラバーサルを利用してファイルに自由にアクセスできないように、サーバ上のファイルやディレクトリへのアクセスを制限します。 <li><strong>強力な暗号化アルゴリズムを利用する:</strong> 機微データを保存するときは、強力な暗号化を利用して適切に保護します。<li><strong>最小限の特権を利用する:</strong> アプリケーションでバックエンド データベース サーバが利用される場合、そのアプリケーションでは必ず最小特権の原則を使用してください。 <li><strong>簡潔なエラー メッセージを使用する:</strong> 機密情報を露呈しない、短い一般的なエラー メッセージのみを使用し、バックエンド データベースやその他のシステムが返すエラー メッセージを決して直接表示しないようにします。 <li><strong>オープン設計の原則を使用する:</strong> アプリケーションを設計するときは、攻撃者がすべての情報にアクセスできるものと想定します。 その情報をもってしてもさらなる攻撃ができないようにアプリケーションにセキュリティを組み込みます。</li></li></li></li></li></li>
  </ul>
  <h1>例</h1>
  <p>
    <strong>ディレクトリ インデックシング</strong>: HTTP 要求 'GET /&lt;null byte&gt;.jsp HTTP/1.0' を攻撃者が利用すると、Null バイトの処理が不適切なため、攻撃者はディレクトリやファイルの一覧を参照できます。</p>
  <p>
    <strong>ディレクトリ トラバーサル</strong>: URL http://www.example.com/../restricted-file.cgi を利用すると、攻撃者は Web ドキュメント root ディレクトリの外にあるファイル 'restricted-file.cgi' にアクセスできます。</p>
  <p>
    <strong>文字をエンコードしたディレクトリ トラバーサル</strong>: URL http://www.example.com/..&amp;#37;255c..&amp;#37;255c/restricted-file.cgi は上記の URL と類似していますが、セキュリティ フィルターをバイパスするために「/」文字が二重にエンコードされています。</p>
  <p>
    <strong>エラー メッセージに情報が多すぎる例:</strong>
  </p>
  <ul>
    <li>ユーザーの無効なパスワード: test<li>ユーザー test はこのシステムには存在しません。<li>開示されていない &amp;#8216; &amp;#8216;); に近い文字 <li>SQL、内部ライブラリ、SSL、暗号化など、内部コンポーネントの例外を示すエラー メッセージ</li></li></li></li>
  </ul>
  <h1>その他のリソース</h1>
  <ul>
    <li>情報漏えい攻撃に関する詳細は、次を参照してください。<a href="http://www.webappsec.org/projects/threat/classes_of_attack.shtml">http://www.webappsec.org/projects/threat/classes_of_attack.shtml </a></li>
  </ul>
  <h1>関連する項目</h1>
  <ul>
    <li>
      <a href="/article/08f2f28f-d09a-4b82-843e-8d971fc50553">ガイドライン: エラー メッセージで重要な情報を開示しない</a>
      <li>
        <a href="/article/74be8616-ad22-4d1d-a7fc-8ff3d145fc61">ガイドライン: クライアントに例外詳細を開示しない</a>
        <li>
          <a href="/article/e706145e-6465-4261-96af-a66d6a19a637">ガイドライン: 出力にデバッグ データを含めない</a>
          <li>
            <a href="/article/a96eaddb-5fb2-458e-b5ca-fde05a9a3a06">ガイドライン: 機微データをパラメータに入れない</a>
            <li>
              <a href="/article/e1992e93-39c6-4508-9b16-0e07b0939c37">ガイドライン: 安全な接続文字列</a>
              <li>
                <a href="/article/0256b587-e8b1-46e0-8b87-f62b9f816c45">ガイドライン: ログ ファイルを保護する</a>
                <li>
                  <a href="/article/2c48bbd6-2677-4ab0-80df-57985b90bee4">ガイドライン: ASP.NET Session State　　を保護する</a>
                  <li>
                    <a href="/article/b070122f-f1d1-47da-a378-57f845d5db61">ガイドライン: 通信リンクを暗号化する</a>
                    <li>
                      <a href="/article/bd63d4b0-205d-4d95-9022-86a3f0af5232">ガイドライン: Credential 情報を送信するときは SSL を使用する</a>
                      <li>
                        <a href="/article/c6f3e32d-57b8-44cf-818a-c346d0014c06">ガイドライン: プレーン テキストで機微データを保存しない</a>
                        <li>
                          <a href="/article/faada3f5-3f50-42fc-b863-5058e3d848cb">ガイドライン: 構成ファイル内の機微データを保護する</a>
                        </li>
                      </li>
                    </li>
                  </li>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>