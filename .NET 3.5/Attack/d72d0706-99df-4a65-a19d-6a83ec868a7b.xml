<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-1919054167" Content_Hash="-1628684384">
  <Metadata>
    <Id>d72d0706-99df-4a65-a19d-6a83ec868a7b</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>Credential 情報総当たり攻撃 (Brute Force Attack)</Title>
    <Category>機密のデータ</Category>
    <Phase>設計</Phase>
    <Technology> 任意</Technology>
    <Type>攻撃</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>適用先</h1>
  <p>Credential 情報を利用するアプリケーション。</p>
  <h1>説明</h1>
  <p>Credential 情報の総当たり攻撃 (Brute Force Attack) では、攻撃者はあらゆるユーザー名とパスワードを使ってアプリケーションにログインしようとします。 しかしながら、攻撃者がこのプロセスを加速または自動化するためのツールや手法が数多く存在します。 </p>
  <p>総当たり攻撃には 2 つの種類があります。オンライン総当たり攻撃とオフライン総当たり攻撃です。 オンライン攻撃では、攻撃者は攻撃対象のアプリケーションに Credential 情報をひとつひとつ送信しては試します。 オンライン攻撃は一般的に、大量の試行が必要になるので、検出が非常に簡単です。新しい認証要求の実行速度を調整すれば大部分は防げます。 オフライン攻撃は防御がずっと難しくなります。 攻撃者が、暗号化されたデータなど、一部のリソースにアクセスできる場合、攻撃者がその解読を試行するのを止めるためにシステムができることはほとんどありません。 そうは言っても、攻撃者の側からすれば、オフライン攻撃には非常に多くの計算が必要です。 </p>
  <p>防御の最前線は、攻撃者にとっても開始点であるパスワードまたはパスフレーズの強度です。 ユーザーが選択しがちな弱いパスワードの種類に関しては、膨大な研究が行われてきました。 結果的に、攻撃者は、可能性の順に大ざっぱに並べられた、大量のパスワード候補の一覧を入手できます。 これにより総当たり攻撃はずっと簡単になります。徹底的な探索に入る前に、最もありそうなエントリを最初に試すことができるからです。 攻撃対象がパスフレーズではなく、鍵であるシステムの場合、鍵の強度を確保するためには暗号論的な非常に無作為であることが不可欠です。アルゴリズムにおいて、鍵のどのような性質が鍵を大きく弱めることになるかを理解することも重要です。</p>
  <p>攻撃の次の段階は統計分析です。 多くの認証システムは最初の印象よりはずっと弱いものです。特に暗号化を使うシステムはそうです。 プロトコルによっては、さまざまな事柄、例えば対話型プロトコルにおけるキーストロークのタイミングでさえ、そこから暗号化されたトラフィックの性質に関する情報が漏えいされます。 これらの構成要素を分析すれば、システムの Credential 情報をブルート フォースするために必要な労力が大幅に軽減します。 この良い例は、802.11 ネットワークの保護に最初に利用された WEP システムです。 攻撃者は、数千の暗号化パケットを集め、それらに比較的簡単な計算を行うだけでこのプロトコルを侵害できます。 これにより、最初の見積もりよりセキュリティの強度がずっと下がりました。</p>
  <p>最後に、1 方向のハッシュ化機能を利用し、パスワードの保護が適切でないシステムに対しては、レインボー テーブルを利用できます。 この手法に関する詳細は、<a href="/article/b0ac82e3-fe0d-4581-85bd-48ff3fd9fb19">弱いパスワード攻撃</a>の記事を参照してください。</p>
  <h1>影響</h1>
  <ul>
    <li>Credential 情報の漏えい<li>Credential 情報漏えい<li>情報漏えい</li></li></li>
  </ul>
  <h1>脆弱性</h1>
  <ul>
    <li>
      <strong>弱い暗号化またはハッシュ化のアルゴリズム:</strong> 暗号化とハッシュ化のアルゴリズム設計は非常に加減が難しく、複雑です。同分野の専門家の査読をパスしたアルゴリズムであっても、時間の経過とともにセキュリティは変化します。 新しい攻撃と既存の攻撃の改良が常に見つかっています。また、利用可能な処理能力も着実に増えています。 <li><strong>貧弱な設計のセキュリティ プロトコル:</strong> セキュリティ プロトコルの設計は、暗号化プロトコルの設計と同じくらい複雑であり、間違いを犯しやすいものです。 事実、安全に見えたプロトコルが攻撃者に簡単に突破されます。 たとえば、初期の無線イーサネット実装のために設計され、使用されたWEP (Wired Equivalent Privacy) プロトコルは設計に深刻な欠陥があることが後に判明しました。 WEP はこの欠陥のため、比較的強力な暗号化アルゴリズムを使用しているにもかかわらず、ほとんどリアルタイムで破られてしまいます。 侵入の被害が続く中、問題解決のために、2 つの新しいプロトコル、WPA と WPA2 を試すことが必要とされています。 <li><strong>弱い鍵またはパスワード:</strong><a href="/article/b0ac82e3-fe0d-4581-85bd-48ff3fd9fb19">弱いパスワード攻撃</a>を参照してください。世界最高のアルゴリズムをもってしても、非常に弱いパスワードや鍵を選ぶユーザーを守ることはできません。 弱いパスワードに対する統制がなければ、多くのパスワードが簡単に推測されます。 <li><strong>ソルトの欠如:</strong> ハッシュされた値が最初に一意のソルトが与えられることなく保存された場合、その値にアクセスできる攻撃者はレインボー テーブル攻撃を実行できます。 <li><strong>Credential 情報チェックを抑制しなかったこと:</strong> 攻撃者がシステムに、アカウントをロックされることなく、可能な限り高い頻度でシステムにパスワードを送信できる場合、使用される Credential 情報の強度の割には、オンライン攻撃がたやすくなります。 <li><strong>暗号化データの不必要な開示:</strong> アプリケーションの暗号化アルゴリズムは、たとえ攻撃者がデータにアクセスできたとしてもシステムが安全でいられるように実装する必要がありますが、暗号化された、またはハッシュされたデータに攻撃者がアクセスすることを不必要に許可するようであれば、攻撃者にとってオフライン攻撃の実行はずっと簡単になります。</li></li></li></li></li></li>
  </ul>
  <h1>対策</h1>
  <ul>
    <li>
      <strong>暗号化とハッシュ化の強力なアルゴリズムを使用する:</strong>ハッシュ化のアルゴリズムのベスト プラクティスは変わります。最新のものを調査します。 現在のところ、対称暗号化には AES または AES256 が良い選択です。公開鍵の暗号化には 2048 ビット RSA が良い選択です。ハッシュ化アルゴリズムには SHA または SHA256 が良い選択です。 必要なアルゴリズムの強度はアプリケーションのセキュリティ プロファイルに一致するべきです。 いかなる場合も、独自のアルゴリズムを設計するべきではありません。 よく知られ、試験され、適切に選ばれた現代的なアルゴリズムの標準実装だけを使用してください。 <li><strong>よく知られたセキュリティ プロトコルを使用する:</strong> 認証データを保護するときは、SSL、IPSec、Kerberosなど、よく知られ、試験されたプロトコルのみを使用します。 独自のプロトコルは設計しないでください。多くの場合、設計者が気付かない欠陥があります。 <li><strong>プレーン テキストの Credential 情報をソルトでハッシュする:</strong> ハッシュにソルトを使用すればパスワードごとに異なる値が追加されます。攻撃者は各インスタンスを直接攻撃しなければならなくなります。 可能であれば、ソルトを攻撃者から離しておきます。そうすることで、攻撃者がハッシュされたデータにアクセスできたとしても、攻撃に必要な作業の量が大幅に増えます。 Credential 情報は設定のたびに一意の保存された値でハッシュするか、ユーザー名、システムまたはアプリケーションの一意の ID、パスワードの設定時刻など、既知の値の組み合わせを利用することができます。 一意の値はいくぶんか安全ですが、重要なことは、複数のユーザーが使用する場合、または同じユーザーが繰り返し、あるいはシステムをまたいで使用する場合、同じ Credential 情報に異なるハッシュ値を与えることです。 <li><strong>データを不必要に開示しない:</strong> 認証データへのアクセスは、絶対にアクセスが必要なユーザーにだけ、暗号化された、またはハッシュされたデータを与えます。</li></li></li></li>
  </ul>
  <h1>その他のリソース</h1>
  <ul>
    <li>総当たり攻撃に関する詳細は、Wikipedia の<a href="http://en.wikipedia.org/wiki/Brute_force_attack">Brute Force Attacks</a>を参照してください。 </li>
  </ul>
  <h1>関連する項目</h1>
  <ul>
    <li>
      <a href="/article/cd4ccbbb-be9c-4ff4-8b20-d116819b634b">ガイドライン: 安全な鍵の保管場所を使用する</a>
      <li>
        <a href="/article/5b641c0a-a63a-4524-8ce8-432150e6df6d">ガイドライン: 可能な場合、Web ユーザーに Windows 認証を利用する</a>
        <li>
          <a href="/article/b37c3c66-f503-4695-b93d-f50a20915e7d">ガイドライン: 二要素認証の利用を考慮する</a>
          <li>
            <a href="/article/63e628e0-c4bb-42c5-a549-7cd112cad81e">ガイドライン: 屈強な SQL パスワードを強制する</a>
            <li>
              <a href="/article/485a8261-d637-4a47-8643-de094828bf56">ガイドライン: パスワード更新を強制する</a>
              <li>
                <a href="/article/e1992e93-39c6-4508-9b16-0e07b0939c37">ガイドライン: 接続文字列を保護する</a>
                <li>
                  <a href="/article/de3e4477-e2b0-40a5-91f6-b3dab65667fb">ガイドライン: パスワードを安全に保存する</a>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>