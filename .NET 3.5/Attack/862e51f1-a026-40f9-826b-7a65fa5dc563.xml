<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1119438168" Content_Hash="-1512529274">
  <Metadata>
    <Id>862e51f1-a026-40f9-826b-7a65fa5dc563</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>HTTP セッション ハイジャック攻撃</Title>
    <Category>認証</Category>
    <Phase>設計</Phase>
    <Technology> 任意</Technology>
    <Type>攻撃</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>適用先</h1>
  <p>すべての Web アプリケーション。</p>
  <h1>説明</h1>
  <p>HTTP はステートレスなので、Web アプリケーションは<strong>認証セッション ID</strong>を使用して、同じユーザーからの複数のリクエストの間でのステートを追跡します。 セッション ID は通常、長い、ランダムに生成された英数字の文字列です。 セッション ID は、ユーザーが最初に認証されたときに作成され、割り当てられます。 セッション ID はサーバーに保存され、通常は、ユーザーが Web アプリケーションを使用している限り "アライブ" に保たれ、ユーザーがログアウトするか、事前定義された非アクティブな期間の後にセッションがタイムアウトすると、消去されます。 セッション ID は様々な手段で特定のユーザーと関連付けられます。最も一般的にはクッキーを設定することによります。 一部のアプリケーションは、隠されたフォーム変数を使用すること、または単にセッション ID をすべてのページ URLに付加することを試みます。しかしこれは、セッション ハイジャック攻撃をより簡単にするものになります。</p>
  <p>有効なセッション ID を入手するか、生成することにより、攻撃者は、そのセッションと関連づけられたユーザーとして Web アプリケーションと対話することができます。 これはセッション ハイジャック攻撃と呼ばれます。 他の形式のハイジャックとは異なり、この場合、元々のユーザーがアプリケーションと対話することは妨げられません。そのため検知するのが困難です。</p>
  <p>古いセッション ID を消去しなかった場合、またはタイムアウト期間を設定しなかった場合、アプリケーションは<a href="/article/43c19a37-285d-4cdd-a43b-bdea78eb1686">HTTP 反復攻撃</a> の脆弱性を持ったままになります。また、セッション ID が容易に推測できるものであれば、HTTP リクエストを反復しなくても、セッション ハイジャック攻撃を実行することが可能です。</p>
  <p>この攻撃を実行するためにセッション ID を得る方法としては、3 通りのものがあります。</p>
  <ol>
    <li>
      <strong>盗む: </strong>セッション ID は様々な方法で盗まれることがあります。次のようなものがあります。<ul></ul><li><strong>ブルート フォース:</strong> 攻撃者は、ランダムに生成した、またはID が部分的に予測できる場合には可能な ID についての知識を基に生成した、多数の ID を試みることがあります。</li></li>
  </ol>
  <h1>影響</h1>
  <ul>
    <li>特権の昇格<li>機微情報の損失</li></li>
  </ul>&lt; <h1>脆弱性</h1><ul><li>貧弱な、または予測可能なセッション識別子<li>セッション タイムアウトが長いこと<li>セキュアでないコミュニケーション チャンネル</li></li></li></ul><h1>対策</h1><ul><li><strong>セッション識別子としてランダム性の高い数値を使用します:</strong>  (GUID のような) ランダム性の高い数値は、攻撃者が推測するのを困難、または不可能にします。 同時にセッション ID の個数は十分少なくすることが重要です。これは、攻撃者がランダムにセッション ID を推測できる可能性を十分に小さくするためです。 たとえば、どの時点でも有効なセッションが数百個だけであれば、32 ビットのセッション ID は受け入れ可能です。しかし、数百万のセッションが同時に有効になり得るのであれば、ランダムなセッション ID を推測するのは比較的に容易になります。このような場合には、64 ビットまたはさらに長いセッション ID を使用するべきです。 一方で、システムのアーキテクチャが、攻撃者がセッション ID を非常に高速に、たとえばマシンごとに毎秒数百または数千試行することが可能なものであれば、セッション ID ごとの探索スペースはずっと大きくしなければなりません。1 個の有効な ID ごとに、少なくとも数十億の可能な ID が存在するというスケールが必要です。 <li><strong>セッション ID を IP アドレスと結びつけます:</strong>これは、ある種の攻撃を防ぎます。しかし、モバイル ユーザーの場合、繰り返し再認証が求められることになる可能性があります。 このトレードオフが受け入れられる場合、このことは攻撃者が、被害者と同じ IP アドレスを持って攻撃しなければならないことを意味します。これはネットワーク ポジショニングでの彼らの柔軟性を大きく制限し、セッション情報を盗むためのクロス サイト スクリプティングのような手段の効果性を減少させるものとなるでしょう。 <li><strong>短いセッション タイムアウト ウィンドウを使用する:</strong> これは、セッション ID が短時間だけ有効であるようにし、その後再認証が必要になるようにします。 攻撃者が盗んだセッション ID をすぐに使用せず、ユーザーがセッションをすぐに終了するのであれば、短いセッション ID  タイムアウトにより、セッションは保護されます。 これは公共ターミナルなどのコンテキストで特に重要です。 <li><strong>セッション ID を URL に含めないようにする:</strong>セッション ID をURL に埋め込むと、ある状況では攻撃者がそれらをインターセプトするのがずっと容易になります。 ブラウザーは、そのページのコンテンツをロードするとき、またはそこからリンクをたどってゆくときに、ページのリファラー URL 内で、自動的にセッション ID を渡します。これにより、攻撃者が必要とするすべての情報が提供される可能性があります。 <li><strong>セキュアなコミュニケーション チャンネルを確立します:</strong> SSL または IPSec を暗号化とともに使用して、セキュアなコミュニケーション チャンネルを確立することは、HTTP セッション ID を保護する点で、最も効果的な方法の 1 つです。 IPSec は、必要とされる管理上のオーバーヘッドのため、インターネット ユーザーにはあまり適していません。SSL がほとんどのアプリケーションで最も論理的な選択です。 しかし、証明書の扱いなどの通常の問題に加えて、SSL をセキュアな部分とセキュアでない部分のあるサイトで使用する場合には、十分な注意を払う必要があります。 セッション ID が有効で、サイトのセキュアな部分から機微情報を取得することができる場合、サイトのセキュアでない部分と対話する際、セッション ID がセキュアでないとマークされており、サイトのセキュアな部分に再度入る際に再認証が強制されるのでない限り、それを決してプレーンテキストで送信してはなりません。</li></li></li></li></li></ul><h1>その他のリソース</h1><ul><li>ハイジャックの機構と攻撃の防止についての詳細は、次を参照してください。<a href="http://www.microsoft.com/technet/technetmag/issues/2005/01/SessionHijacking/">Web 上の盗難: セッション ハイジャックを防止する</a></li></ul><h1>関連する項目</h1><ul><li><a href="/article/254ddab5-ecd2-4e05-a2b0-861e970bc0d9">ガイドライン: セッション クッキーを保護する</a><li><a href="/article/bd63d4b0-205d-4d95-9022-86a3f0af5232">ガイドライン: 認証資格を送信する際には SSL を使用する</a><li><a href="/article/254ddab5-ecd2-4e05-a2b0-861e970bc0d9">ガイドライン: セッション クッキーを保護する</a><li><a href="/article/bd63d4b0-205d-4d95-9022-86a3f0af5232">ガイドライン: 認証資格を送信する際には SSL を使用する</a><li><a href="/article/5b641c0a-a63a-4524-8ce8-432150e6df6d">ガイドライン: 可能な場合は Web ユーザーに対して Windows の認証を使用する</a><li><a href="/article/b37c3c66-f503-4695-b93d-f50a20915e7d">ガイドライン: 2 要素認証を使用することを考慮する</a></li></li></li></li></li></li></ul>]]></Data>
  </Content>
</TeamMentor_Article>