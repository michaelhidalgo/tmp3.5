<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1946259373" Content_Hash="-1484428830">
  <Metadata>
    <Id>92fed6bc-b075-486f-9a25-d77fddd6cf13</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>DoS攻撃</Title>
    <Category>アプリケーションの状態</Category>
    <Phase>設計</Phase>
    <Technology> 任意</Technology>
    <Type>攻撃</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>適用先</h1>
  <p>すべてのアプリケーションとすべてのネットワーキング デバイス</p>
  <h1>説明</h1>
  <p>攻撃者は、アプリケーションやデバイスがユーザーからの有効な要求に応答するのを止めさせることで、DoS攻撃の状況を作り出そうとします。 攻撃者は、悪意のある入力をアプリケーションに送信するか、アプリケーションの機能を利用して設計上の欠陥をエクスプロイトし、正当なユーザーへのDoS攻撃を引き起こします。</p>
  <p>悪意のある入力がアプリケーションに次の動作を引き起こします。</p>
  <ol>
    <li>1 組のデータを無期限に処理するか、デッドロックの状態に入る – 結果的にサービスが過度にビジーになり、他の正当な要求に応答できなくなります。<li>大量のリソースを消費する – システム上のリソースが少ないと、非常に少数の正当な要求にしか対処できないか、まったく対処できなくなることがあります。<li>エラーにより強制終了する – クラッシュが起こった場合、サービスは他の正当な要求にサービスを提供できなくなります。</li></li></li>
  </ol>
  <p>DoS攻撃の状態は、完全に正当な入力によっても発生することがあります。 悪意のないユーザーが偶発的に正当なデータを大量に入力した場合、アプリケーションは他の正当な要求への応答を停止することがあります。 正当な入力がDoS攻撃を引き起こす別の例は、サービスの可用性を侵害する目的で、悪意のあるユーザーが受け入れ可能な入力を大量に繰り返し送信する場合です。</p>
  <p>アプリケーションの機能が利用され、設計上の欠陥がエクスプロイトされる攻撃の例が<a href="/article/e0ebf8be-838c-4762-8c44-0d90adf63aef">アカウント ロックアウト攻撃</a>です。</p>
  <p>別の種類のDoS攻撃には、DDoS、つまり分散DoS攻撃があります。 この攻撃では、悪意のあるユーザーが多数のマシンを乗っ取り、大量の正当な要求を使用してサービスのすべてのリソースを消費しようとします。 これは防ぐのが非常に難しい攻撃です。攻撃者は、正当な要求と悪意をもって生成された要求が区別できないような方法で、大量の負荷を連続して作り出すためです。</p>
  <h1>影響</h1>
  <p>DoS攻撃の直接的な影響は、他のユーザーがアプリケーションやサービスを利用できなくなり、ビジネス機会が失われる可能性が出てくることです。 DoS攻撃の影響はしばしば過小評価されています。 確かにこのような攻撃では、データを盗んだり、より高い特権を持つユーザーになりすましたりできないので、攻撃者が直接的な経済的利益を得ることにおいては無効です。 そのため、多くの人は、DoS攻撃はただ迷惑であるに過ぎないと考えています。 しかしながら、それは大きな間違いです。 歴史的に見て、DoS攻撃は非常に効果的であり、Web プレゼンスに大きく依存しているアプリケーションから何百万ドルも奪ってきました。</p>
  <h1>脆弱性</h1>
  <p>アプリケーションやデバイスの性質によっては、DoS 問題を引き起こす原因が数え切れないくらいあります。 DoS を引き起こす最も一般的な脆弱性の例を以下に示します。</p>
  <ul>
    <li>
      <p>
        <strong>入力検証がないか、十分でない。</strong> 適切な入力検証がないと、攻撃者はDoS攻撃を引き起こすデータをアプリケーションに送信できます。 入力検証の欠如により DoS 状況を引き起こす攻撃の例としては以下のようなものがあります。</p>
      <ul>
        <li>整数アンダーフロー攻撃を受けると、アプリケーションはシステム上で過度のメモリを消費します。</li>
      </ul>
      <li>
        <p>
          <strong>共有リソースの不適切な利用。</strong> 特権の低いユーザー (匿名ユーザーまたはゲスト ユーザーなど) やプロセスに、他のユーザー (認証されたユーザーやメンバー ユーザー) が利用する限られたリソースや特権レベルの高いプロセスの共有を許すと、リソースの競合を引き起こし、結果的に、特権のあるユーザーやプロセスへのサービスが拒否されることがあります。 以下は限られたリソースの例です。</p>
        <ul>
          <li>ストレージ: 無許可のユーザーが何らかの方法である形式のデータをサーバ ストレージに保存するようにアプリケーションに指示できる場合、このリソースを他の正式なユーザーから奪う可能性があります。 ホスト サーバにディスク領域がなくなると、オペレーティングシステムが不安定になったり、パフォーマンスが低下したり、さらにはシステムがクラッシュすることさえあります。 プロセスがシステムの利用可能なメモリと利用可能なプロセス メモリのいずれかを使い尽くすと、ホストやプロセスが最低でも不安定な状態に陥ります。 システムがクラッシュしない場合でも、メモリが利用可能になるまで新しい要求は処理されません。 <li>プロセッサ時間: DoS攻撃の多くは単に、 CPU 時間を過度に消費するシステムへのルートを見つけ、そのルートを何回も取ります。 ネットワーキング デバイスでは、より高いレベルでパケット フィルタリングが行われ、ハードウェアのアクセラレーターの代わりに CPU を介してパケットを送信することをデバイスに強制するときにこれが発生します。 複雑なフォーマットのデータを受け取ったり、送られたデータを解釈したりするアプリケーションは特にこの種の攻撃に対して脆弱です。 多くの場合、この種類のアプリケーションは少量のデータに非常に多くの時間を使うことになります。 ここでは入力検証でさえも懸案事項になります。複雑な正規表現 (regex) はしばしば、入力の照合に関して非常に効率が悪く、通常よりも桁違いに時間がかかります。 <li>TCP ポート: ネットワーク ポートがサービスを提供できる同時接続数は限られています。 これを考慮すると、攻撃者が繰り返しポートに大量の接続を同時に行うと、サービスの可用性が侵害されます。 認証がなければ、ポートの匿名接続は一定時間有効になります (ポートのタイムアウト値がいくつに設定されていても)。 これにより、攻撃者はポートに連続的に接続し、他の正当なユーザーへのサービスを妨害します。 <li>接続プールとその他のリソース: ほとんどのシステムで一般的に制約される上位レベルのリソースがたくさんあります。データベース サーバへの接続プールが主要な例です。 その他の例としては、ファイル システムのアイノード、名前付きパイプ、システム制約のある同様のリソースがあります。</li></li></li></li>
        </ul>
        <li>
          <p>
            <strong>失敗するときに安全な方法をとらないこと。</strong> サービスは失敗を予想し、処理するように構成するべきです。 企業の目標は攻撃によるダウンタイムを軽減することです。 クラッシュ時にサービスが自動的に再起動するような設計戦略であれば、ダウンタイムが大幅に軽減します。</p>
        </li>
      </li>
    </li>
  </ul>
  <h1>対策</h1>
  <ul>
    <li>入力のタイプ、長さ、書式を適切に検証すれば、アプリケーションが強化され、DoSを引き起こす攻撃に対抗できます。 下記の関連項目セクションにある入力検証のガイドラインを参照してください。 <li>特定の要求に対するリソースのレベルがその要求を行うユーザーの特権レベルに直接合致するように、共有リソースを監視してください。 匿名ユーザーには共有リソースの消費を少ししか許さないか、まったく許さないようにします。一方で、特権ユーザーには制約を与えません。 アプリケーションの性質にもよりますが、アプリケーション内でリソース活用のログをきちんと取れば役に立つ場合があります。</li></li>
  </ul>
  <h1>例</h1>
  <p>この種類の攻撃の 1 つに SYN フラッド攻撃があります。攻撃者は自動化されたプログラムを利用し、大量の TCP SYN 要求をサーバに送り、サーバの保留接続キューをいっぱいにします。 サーバの接続キューがいっぱいになると、正当な接続ができなくなります。</p>
  <p>別の例としては、アプリケーションがユーザーにスクリプトその他の解釈されるテキストの送信を許す場合があります。 攻撃者がスクリプトを送信し、そのスクリプトによって、アプリケーションが無限ループに入ったり、マシンのすべてのリソースを消費したりして、正当な作業ができなくなるようにすることができます。</p>
  <h1>その他のリソース</h1>
  <ul>
    <li>
      <a href="http://en.wikipedia.org/wiki/Denial-of-service_attack">http://en.wikipedia.org/wiki/Denial-of-service_attack</a>
      <li>
        <a href="http://www.cert.org/tech_tips/denial_of_service.html">http://www.cert.org/tech_tips/denial_of_service.html</a>
      </li>
    </li>
  </ul>
  <h1>関連する項目</h1>
  <ul>
    <li>
      <a href="/article/fc33dfc5-5210-4656-bc27-e43b16c3c89e">ガイドライン: ログ スロットルを検討する</a>
      <li>
        <a href="/article/fab1733c-61d7-46a8-88c6-2617a643c0d9">ガイドライン: データベース アクセスには最小限の特権のアカウントを利用する</a>
      </li>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>