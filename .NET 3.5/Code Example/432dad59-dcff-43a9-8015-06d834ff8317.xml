<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-126541231" Content_Hash="1368665938">
  <Metadata>
    <Id>432dad59-dcff-43a9-8015-06d834ff8317</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>新しいプロセスを .NET アプリケーションからセキュアに実行する</Title>
    <Category>スレッディング</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>コード例</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>ASP.NET 3.5</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用先</h1>
  <ul>
    <li>C# </li>
  </ul>
  <h1>概要</h1>
  <p>このコード スニペットの目的は、実行中の .NET アプリケーション内で異なるユーザー アカウントの下で新しいプロセスを実行する方法を示すことです。</p>
  <h1>目的</h1>
  <ul>
    <li>実行中のアプリケーション内から新しいプロセスを安全に実行<li>DPAPI で暗号化されたプロセスを実行するために必要な Credential 情報のセキュアなストレージおよび取得<li>「最小限の特権」 モードでアプリケーションを展開し、重要タスクを実行するために別の特権コンポーネントを使用する</li></li></li>
  </ul>
  <h1>シナリオ</h1>
  <ul>
    <li>アプリケーション コンポーネントは、異なるランタイム コンポーネントにのみ存在する機能にアクセスする必要がある<li>アプリケーションは、時折、特権機能へのアクセスを必要とするが、全体的なセキュリティを強化するには権限の低いセキュリティ コンテキストを使用したい</li></li>
  </ul>
  <h1>ソリューションの例</h1>
 <pre>// Execute a process under another user account, making<br /> // use of credentials stored in the DPAPI<br />static public void ExecuteProcess(string fullProcessPath) {<br />    // Retrieve the user and password from the registry and decrypt<br />    byte[] encryptedUser = Registry.GetValue(@"HKEY_CURRENT_USER\ProcessExecCreds", "User", null) as byte[];<br />    byte[] encryptedPass = Registry.GetValue(@"HKEY_CURRENT_USER\ProcessExecCreds", "Pass", null) as byte[];<br />    string user = Encoding.ASCII.GetString(ProtectedData.Unprotect(encryptedUser, null, DataProtectionScope.CurrentUser));<br />    string pass = Encoding.ASCII.GetString(ProtectedData.Unprotect(encryptedPass, null, DataProtectionScope.CurrentUser));<br />    SecureString securepass = new SecureString();<br />    foreach(char b in pass.ToCharArray()) {<br />                securepass.AppendChar(b);<br />    }<br />    // Execute a process as our stored user account<br />    // This process will run a simple batch file that outputs the runtime account name<br />    Process process = new Process();<br />    process.StartInfo.UseShellExecute = false;<br />    process.StartInfo.RedirectStandardOutput = true;<br />    process.StartInfo.RedirectStandardError = true;<br />    process.StartInfo.CreateNoWindow = true;<br />    // Set the working directory to a value the user will be able to access<br />    process.StartInfo.FileName = fullProcessPath;<br />    process.StartInfo.WorkingDirectory = @"C:\";<br />    process.StartInfo.UserName = user;<br />    process.StartInfo.Password = securepass;<br />    process.Start();<br />    string output = process.StandardOutput.ReadToEnd();<br />    Console.WriteLine(output);<br />}</pre>
  <h1>問題の例</h1>
  <p>以下の例は、実行中の実行可能ファイルによって定義されたユーザー コンテキスト内でプロセスの単純な実行を行います。 例は以下のとおりです。</p>
 <pre>// Start my process with a given argumentProcess.Start("MyProc.exe", @"MyArg");</pre>
  <ul>
    <li>親アプリケーションは実行されたプロセスと同じ特権レベルで実行する必要がある<li>プロセスのパスが完全には指定されておらず、Process.Start コールをトロイの木馬に対してより脆弱にする</li></li>
  </ul>
  <p>この例に示されていない他の問題的な実践：</p>
  <ul>
    <li>アプリケーションは、異なるユーザー コンテキストを利用してプロセスを実行しますが、Credential 情報は平文でファイルまたはデータベースに保存されます。</li>
  </ul>
  <h1>テスト ケース</h1>
  <p>上記のサンプル コードを活用するプロジェクトには、以下のクラスをインクルードする必要があります。</p>
 <pre>using System.Diagnostics;<br />using System.IO;<br />using System.Runtime.InteropServices;<br />using System.Security;<br />using System.Security.AccessControl;<br />using System.Security.Cryptography;<br />using Microsoft.Win32;</pre>
  <p>以下のコードを実行し、DPAPI とソリューション メソッドを組み合わせて使用してレジストリに Credential 情報のセットを保存し、指定されたユーザーとしてコマンドを実行してください。 例のテストケースは "whoami" を実行</p>
  <p> コマンドを使用してフォルダの内容をリストします。 </p>
 <pre>static void Main(string[] args){<br />    // prompt for credentials and store in the registry using DPAPI<br />    StoreUserCreds();<br />    // retrieve the credentials from the DPAPI and run a process<br />    ExecuteProcess(@"whoami.exe");<br />}<br />// This method provides a mechanism for storing credentials<br /> // for a runtime process in the registry using the DPAPI.<br /> static public void StoreUserCreds(){<br />    // Obtain username and password for the account<br />    Console.Write(@"Enter user name for process execution: ")<br />;    string user = Console.ReadLine();<br />    Console.Write("Enter password for this user name: ");<br />    string pass = Console.ReadLine();<br />    // Convert the username and passwords to byte arrays and encrypt<br />     // the data by using the DPAPI ProtectedData class.<br />     byte[] encryptedUser = ProtectedData.Protect(<br />                    UnicodeEncoding.ASCII.GetBytes(user),<br />                     null,<br />                     DataProtectionScope.CurrentUser);<br />    byte[] encryptedPass = ProtectedData.Protect(<br />                    UnicodeEncoding.ASCII.GetBytes(pass),<br />                     null,<br />                     DataProtectionScope.CurrentUser);<br />    // Create a security context for a new key that we will use to store<br />     // the credentials that will restrict access to only the application user.<br />    string userEnv = Environment.UserDomainName + "\\" + Environment.UserName;<br />    RegistrySecurity security = new RegistrySecurity();<br />    RegistryAccessRule rule = new RegistryAccessRule(userEnv,<br />            RegistryRights.FullControl,<br />            InheritanceFlags.ContainerInherit,<br />            PropagationFlags.None,<br />            AccessControlType.Allow);<br />    security.AddAccessRule(rule);<br />    // Create a new registry key and apply the security context<br />     Registry.CurrentUser.CreateSubKey("ProcessExecCreds",<br />             RegistryKeyPermissionCheck.ReadWriteSubTree,<br />             security);<br />    // Write the encrypted credentials into the registry<br />    Registry.SetValue(@"HKEY_CURRENT_USER\ProcessExecCreds", "User", encryptedUser);<br />    Registry.SetValue(@"HKEY_CURRENT_USER\ProcessExecCreds", "Pass", encryptedPass);<br />}</pre>
  <h1>期待される結果</h1>
  <p>次の出力は、 "vm-win2003\Administrator"としてテストケースを実行することによって取得された</p>
 <pre>Enter user name for process execution: joeuser<br />Enter password for this user name: joeuser1234<br />vm-win2003\joeuser</pre>
  <h1>詳細情報</h1>
  <p>他の潜在的に悪意のあるアプリケーションがレジストリでこの鍵にアクセスして復号できないように、コードは MachineKey の対象範囲の代わりに CurrentUser の対象範囲を使用します。 これで、追加のセキュリティが提供されますが、他のアプリケーションとの相互運用性が低下します。 アプリケーション間で Credential 情報データを共有する必要がある場合、MachineKey の対象範囲の使用を検討してください。</p>
  <h1>その他のリソース</h1>
  <ul>
    <li>Process クラス参照: <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemdiagnosticsprocessclassstarttopic.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemdiagnosticsprocessclassstarttopic.asp</a></li>
  </ul>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>