<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-958749743" Content_Hash="1832754268">
  <Metadata>
    <Id>f9999659-3883-4ee5-9111-18e493e856a2</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>3DES を使用してブロック暗号で文字列を解読する</Title>
    <Category>暗号化</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>コード例</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用対象</h1>
  <ul>
    <li>C# </li>
  </ul>
  <h1>概要</h1>
  <p>このコードの目的は、対称ブロック暗号を適切に使用してアプリケーション内のテキストの文字列を復号化することです。 このサンプルコードは、主に他のアプリケーションとの下位互換性のために使用され、コードの新しい実装では AES に置き換える必要がある、トリプル DES の使用方法を示します。</p>
  <h1>目的</h1>
  <ul>
    <li>安全でない、または信頼されない通信チャネルを介して伝送されるデータの機密性を提供する。 <li>ユーザーまたはアプリケーションによって必要とされるまでストレージ内のデータの機密性を提供するために</li></li>
  </ul>
  <h1>シナリオ</h1>
  <ul>
    <li>アプリケーション開発者は、ストレージ内または伝送中のデータの機密性を必要としている。 <li>3DES は、新しい NIST 標準暗号化であるAES を実装していないアプリケーションとやりとりするための下位互換性を必要とする実装でのみ使用されるべきです。</li></li>
  </ul>
  <h1>ソリューションの例</h1>
 <pre>public static string DecryptString(string ciphertext, byte[] sKey, byte[] sIV){<br />    // The default 3DES key size under the .NET framework is 192 (168).  The following<br />    // call will create a 3DES crypto provider and create a random initialization<br />    // vector and key. The crypto mode defaults to CBC ensuring the proper chaining<br />     // of data to mitigate repetition of cipher text blocks.<br />    TripleDESCryptoServiceProvider tdes = (TripleDESCryptoServiceProvider)TripleDESCryptoServiceProvider.Create();<br />    //Set secret key For 3DES algorithm.<br />    tdes.Key = sKey;<br />    //Set initialization vector.<br />    tdes.IV = sIV;<br />    //Create a memorystream to which we'll decrypt our input string<br />    MemoryStream ms = new MemoryStream();<br />    CryptoStream ecs = new CryptoStream(ms, tdes.CreateDecryptor(), CryptoStreamMode.Write);<br />    //Because the input string is passed in as a Base64 encoded value we decode prior writing to<br />     //the decryptor stream.<br />    ecs.Write(Convert.FromBase64String(ciphertext), 0, Convert.FromBase64String(ciphertext).Length);<br />    ecs.Close();<br />    return ASCIIEncoding.ASCII.GetString(ms.ToArray());<br />}</pre>
  <h1>問題の例</h1>
  <p>以下の例は、いくつかの一般的なセキュア コーディング問題を含む復号ルーチンの実装を示しています。</p>
 <pre>public static string ProblematicDecryptString(string ciphertext)<br />{<br />    TripleDESCryptoServiceProvider tdes = (TripleDESCryptoServiceProvider)TripleDESCryptoServiceProvider.Create();<br />    //Set secret key For 3DES algorithm.<br />    tdes.Key = ASCIIEncoding.ASCII.GetBytes("ASAMPLEKEYWEUSETOENCRYPT");<br />    //We don't use an IV because the book doesn't show us an example using a<br />     //more secure, chained mode!<br />    // tdes.IV = ASCIIEncoding.ASCII.GetBytes("SAMPLEIV");<br />    //Set encryption mode to an unchained value (because the book says so!)<br />    tdes.Mode = CipherMode.ECB;<br />    //Create a memorystream to which we'll decrypt our input string<br />    MemoryStream ms = new MemoryStream();<br />    CryptoStream ecs = new CryptoStream(ms, tdes.CreateDecryptor(), CryptoStreamMode.Write);<br />    //Because the input string is passed in as a Base64 encoded value we decode prior writing to<br />     //the decryptor stream.<br />    ecs.Write(Convert.FromBase64String(ciphertext), 0, Convert.FromBase64String(ciphertext).Length);<br />    ecs.Close();    return ASCIIEncoding.ASCII.GetString(ms.ToArray());<br />}</pre>
  <ul>
    <li>平文の暗号鍵は、ソースコードやコンパイルされたコードへのアクセス権を持つすべてのユーザーが抽出することが可能<li>弱い暗号化（非ランダム）鍵の使用は、辞書攻撃を使ってブルートフォース（総当たり）されかねない<li>安全でない暗号モード（ECB）は、CBC および他の連鎖モードがそうであるように、後続ブロックへのフィードバックなく単独に各ブロックの暗号化を 64 ビットで実行します。 攻撃者は、ブロックを再配置するか、観察していた前のブロックに置き換えることができます <li>ECB モードが初期化ベクトルを利用せず、各プレーンテキスト値に同一の暗号化された値を生成します。 したがって攻撃者は、暗号化されたブロック内のパターンを観察して、既知のプレーンテキスト攻撃を行うことができます (注記: 初期化ベクトルは非公開のままにしておく必要はありませんが、プレーンテキストの暗号化されたそれぞれの値に対してランダムでなければなりません)。</li></li></li></li>
  </ul>
  <h1>テスト ケース</h1>
  <p>上記のサンプル コードを活用するプロジェクトには、以下のクラスをインクルードする必要があります。</p>
 <pre>using System;<br />using System.Text;<br />using System.IO;<br />using System.Security.Cryptography;</pre>
  <p>以下のテスト ケースは、DecryptString 関数の使用を示しています。</p>
 <pre>static void Main(string[] args)<br />{<br />    string enc, p2, probenc, probp2 = null;<br />    TripleDESCryptoServiceProvider tdes = (TripleDESCryptoServiceProvider)TripleDESCryptoServiceProvider.Create();<br />    // Test case for string encryption routines<br />    string p1 = "the quick brown fox jumped over the lazy dog";<br />    // Run our test case multiple times to demonstrate different IV / encrypted text for each<br />    // iteration in when using proper crypto modes.<br />    Console.Out.WriteLine("Solution test cases - notice varied output for static input");<br />    Console.Out.WriteLine("-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");<br />    for (int i = 0; i &lt; 5; i++)<br />    {<br />        tdes.GenerateIV();<br />        enc = EncryptString(p1, tdes.Key, tdes.IV);<br />        Console.WriteLine("Encrypted text #{0}: " + enc, i);<br />        p2 = DecryptString(enc, tdes.Key, tdes.IV);<br />        Console.WriteLine("Plaintext #{0}: " + p2, i);<br />        if (!p1.Equals(p2))<br />        {<br />            Console.Error.WriteLine("Decryption failed");<br />        }<br />    }<br />    // Now run out problem test cases<br />    Console.Out.WriteLine("Problem test cases - notice repetitive encrypted value");<br />    Console.Out.WriteLine("-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");<br />    for (int i = 0; i &lt; 5; i++)<br />    {<br />        probenc = ProblematicEncryptString(p1);<br />        probp2 = ProblematicDecryptString(probenc);<br />        Console.WriteLine("Encrypted text #{0}: " + probenc, i);<br />        Console.WriteLine("Plaintext #{0}: " + probp2, i);<br />    }<br />}</pre>
  <ul>
    <li>このテスト ケースでは、3DES 暗号鍵および初期化ベクトルは、TripleDESCryptoServiceProvider.Create() への呼び出し中に無作為に選択されます。 <li>現実世界では、実行鍵および IV はアプリケーション コード内のデータ保護 API から取得されるべきです。データ保護 API の使用を示すコードの例を参照してください。</li></li>
  </ul>
  <h1>期待される結果</h1>
 <pre>Solution test cases - notice varied output for static input-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-<br />Encrypted text #0: f9n80d72AC1oD2b9a8yux/66UKaquzQLvQIV0A5xmtqded6hOKY5WFmcqtXOa0KH<br />Plaintext #0: the quick brown fox jumped over the lazy dog<br />Encrypted text #1: jloSmkMYW7TWXgnNKiNw/JCzzjIwm1K9DeyaFBbMfO9IOMMFcg9s0x917Bm0mBgg<br />Plaintext #1: the quick brown fox jumped over the lazy dog<br />Encrypted text #2: zpRBQWz8ntpONAS+4tJKgEC88ntgj5esTizWUH4h9sQKkZDxxJ4qM6Y9yEugGH8c<br />Plaintext #2: the quick brown fox jumped over the lazy dog<br />Encrypted text #3: 4ssPSATxEbOBucRtbDcHq7SLurzknsZijpcMTg0puMthnPmI93mrbRQgfvOzbJEk<br />Plaintext #3: the quick brown fox jumped over the lazy dog<br />Encrypted text #4: sxKZ3VDJP6SZw/IwznpH1VgR+rEYozcsntVJ6pnw75YqD7xb/WW+3+3xeT4Q7Pf+<br />Plaintext #4: the quick brown fox jumped over the lazy dog<br />Problem test cases - notice repetitive encrypted value-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-<br />Encrypted text #0: z+0N6RlMZ2FLwaSQLDkyIHaxEsirAX+68xE2cwZcHqh2CyE1zjjoGfMSTnnxOIVO<br />Plaintext #0: the quick brown fox jumped over the lazy dog<br />Encrypted text #1: z+0N6RlMZ2FLwaSQLDkyIHaxEsirAX+68xE2cwZcHqh2CyE1zjjoGfMSTnnxOIVO<br />Plaintext #1: the quick brown fox jumped over the lazy dog<br />Encrypted text #2: z+0N6RlMZ2FLwaSQLDkyIHaxEsirAX+68xE2cwZcHqh2CyE1zjjoGfMSTnnxOIVO<br />Plaintext #2: the quick brown fox jumped over the lazy dog<br />Encrypted text #3: z+0N6RlMZ2FLwaSQLDkyIHaxEsirAX+68xE2cwZcHqh2CyE1zjjoGfMSTnnxOIVO<br />Plaintext #3: the quick brown fox jumped over the lazy dog<br />Encrypted text #4: z+0N6RlMZ2FLwaSQLDkyIHaxEsirAX+68xE2cwZcHqh2CyE1zjjoGfMSTnnxOIVO<br />Plaintext #4: the quick brown fox jumped over the lazy dog</pre>
  <h1>詳細情報</h1>
  <ul>
    <li>テスト ケースは、ユーザー コード内に実装されているデータ保護 API を使用して暗号鍵を安全に保存して取得することを想定しています。</li>
  </ul>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>