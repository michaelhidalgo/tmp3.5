<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1290881191" Content_Hash="-798229849">
  <Metadata>
    <Id>78797748-84f0-408c-90d7-22ed784143ee</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>パラメータ化クエリをセキュア データベース アクセスに使用する</Title>
    <Category>データ アクセス</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>コード例</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用対象</h1>
  <ul>
    <li>C# <li>サーバサイド<li>SQL Server</li></li></li>
  </ul>
  <h1>概要</h1>
  <p>このコード スニペットの目的は、ユーザー提供アプリケーション入力に依存するデータベース操作に、追加のセキュリティを加えるために、パラメータ化された引数を使用してデータベース クエリを構築する方法を示すことです。</p>
  <h1>目的</h1>
  <ul>
    <li>潜在的な SQL インジェクション攻撃から保護しながら、データベース ステートメントにユーザー入力を組み込む<li>データベース操作の実装時にクエリ ロジックを定義し修正する</li></li>
  </ul>
  <h1>シナリオ</h1>
  <ul>
    <li>アプリケーションは、データベース クエリで任意のフォームのユーザー入力を利用する必要があります<li>アプリケーションは、データベース クエリで他のデータベースやコード操作からの出力を使用する必要があります</li></li>
  </ul>
  <h1>ソリューションの例</h1>
 <pre>static void ParameterizedDBQuery(string sParam){<br />    // Create a new database connection using Integrated Security<br />    string connectionString = "Initial Catalog=snippets;Data Source=vm-win2003\\sqlexpress;<br />			Integrated Security=SSPI;";<br />    SqlConnection cn = new SqlConnection(connectionString);<br />    // Create a new SQL Command object with our query<br />    // Note the syntax for our parameter field, "first"<br />    SqlCommand sqlCommand = new SqlCommand("SELECT first, last FROM people WHERE first = @first", cn);<br />    // Create a new SqlParameter object, which will contain the argument value that we wish to query<br />    // When creating the parameter we specify the parameter name, type of column in the database<br />    // and length of the argument we are passing to the query.<br />    sqlCommand.Parameters.Add("@first", SqlDbType.VarChar, sParam.Length).Value = sParam;<br />    // Open connection to the server and execute query, returning a data reader<br />    cn.Open();<br />    SqlDataReader reader = sqlCommand.ExecuteReader();<br />    while (reader.Read())<br />                Console.WriteLine("Result: " + reader.GetString(0) + " " + reader.GetString(1));<br />    // Close Reader and Connection.<br />    reader.Close();<br />    cn.Close();<br />}</pre>
  <h1>問題の例</h1>
  <p>以下の例では、文字列結合を使用して、動的にデータベース クエリを作成しています。 </p>
 <pre>string sParam = Request["first_name"];<br />// Create a new database connection using Integrated Security<br />string connectionString = "Initial Catalog=snippets;Data Source=vm-win2003<br />        \\sqlexpress;Integrated Security=SSPI;";<br />SqlConnection cn = new SqlConnection(connectionString);<br />// Create a new SQL Command object with our query<br />// Dynamically generate SQL query using passed parameter<br />SqlCommand sqlCommand = new SqlCommand("SELECT first, last FROM people<br />		 WHERE first = '" + sParam + "'", cn);<br />// Open connection to the server and execute query, returning a data readercn.Open();<br />SqlDataReader reader = sqlCommand.ExecuteReader();<br />while (reader.Read())<br />            Console.WriteLine("Result: " + reader.GetString(0) + " " + reader.GetString(1));<br />// Close Reader and Connection.reader.Close();<br />cn.Close();</pre>
  <ul>
    <li>コードは、データベース クエリに組み込む前に "first_name" の CGI データを最初に検証しません<li>SqlCommand オブジェクトは、ユーザー入力を含む動的に生成された文字列を利用するため、この操作はSQL インジェクションに対して脆弱です。 たとえば、次のsParam 値は以下を引き起こすことがある</li></li>
  </ul>
 <pre>  in the deletion of the entire application database from the<br />   environment:<br />        abcxyz';<br /> drop database snippets; -- </pre>
  <ul>
    <li>この例は、インライン SELECT ステートメントを示しています。 上記のように、ユーザー入力が動的に組み込まれている場合、ストアド プロシージャが使用されていても SQL インジェクションを受ける可能性があるかもしれません</li>
  </ul>
  <h1>テスト ケース</h1>
  <p>上記のサンプル コードを活用するプロジェクトには、以下のクラスをインクルードする必要があります。</p>
 <pre>using System.Data;<br />using System.Data.SqlClient;</pre>
  <p>テスト ケースでは、以下の 2 つの手順を行う必要があります。</p>
  <ol>
    <li>
      <p>このクエリで使用される "people" テーブルを SQL Server に追加するために、つぎの CREATE テーブルコマンドを実行します。</p>
 <pre>CREATE TABLE [dbo].[People]([first] [varchar](50) <br />COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[last] [varchar](50) <br />COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[email] [varchar](max) <br />COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[phone] [nchar](15) <br />COLLATE SQL_Latin1_General_CP1_CI_AS NULL)</pre>
      <li>
        <p>以下のテスト ケース コードを実行します。 </p>
 <pre>static void Main(string[] args){<br />     ParameterizedDBQuery("Elvin");<br />}</pre>
      </li>
    </li>
  </ol>
  <h1>期待される結果</h1>
 <pre>Result: Elvin Jones</pre>
  <h1>詳細情報</h1>
  <ul>
    <li>ユーザー入力は、常に ”汚染” されていると考える必要があります。データベース クエリを含むあらゆる種類の操作を行うためにアプリケーションによって受け入れられる前に、既知の、および想定されている値または文字のセットと比較して検証しなければなりません。 </li>
  </ul>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>