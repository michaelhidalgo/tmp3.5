<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="-404079704" Content_Hash="1122352331">
  <Metadata>
    <Id>0ca3726d-5ff3-42b8-90ce-d11ba809da1e</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>AES を使用するブロック暗号を介したファイルの復号</Title>
    <Category>暗号化</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>コード例</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用対象</h1>
  <ul>
    <li>C# </li>
  </ul>
  <h1>概要</h1>
  <p>このコードの目的は、対称ブロック暗号の適切な使用を示すことです。 このテスト ケースは、現在の NIST 暗号化標準という位置付けの AES (Rijndael) を利用します。</p>
  <h1>目的</h1>
  <ul>
    <li>安全でない、または信頼されない通信チャネルを介して伝送されるファイルの機密性を提供する。 <li>ユーザーまたはアプリケーションが必要とするまでストレージのファイルの機密性を提供するために</li></li>
  </ul>
  <h1>シナリオ</h1>
  <ul>
    <li>アプリケーション開発者は、ストレージ内または伝送中のファイルの機密性を必要としている。</li>
  </ul>
  <h1>ソリューションの例</h1>
 <pre>public static void DecryptFile(string sInputFilename, <br />		string sOutputFilename, string sKey, string sIV){<br />     // The default AES key size under the .NET framework is 256.  The following<br />     // call will create an AES crypto provider and create a random initialization<br />     // vector and key. The crypto mode defaults to CBC ensuring the proper chaining<br />      // of data to mitigate repetition of cipher text blocks.<br />     Rijndael rijndaelAlg = Rijndael.Create();<br />     //Set secret key For AES algorithm.<br />     rijndaelAlg.Key = ASCIIEncoding.ASCII.GetBytes(sKey);<br />     //Set initialization vector.<br />     rijndaelAlg.IV = ASCIIEncoding.ASCII.GetBytes(sIV);<br />     //Create a file stream to read the encrypted file back.<br />     FileStream fsCiphertext = new FileStream(sInputFilename, FileMode.Open, FileAccess.Read);<br />     //Create an AES decryptor<br />     ICryptoTransform aesdecrypt = rijndaelAlg.CreateDecryptor();<br />     //Create crypto stream set to read and do an AES decryption transform on incoming bytes.<br />     CryptoStream cipherstream = new CryptoStream(fsCiphertext, aesdecrypt, CryptoStreamMode.Read);<br />     //Write the contents of the decrypted file.<br />     StreamWriter fsPlaintext = new StreamWriter(sOutputFilename);<br />     fsPlaintext.Write(new StreamReader(cipherstream).ReadToEnd());<br />     fsPlaintext.Flush();<br />     fsCiphertext.Close();<br />     fsPlaintext.Close();<br />}</pre>
  <h1>問題の例</h1>
  <p>以下の例は、いくつかの一般的なセキュア コーディング問題を含む復号ルーチンの実装を示しています。</p>
 <pre>public static void ProblematicFileDecrypt(string sInputFilename, string sOutputFilename){<br />    Rijndael rijndaelAlg = Rijndael.Create();<br />    // Set secret key For AES algorithm.<br />    rijndaelAlg.Key = ASCIIEncoding.ASCII.GetBytes("_A_SAMPLE_KEY_WE_USE_TO_ENCRYPT_");<br />    // We don't use an IV because the book doesn't show us an example using a<br />     // more secure, chained mode!<br />    //  rijndaelAlg.IV = ASCIIEncoding.ASCII.GetBytes("SAMPLEIV");<br />    // Set encryption mode to an unchained value (because the book says so!)<br />    rijndaelAlg.Mode = CipherMode.ECB;<br />    // Create a file stream to read the encrypted file back.<br />    FileStream fsCiphertext = new FileStream(sInputFilename, FileMode.Open, FileAccess.Read);<br />    // Create an AES decryptor<br />    ICryptoTransform aesdecrypt = rijndaelAlg.CreateDecryptor();<br />    //Create crypto stream set to read and do an AES decryption transform on incoming bytes.<br />    CryptoStream cipherstream = new CryptoStream(fsCiphertext, aesdecrypt, CryptoStreamMode.Read);<br />    //Write the contents of the decrypted file.<br />    StreamWriter fsPlaintext = new StreamWriter(sOutputFilename);<br />    fsPlaintext.Write(new StreamReader(cipherstream).ReadToEnd());<br />    fsPlaintext.Flush();<br />    fsCiphertext.Close();<br />    fsPlaintext.Close();<br />}</pre>
  <ul>
    <li>平文の暗号鍵は、ソースコードやコンパイルされたコードへのアクセス権を持つすべてのユーザーが抽出することが可能<li>弱い暗号鍵の使用は、辞書攻撃を使ってブルートフォース（総当たり）されかねない<li>安全でない暗号モード (ECB) は、CBC およびその他のチェーン モードが行うように、各ブロックの暗号化を、後続のブロックにフィードバックを送らずに、128 ビットで個別に行います。 攻撃者は、ブロックを再配置するか、観察していた前のブロックに置き換えることができます <li>ECB モードが初期化ベクトルを利用せず、各プレーンテキスト値に同一の暗号化された値を生成します。 したがって攻撃者は、暗号化されたブロック内のパターンを観察して、既知のプレーンテキスト攻撃を行うことができます (注記: 初期化ベクトルは非公開のままにしておく必要はありませんが、プレーンテキストの暗号化されたそれぞれの値に対してランダムでなければなりません)。</li></li></li></li>
  </ul>
  <h1>テスト ケース</h1>
  <p>上記のサンプル コードを活用するプロジェクトには、以下のクラスをインクルードする必要があります。</p>
 <pre>using System;<br />using System.Text;<br />using System.IO;<br />using System.Security.Cryptography;</pre>
  <p>以下のテスト ケースは、DecryptFile 関数の使用を示しています。</p>
 <pre>static void Main(string[] args){<br />    Console.Out.WriteLine("Encrypting: " + args[0] + " to file: " + args[1]);<br />    EncryptFile(args[0], args[1], sKey, sIV);<br />    Console.Out.WriteLine("Decrypting: " + args[1] + " to file: " + args[0] + ".new");<br />    DecryptFile(args[1], args[0] + ".new", sKey, sIV);<br />}</pre>
  <ul>
    <li>sKey と sIV はアプリケーション コード内の DataProtection API から取得される</li>
  </ul>
  <h1>期待される結果</h1>
  <p>復号化されたファイルの値を元のファイルのテキストと比較すると、同じテキストになります。</p>
  <h1>詳細情報</h1>
  <ul>
    <li>.NET Framework では AES のデフォルトは 256 ビット鍵サイズですが、現在の暗号方式標準でも、多くの暗号実装が使用するデフォルトの 128 ビット鍵サイズがまだ安全であると考えられています。 <li>テスト ケースは、ユーザー コード内に実装されているデータ保護 API を使用して暗号鍵を安全に保存して取得することを想定しています。</li></li>
  </ul>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>