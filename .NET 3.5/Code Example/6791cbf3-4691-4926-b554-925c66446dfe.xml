<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1944982914" Content_Hash="1298669878">
  <Metadata>
    <Id>6791cbf3-4691-4926-b554-925c66446dfe</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>アプリケーションおよび ASP.NET 3.5 Cookie をセキュアに設定する</Title>
    <Category>Cookie</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>コード例</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用対象</h1>
  <ul>
    <li>C# </li>
  </ul>
  <h1>概要</h1>
  <p>このコードは、アプリケーション Cookieおよび ASP.NET セッション識別子Cookie内のセキュア Cookie モードの使用を示しています。 アプリケーションCookieの適切な設定モードと属性は、セッション ハイジャックを防ぐために不可欠です。</p>
  <h1>目的</h1>
  <ul>
    <li>セッション ハイジャックにつながることが多いため、アプリケーション Cookie の機密性を提供し、認可されていないユーザーに公開されていないことを確認する<li>HTTPS への、 アプリケーション Cookie とASP.NET セッション識別子のアクセスを制限する<li>望ましいアプリケーションや使用シナリオだけに Cookie の対象範囲を制限する<li>Cookie が JavaScript からアクセスできることを防ぐ（クロスサイト スクリプティングの存在下でセッション ハイジャックにつながる可能性がある）</li></li></li></li>
  </ul>
  <h1>シナリオ</h1>
  <ul>
    <li>Cookie は、セッション状態を維持するために使用される<li>アプリケーションはCookie (内部 ASP.NET セッション ID、またはアプリケーション固有Cookie) を使用し、認証などのユーザーからの情報、またはセッション ライフタイム中のある時点のその他のフォーム データを収集する。 <li>アプリケーションには SSL が必要だが、HTTP インスタンス用にも設定される。 </li></li></li>
  </ul>
  <h1>ソリューションの例</h1>
  <p>
    <strong>シナリオ #1: HTTP だけが構成され、複数アプリケーションがホスト上に展開されている ( Cookie パスの制限例)</strong>
  </p>
 <pre>protected void SetAppCookie(string name, string value, string path)<br />{<br />&nbsp;&nbsp;&nbsp; HttpCookie appCookie = new HttpCookie(name);</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp; // Provide a specific path under which our cookies are permitted<br />&nbsp;&nbsp;&nbsp; // to be accessed<br />&nbsp;&nbsp;&nbsp; // <br />&nbsp;&nbsp;&nbsp; // Application paths should be as specific as possible:<br />&nbsp;&nbsp;&nbsp; //&nbsp; a sample application path might be: /secure/<br />&nbsp;&nbsp;&nbsp; appCookie.Path = path;</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp; // The following cookie setting ensures that cookies are not made available within client-side<br />&nbsp;&nbsp;&nbsp; // script code thus mitigating the risk of unsafe access through attacks such as XSS.</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp; // This feature is generally available in versions of Internet Explorer 6 and above<br />&nbsp;&nbsp;&nbsp; appCookie.HttpOnly = true;</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp; // Set our cookie value<br />&nbsp;&nbsp;&nbsp; appCookie.Value = value;<br />&nbsp;&nbsp;&nbsp; Response.Cookies.Add(appCookie);<br />}</pre>
  <p>
    <br />以下のコードを含む Page_Load で</p>
 <pre>protected void Page_Load(object sender, EventArgs e)<br />{<br />&nbsp;&nbsp;&nbsp; ...<br />&nbsp;&nbsp;&nbsp; SetAppCookie("GUID", Guid.NewGuid().ToString(), "/secure/");<br />&nbsp;&nbsp;&nbsp; ...<br />}</pre>
  <p>
    <strong>シナリオ #2: HTTP だけが構成され、複数アプリケーションが Cookie 値を共有する必要がある ( Cookie ドメインの制限例)</strong>
  </p>
  <p>以下の例では、アプリケーションが www.codesamples.microsoft.com 上に展開されていることを想定しており、secure.codesamples.microsoft.com からアクセスできるCookieを設定する必要があります。</p>
 <pre>protected void SetAppCookie(string name, string value, string path, string domain)<br />{<br />&nbsp;&nbsp;&nbsp; HttpCookie appCookie = new HttpCookie(name);</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp; // Provide a specific path under which our cookies are permitted<br />&nbsp;&nbsp;&nbsp; // to be accessed<br />&nbsp;&nbsp;&nbsp; // <br />&nbsp;&nbsp;&nbsp; // Application paths should be as specific as possible:<br />&nbsp;&nbsp;&nbsp; //&nbsp; a sample application path might be: /secure/<br />&nbsp;&nbsp;&nbsp; appCookie.Path = path;</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp; // The following cookie setting ensures that cookies are not made available within client-side<br />&nbsp;&nbsp;&nbsp; // script code thus mitigating the risk of unsafe access through attacks such as XSS.</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp; // This feature is generally available in versions of Internet Explorer 6 and above<br />&nbsp;&nbsp;&nbsp; appCookie.HttpOnly = true;</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp; // Set our cookie domain. This should only be used when applications deployed<br />&nbsp;&nbsp;&nbsp; // in a particular domain need to share values for some purpose (E.g. single sign-on)<br />&nbsp;&nbsp;&nbsp; appCookie.Domain = domain;</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp; // Set our cookie value<br />&nbsp;&nbsp;&nbsp; appCookie.Value = value;<br />&nbsp;&nbsp;&nbsp; Response.Cookies.Add(appCookie);<br />}</pre>
  <p>
    <br />以下のコードを含む Page_Load で</p>
 <pre>protected void Page_Load(object sender, EventArgs e)<br />{<br />&nbsp;&nbsp;&nbsp; ...<br />&nbsp;&nbsp;&nbsp; SetAppCookie("GUID", Guid.NewGuid().ToString(), "/secure/", ".codesamples.microsoft.com");<br />&nbsp;&nbsp;&nbsp; ...<br />}</pre>
  <p>
    <strong>シナリオ #3: HTTP と HTTPS が同じホスト上に共存しており、ユーザーは HTTPS インスタンスの下でログインする必要がある</strong>
  </p>
  <p>以下の例では、HTTP で展開されているウェルカム ページを持つ、主に HTTPS で使用されるサイトを想定しています。 ランディング ページから、ユーザーはログインとセッションの残りのために、SSL サイト インスタンスにリダイレクトされます。</p>
 <pre>protected void SetAppCookie(string name, string value, string path,<br />				 string domain, bool httponly, bool secure)<br />{<br />&nbsp;&nbsp;&nbsp; HttpCookie appCookie = new HttpCookie(name);</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp; // Provide a specific path under which our cookies are permitted<br />&nbsp;&nbsp;&nbsp; // to be accessed<br />&nbsp;&nbsp;&nbsp; // <br />&nbsp;&nbsp;&nbsp; // Application paths should be as specific as possible:<br />&nbsp;&nbsp;&nbsp; //&nbsp; a sample application path might be: /secure/<br />&nbsp;&nbsp;&nbsp; if (path != null)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; appCookie.Path = path;<br />&nbsp;&nbsp;&nbsp; }</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp; // The following cookie setting ensures that cookies are not made available within client-side<br />&nbsp;&nbsp;&nbsp; // script code thus mitigating the risk of unsafe access through attacks such as XSS.</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp; // This feature is generally available in versions of Internet Explorer 6 and above<br />&nbsp;&nbsp;&nbsp; appCookie.HttpOnly = httponly;</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp; // The secure cookie mode ensures that cookies are set with the "secure" mode cookie flag,<br />&nbsp;&nbsp;&nbsp; // which makes cookies unavailable through standard HTTP. On sites where both HTTP and HTTPS<br />&nbsp;&nbsp;&nbsp; // is enabled non-secure cookies may be leaked in the event a user browses to the non-HTTPS<br />&nbsp;&nbsp;&nbsp; // instance of the site.<br />&nbsp;&nbsp;&nbsp; appCookie.Secure = secure;</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp; // Set our cookie domain. This should only be used when applications deployed<br />&nbsp;&nbsp;&nbsp; // in a particular domain need to share values for some purpose (E.g. single sign-on)<br />&nbsp;&nbsp;&nbsp; if (domain != null)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; appCookie.Domain = domain;<br />&nbsp;&nbsp;&nbsp; }</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp; // Set our cookie value<br />&nbsp;&nbsp;&nbsp; appCookie.Value = value;<br />&nbsp;&nbsp;&nbsp; Response.Cookies.Add(appCookie);</pre>
 <pre>
    <br />}</pre>
  <p>
    <br />以下のコードを含む Page_Load で</p>
 <pre>
    <br />protected void Page_Load(object sender, EventArgs e)<br />{<br />&nbsp;&nbsp;&nbsp; ...<br />&nbsp;&nbsp;&nbsp; // We need not set the application host as it will default to the current host<br />&nbsp;&nbsp;&nbsp; SetAppCookie("GUID", Guid.NewGuid().ToString(), null, null, true, true);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; ...<br />}</pre>
  <h1>問題の例</h1>
  <p>
    <strong>シナリオ #1: HTTP だけが構成され、複数アプリケーションがホスト上に展開されている ( Cookie パスの制限例)</strong>
  </p>
  <p>以下の例は、デフォルト パス値なしでCookieを設定しています。</p>
 <pre>Guid guid = Guid.NewGuid();<br />HttpCookie chocolateChip = new HttpCookie("GUID");</pre>
 <pre>
    <br />// Set our cookie value<br />chocolateChip.Value = guid.ToString();<br />Response.Cookies.Add(chocolateChip);</pre>
  <ul>
    <li>クロスサイト スクリプティングが展開されたアプリケーション内に存在する場合、JavaScript や VBScript のようなクライアント スクリプティング言語内で Cookie へのアクセスを制限する HttpOnly Cookie フラグと共に Cookie が 設定されていないため、ユーザーのセッションはハイジャックされる可能性があります。<li>Cookieが / のコンテキストで設定されています。これは、同じ仮想ホスト上に展開された任意のサイトが、/secure/ に展開されたアプリケーションによって保存された値にアクセスできることを意味しています。<li>同じ仮想ホスト上に展開されているアプリケーション ディレクトリの外にあるその他のページにクロスサイト スクリプティングがある場合は、おびき寄せによる攻撃 (Luring Attack) を通してユーザーのセッションをハイジャックするために使用される可能性があります。</li></li></li>
  </ul>
  <p>
    <strong>シナリオ #2: HTTP だけが構成され、複数アプリケーションが Cookie 値を共有する必要がある ( Cookie ドメインの制限例)</strong>
  </p>
  <p>以下の例は、過剰な許可を持つドメイン値なしでCookieを設定しています。</p>
 <pre>Guid guid = Guid.NewGuid();<br />HttpCookie chocolateChip = new HttpCookie("GUID");<br />chocolateChip.Domain = ".microsoft.com";</pre>
 <pre>
    <br />// Set our cookie value<br />chocolateChip.Value = guid.ToString();<br />Response.Cookies.Add(chocolateChip);</pre>
  <ul>
    <li>クロスサイト スクリプティングが展開されたアプリケーション内に存在する場合、JavaScript や VBScript のようなクライアント スクリプティング言語内で Cookie へのアクセスを制限する HttpOnly Cookie フラグと共に Cookie が 設定されていないため、ユーザーのセッションはハイジャックされる可能性があります。<li>Cookieが .microsoft.com のコンテキストで設定されています。これは、アプリケーション脆弱性を含む可能性のある xss.microsoft.com などの任意のサイトが、アプリケーションによって設定されたクッキーにアクセスできることを意味しており、セッション ハイジャックにつながるおそれがあります。 <li>Cookieはできる限りの制限が適用されているドメインに設定されなければなりません。 2 つのアプリケーションがCookie値を共有する必要がある場合は、アプリケーション サーバによる使用のために、専用のサブドメインをプロビジョニングすると有益である可能性があります。</li></li></li>
  </ul>
  <p>
    <strong>シナリオ #3: HTTP と HTTPS が同じホスト上に共存しており、ユーザーは HTTPS インスタンスの下でログインする必要がある</strong>
  </p>
  <p>以下の例は、セキュア Cookie フラグを使用した設定の失敗を示しています。</p>
 <pre>Guid guid = Guid.NewGuid();<br />HttpCookie chocolateChip = new HttpCookie("GUID");</pre>
 <pre>
    <br />// Set our cookie value<br />chocolateChip.Value = guid.ToString();<br />Response.Cookies.Add(chocolateChip);</pre>
  <ul>
    <li>クロスサイト スクリプティングが展開されたアプリケーション内に存在する場合、JavaScript や VBScript のようなクライアント スクリプティング言語内で Cookie へのアクセスを制限する HttpOnly Cookie フラグと共に Cookie が 設定されていないため、ユーザーのセッションはハイジャックされる可能性があります。<li>Cookieがセキュア クッキー フラグで設定されておらず、セッション ハイジャックにつながるおそれがあります。 ユーザーがログインした後に、サイトの HTTP インスタンスをブックマークした、またはそれにアクセスした場合、セッション識別子がウェブ サーバに平文で送信されます。 通信を傍受する第三者が、セッション Cookieを使用して、認証を回避し、被害者のセッションをハイジャックする可能性があります。</li></li>
  </ul>
  <h1>テスト ケース</h1>
  <p>上記のサンプル コードを活用するプロジェクトには、以下のクラスをインクルードする必要があります。</p>
 <pre>using System.Web;</pre>
  <p>アプリケーションのニーズを最も満たしているシナリオに応じて、SetApp Cookie メソッドを呼び出すためのソリューション例を参照してください。</p>
  <h1>期待される結果</h1>
  <p>以下の期待される結果は、生の TCP 通信を監視することにより観察できます。</p>
  <p>
    <strong>シナリオ 1 – HTTP レスポンス (Cookieパスの制限) </strong>
  </p>
  <p>ソリューション</p>
 <pre>Set-Cookie: GUID=3de49a03-9957-4a37-ae37-bd3be473b9cf; path=/secure/; HttpOnly</pre>
  <p>問題</p>
 <pre>Set-Cookie: GUID=459d96d9-4b96-4251-9fcf-82a7a769d2f8; path=/</pre>
  <p>
    <strong>シナリオ 2 – HTTP レスポンス (Cookieドメインを制限するが、ホスト間でのCookieの共有が必要) </strong>
  </p>
  <p>ソリューション</p>
 <pre>Set-Cookie: GUID=4453386a-92b1-4e95-a8d7-99e5b828ebcd;<br /> domain=.codesamples.microsoft.com; path=/secure/; HttpOnly</pre>
  <p>問題</p>
 <pre>Set-Cookie: GUID=173705aa-a1cc-494b-92f3-e83cd0e8fe30; domain=.microsoft.com; path=/</pre>
  <p>''' シナリオ 3 - HTTP 応答 (SSL への Cookie だけを制限)</p>
  <p>ソリューション:</p>
 <pre>Set-Cookie: GUID=e4eeedb4-c3a1-44bb-af11-251c3cb10c37; secure; HttpOnly</pre>
  <p>問題:</p>
 <pre>Set-Cookie: GUID=7328f6ba-ad56-4327-9cbd-ae4c8e516d17; path=/</pre>
  <h1>詳細情報</h1>
  <p>ソリューション 3 に加え、ASP.NET セッション Cookieをアプリケーション用のセッション状態の維持に使用する場合は、これを安全に設定することが有益です。 検討中の具体的なサイトに対して、ASP.net web.config ファイル内に "安全" と "httponly" Cookie フラグを設定することができます。 ASP.NET 組み込みセッション オブジェクトに依存している場合は、アプリケーションとアプリケーション サーバのCookieを同じように動作させることが重要です。 次の web.config からのコード サンプルは、「安全」モードと「httponly」 Cookie フラグでの ASP.NET セッション識別子の設定を示しています。</p>
 <pre>   &lt;!-- The following configuration entry ensures that the ASP.NET session identifier is set<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; within the context of a specified domain (ensure that the domain is a fully qualified host<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; whenever possible.</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; httpOnlyCookies ensures that cookies are unavailable to client script code <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (JavaScript/VBScript). This functionality is provided by newer web browser software<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; including Internet Explorer 6 and above</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; requireSSL ensures that the ASP.NET session cookie is not transmitted in the clear when<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a user accesses the site via the plaintext HTTP instance of the site. --&gt;<br />&nbsp;&nbsp;&nbsp; &lt;httpCookies domain="codesamples.microsoft.com"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; httpOnlyCookies="true"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; requireSSL="true"/&gt;<br /></pre>
  <h1>その他のリソース</h1>
  <ul>
    <li>HTTP 要求 Cookie クラス: <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemwebhttprequestclasscookiestopic.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemwebhttprequestclasscookiestopic.asp</a><li>HTTP Cookie: <a href="http://msdn.microsoft.com/library/en-us/wininet/wininet/http_cookies.asp">http://msdn.microsoft.com/library/en-us/wininet/wininet/http_cookies.asp</a><li>Cookie メンバー: <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemnetcookiememberstopic.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemnetcookiememberstopic.asp</a></li></li></li>
  </ul>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>