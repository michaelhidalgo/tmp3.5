<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="714689133" Content_Hash="-174287757">
  <Metadata>
    <Id>b2f7df13-6f13-4603-8788-619dde56d017</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>RSA 公開鍵をファイルからインポートしてメッセージを暗号化する</Title>
    <Category>暗号化</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>コード例</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用対象</h1>
  <ul>
    <li>C# </li>
  </ul>
  <h1>概要</h1>
  <p>このコード スニペットの目的は、RSA 公開鍵を含む XML ファイルの受信者がファイルを読み取り、この鍵を使用して送信者へのメッセージを暗号化する方法を示すことです。</p>
  <h1>目的</h1>
  <ul>
    <li>鍵の所有者のみが復号化して読み取ることができるメッセージを RSA 鍵から安全に生成する。 </li>
  </ul>
  <h1>シナリオ</h1>
  <ul>
    <li>クライアントはサーバに機密の暗号化されたメッセージを送信する必要があるが、それらのメッセージを読み取る必要がない、分散クライアント サーバ アーキテクチャ<li>アプリケーションは、暗号化目的で専用鍵ストアを維持することを望まない</li></li>
  </ul>
  <h1>ソリューションの例</h1>
 <pre>public static byte[] ReadRSAPublicKeyAndEncryptMessage(string xmlKeyData, string fileName){<br />     // Create a new RSA CSP in which to load the public key data from file<br />     RSACryptoServiceProvider yourRSA = new RSACryptoServiceProvider();<br />     yourRSA.FromXmlString(xmlKeyData);<br />     // Encrypt a message and return<br />     byte[] original = Encoding.ASCII.GetBytes("The quick brown fox jumped over the lazy dog");<br />     return(yourRSA.Encrypt(original, false));<br />}</pre>
  <h1>問題の例</h1>
  <p>この例では、問題の例として、ユーザーが公開鍵の所有者にメッセージを送信するために暗号化をまったく行わないと仮定しています。 </p>
  <ul>
    <li>メッセージの送信者と受信者の間のデータ ストリームに攻撃者がアクセスできるときは必ず、そのメッセージ データの機密性は送信中に傍受される可能性があります。 <li>セキュリティ保護されていないワイヤレス ネットワーク、ネットワーク デバイスの管理コンソール、ARP なりすまし、およびポイズニング攻撃はすべて、平文トラフィックを傍受するために悪意のある第三者が使用する可能性のあるメカニズムの例です。 </li></li>
  </ul>
  <h1>テスト ケース</h1>
  <p>上記のサンプル コードを活用するプロジェクトには、以下のクラスをインクルードする必要があります。</p>
 <pre>using System.IO;<br />using System.Security;<br />using System.Security.AccessControl;<br />using System.Security.Cryptography;<br />using System.Text;<br />using Microsoft.Win32;</pre>
  <p>以下のコードを実行して、プレーンテキスト メッセージを確認し、続いて、公開鍵を使用して作成されたメッセージの暗号化バージョンを確認します。</p>
 <pre>static void Main(string[] args){<br />        // Read public key into a string<br />        string publicKeyXml = "&lt;RSAKeyValue&gt;" +<br />    "&lt;Modulus&gt;tnLAgAJwXXxYj+2QPX6q/mHZZf23xSvvovoBlZ1Y7RbTlkY4N2nlcGxfR<br />6mQcTTWKfWShQ7yEaX6rVfhhRhdaHLCsg7g3AmW2BsoBxWUijD81ZeNKyWrw8t0gjnigNR4<br /><br /><br />6+PqO1Xi7R9aA+PgaluhuZBBgJK2wIAlRJSPlTr5OjDr4vJlZiAG/VqmJVXioPfv1QI2hfL<br />M86JgIcrD47L0K44tKwyhAj4PN1nsomjPeb0P9m9t3od/c+yZGKk+iJ1nwQwG02H/EXROaO<br />6YFKb3xijNv69gv+ZLGc+qssXs7Bs7CdzqmQvSylxuXkYz5bQG++raYWm4l056WhtIRG8mqQ==&lt;/Modulus&gt;" +<br />    "&lt;Exponent&gt;AQAB&lt;/Exponent&gt;" +    "&lt;/RSAKeyValue&gt;";<br />        // Encrypt a message using our key and write out the results<br />        string msg = "The quick brown fox jumped over the lazy dog";<br />        byte[] encrypted = ReadRSAPublicKeyAndEncryptMessage(publicKeyXml, msg);<br />        Console.WriteLine("Original:");<br />        Console.WriteLine(msg);<br />        Console.WriteLine("\nEncrypted:");<br />        Console.WriteLine(Convert.ToBase64String(encrypted));<br />}</pre>
  <h1>期待される結果</h1>
  <p>元のテキスト:</p>
 <pre>        The quick brown fox jumped over the lazy dog</pre>
  <p>暗号化されたテキスト:</p>
 <pre>EPiXscCwYg7R/o35sNWqEKsJrdKNx7I6x3RA59IMelpFP8HOhD5qi2XLvuMPpran++4SmRvE69RRLwF1<br />9NbIWv2KUx9FUFa3qWfkAKD1jk/PtgnOWBLM8po3eibs1VkwWxMbcEJrGKEp5eFBle7v66jzmAsxJDlA<br />MNoFfj/U/4CgzalMB09/ZnpBcoCq07NipwHYQxKfanyUfMDUyvfN69sYtdOKodMon6VwA2GRkCv4rN4V<br />rHO+dloWL0hJlxgTVp19/X5oMigr3ZhqFURCETGppCS4KZ3uqwpO3LC5smSwLzNBZtdnjUm57OqWaeLo<br />D2GHhhvBdKvAcmYAABFYJw==</pre>
  <h1>詳細情報</h1>
  <p>RSA は、公開鍵 (非対称とも呼ばれる) 暗号化のためのアルゴリズムで、明確な公開鍵と私有鍵を作成します。 暗号化操作は公開鍵を利用し、復号には私有鍵が必要です。 これは、対称鍵暗号方式よりも利点があります。メッセージを解読するために使用される秘密鍵は、メッセージの暗号化をサポートするために受信側と共有する必要がないためです。 </p>
  <p>RSA私有鍵は、個々の公開 RSA 鍵を使用して暗号化されたデータの機密性を維持するために安全に保存する必要があります。 ただし、公開鍵は鍵ペアの所有者が、暗号化されたメッセージをその所有者に送信しようとしている人に自由に配布することができます。 </p>
  <h1>その他のリソース</h1>
  <ul>
    <li>RSACryptoServiceProvider (.NET): <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemsecuritycryptographyrsacryptoserviceproviderclassctortopic.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemsecuritycryptographyrsacryptoserviceproviderclassctortopic.asp</a></li>
  </ul>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>