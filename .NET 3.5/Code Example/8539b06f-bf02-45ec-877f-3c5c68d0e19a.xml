<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="1474861858" Content_Hash="-1807413910">
  <Metadata>
    <Id>8539b06f-bf02-45ec-877f-3c5c68d0e19a</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>コードの接続文字列内の Credential 情報を保護する</Title>
    <Category>データ アクセス</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>コード例</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>ASP.NET 3.5</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用対象</h1>
  <ul>
    <li>C# <li>サーバ側のコード</li></li>
  </ul>
  <h1>概要</h1>
  <p>このコードの目的は、.NET ソース コード内の Windows データ保護 API (DPAPI) を使用してデータベース接続文字列データを暗号化するための代替メカニズムを提供することです。 </p>
  <h1>目的</h1>
  <ul>
    <li>暗号化とアクセス制御の両方を使用してデータベース接続文字列 Credential 情報を保護する<li>暗号選択暗号化モード、鍵生成および鍵管理などの暗号化実装仕様を DPAPI に委託する<li>Windows レジストリにおいて、簡単に回復可能な保護された方法でデータを格納する</li></li></li>
  </ul>
  <h1>シナリオ</h1>
  <ul>
    <li>アプリケーションは ASP.NET を使用しないため、クライアントサーバ型アプリケーションなどの web.config ファイルを保持していない<li>特定のユーザー アカウントへのデータベース Credential 情報アクセスを制限するために、マシン鍵とは対照的に開発者はユーザー ストアを使用したいと考える</li></li>
  </ul>
  <h1>ソリューションの例</h1>
 <pre>public static void StoreConnectionString(string keyName, string valueName, string connectionString){<br />    // Convert the connection string to a byte array<br />    // and encrypt the data by using the DPAPI ProtectedData class.<br />    byte[] encryptedConnStrBytes = ProtectedData.Protect(<br />    UnicodeEncoding.ASCII.GetBytes(connectionString),<br />	     null,<br />     DataProtectionScope.CurrentUser);<br />    // Create a security context for a new key that we will use to store our encrypted connection string.<br />    // The security context will restrict access to only our user.<br />    string user = Environment.UserDomainName + "\\" + Environment.UserName;<br />    RegistrySecurity security = new RegistrySecurity();<br />    RegistryAccessRule rule = new RegistryAccessRule(user,<br />            RegistryRights.FullControl,<br />            InheritanceFlags.ContainerInherit,<br />            PropagationFlags.None,<br />            AccessControlType.Allow);<br />    security.AddAccessRule(rule);<br />    // Actually create the new registry key and apply the security context we just came up with.<br />    RegistryKey key = Registry.CurrentUser.CreateSubKey(keyName,<br />            RegistryKeyPermissionCheck.ReadWriteSubTree,<br />            security);<br />    // Write the encrypted connection string into the registry<br />    key.SetValue(valueName, encryptedConnStrBytes);<br />}</pre>
  <h1>問題の例</h1>
  <p>以下の例では、レジストリを使用して、平文データベース接続文字列を保存しています。</p>
 <pre>// Database connection stringstring connStr = "Initial Catalog=snippets;<br />Data Source=vm-win2003\\sqlexpress;Integrated Security=SSPI;";<br />// Store connection string in the registry<br />RegistryKey key = Registry.CurrentUser.CreateSubKey("PlaintextConnectionString");<br />key.SetValue("ConnStr", connStr);</pre>
  <ul>
    <li>平文の接続文字列の詳細は、レジストリにアクセス可能なあらゆるユーザーが参照できる<li>混合モード認証シナリオでは、Credential 情報はレジストリにアクセス可能なあらゆるユーザーが参照できる<li>レジストリ ACL が欠如すると、すべてのシステム ユーザーがこのレジストリ鍵へのアクセスを読み取れるようになる</li></li></li>
  </ul>
  <h1>テスト ケース</h1>
  <p>上記のサンプル コードを活用するプロジェクトには、以下のクラスをインクルードする必要があります。</p>
 <pre>using System;<br />using System.Collections.Generic;<br />using System.Security.Cryptography;<br />using System.Security.AccessControl;<br />using System.Text;using Microsoft.Win32;</pre>
  <p>以下のテスト ケース メソッドは、暗号化されたレジストリ データを保存して取得し、結果をコンソールに出力します。</p>
 <pre>public static string RetrieveConnectionString(string keyName, string valueName){<br />    // Read the encrypted connection string value from the registry<br />     RegistryKey key = Registry.CurrentUser.OpenSubKey(keyName);<br />    byte[] encryptedConnStrBytes = key.GetValue(valueName) as byte[];<br />    // Decrypt the encrypted bytes using DPAPI, convert to string and return<br />    byte[] decryptedConnStrBytes = ProtectedData.Unprotect(<br />             encryptedConnStrBytes,<br />              null,<br />             DataProtectionScope.CurrentUser);<br />    return(UnicodeEncoding.ASCII.GetString(decryptedConnStrBytes));<br />}<br />static void Main(string[] args){<br />    // A sample connection string we might want to store<br />    string stored = "Initial Catalog=snippets;Data Source=vm-win2003\\sqlexpress;Integrated<br />         Security=SSPI;";<br />    Console.WriteLine("Stored String: " + stored);<br />    // Create an instance of our class and pass the string we want to encrypt<br />    StoreConnectionString("EncryptedConnectionString", "CipherText", stored);<br />    // Retrieve from the registry and print to make sure it worked.<br />    // You can also fire up regedit and browse to HKEY_CURRENT_USER\EncryptedConnectionString<br />    // to see the encrypted bytes.<br />    string retrieved = RetrieveConnectionString("EncryptedConnectionString", "CipherText");<br />    Console.WriteLine("Retrieved String: " + retrieved);<br />}</pre>
  <h1>期待される結果</h1>
 <pre>Stored String: Initial Catalog=snippets;<br />Data Source=vm-win2003\sqlexpress;Integrated Security=SSPI;<br />Retrieved String: Initial Catalog=snippets;<br />Data Source=vm-win2003\sqlexpress;Integrated Security=SSPI;</pre>
  <h1>詳細情報</h1>
  <p>この実装は、マシン鍵ではなく、DPAPI ユーザー鍵を利用します。 つまり、接続文字列は、別のサービス アカウントで実行されている他のアプリケーションによってアクセスされないということです。 </p>
  <p>これにより、接続文字列データを不正に入手しようとする悪意のあるアプリケーション (ウイルスまたはトロイの木馬など) に対してさらなる保護が追加されますが、異なるアカウントで実行されている複数のアプリケーション間で共有する必要があるという問題が残ります。</p>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>