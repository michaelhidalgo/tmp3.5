<?xml version="1.0" encoding="utf-8"?>
<TeamMentor_Article Metadata_Hash="671553061" Content_Hash="-1797327654">
  <Metadata>
    <Id>b58ab197-126d-43e4-a402-b11f12dc5ada</Id>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>Web サービス ペイロードの XML スキーマ検証を実行する</Title>
    <Category>ウェブ サービス</Category>
    <Phase>実装</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>コード例</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>適用対象</h1>
  <ul>
    <li>C# <li>ウェブ サービス</li></li>
  </ul>
  <h1>概要</h1>
  <p>このコード サンプルの目的は、.NET を使用して ウェブ サービス ウェブ メソッドの呼び出し中に受信される XML ペイロードを安全に検証する手法を示すことです。</p>
  <h1>目的</h1>
  <ul>
    <li>予定データに正規表現パターンを使用して強い検証を採用する XML スキーマ検証の使用により、データ検証が誘発する脆弱性を軽減します。<li>ビジネス ロジックを実行する前にまず XML ペイロードの検証を要求することにより、アプリケーション効率を向上させます。</li></li>
  </ul>
  <h1>シナリオ</h1>
  <ul>
    <li>アプリケーション コンポーネントは、異なるランタイム コンポーネントにのみ存在する機能にアクセスする必要がある<li>アプリケーションは、時折、特権機能へのアクセスを必要とするが、全体的なセキュリティを強化するには権限の低いセキュリティ コンテキストを使用したい</li></li>
  </ul>
  <h1>ソリューションの例</h1>
  <p>
    <strong>XML 文字列 BLOB に対してアクションを実行するためのカスタム ウェブ メソッド</strong>
  </p>
 <pre>// The following private members must be defined for this example<br />private int validationErrCnt = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />private string lastError = "";<br />[WebMethod]</pre>
 <pre>
    <br />public bool ProcessValue(string strXML)<br />{<br />&nbsp;&nbsp;&nbsp; string connectionString = "Initial Catalog=snippets;Data Source=winxp\\sqlexpress;Integrated Security=SSPI;";<br />&nbsp;&nbsp;&nbsp; SqlConnection cn = New SqlConnection(connectionString);<br />&nbsp;&nbsp;&nbsp; bool retval = false;<br />&nbsp;&nbsp;&nbsp; try {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create an XmlReaderSettings object since&nbsp; we'll need to add our schema to it<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XmlReaderSettings xrs = new XmlReaderSettings();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create a schema set which we'll use to validate our XML Document against<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XmlSchemaSet xset = new XmlSchemaSet();</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Read in our schema under the web root.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XmlReader xmlschemareader = new XmlTextReader(HttpContext.Current.Request.PhysicalApplicationPath + "<a href="file://\\xsd\\Userschema.xsd">\\xsd\\Userschema.xsd</a>");</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Attribute the XML schema with our schema set<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xset.Add(null, xmlschemareader);</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Finally attach our XML schema set to the reader settings<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xrs.Schemas.Add(xset);</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // We define a Validation Event Handler<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xrs.ValidationEventHandler += new ValidationEventHandler(ValidationEventHandler);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // We want to report warnings as well as errors<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xrs.ValidationFlags = xrs.ValidationFlags | XmlSchemaValidationFlags.ReportValidationWarnings;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Our validation type should be set to schema so we enforce the schema on the document<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xrs.ValidationType = ValidationType.Schema;</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create our XML reader and associate our reader settings<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StringReader sreader = new StringReader(strXML);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XmlReader xmlread = XmlReader.Create(sreader, xrs);</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Lastly load the document which forces a schema validation to be performed in the process<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XmlDocument xmldoc = new XmlDocument();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmldoc.Load(xmlread);</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If our event returns errors (and warnings) throw a new exception with our last error as the message<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (validationErrCnt &gt; 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // FAILED VALIDATION: If we encountered errors while validating the XML</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new Exception(lastError);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // PASSED VALIDATION: Otherwise process our request as normal</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlCommand sqlcmd = new SqlCommand("XMLValidationSample",cn);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlParameter sqlparam = new SqlParameter("@strxml", SqlDbType.VarChar, strXML.Length);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlParameter outparam = new SqlParameter("@retval", SqlDbType.Int);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; outparam.Direction = ParameterDirection.ReturnValue;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlparam.Value = strXML;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlcmd.CommandType = CommandType.StoredProcedure;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlcmd.Parameters.Add(sqlparam);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlcmd.Parameters.Add(outparam);</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cn.Open();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlcmd.ExecuteNonQuery();</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if( Convert.ToInt16(outparam.Value) &gt; 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retval = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cn.Close();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; catch (Exception ex)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Replace following throw with User supplied exception handling code: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; Log exception and perform graceful error handling<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new Exception("Error validating XML: " + ex.Message);<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; // return result<br />&nbsp;&nbsp;&nbsp; return retval;<br />} </pre>
  <p>
    <strong>カスタム定義の XML 検証イベント ハンドラー</strong>
  </p>
 <pre>void ValidationEventHandler(object sender, System.Xml.Schema.ValidationEventArgs args)<br />{<br />&nbsp;&nbsp;&nbsp; validationErrCnt++;<br />&nbsp;&nbsp;&nbsp; if (args.Severity.Equals(XmlSeverityType.Warning))<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lastError = "Warning: " + args.Message;<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; else if (args.Severity.Equals(XmlSeverityType.Error))<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lastError = "Error: " + args.Message;<br />&nbsp;&nbsp;&nbsp; }<br />}</pre>
  <p>
    <strong>パターン一致検証付きのサンプル XML スキーマ</strong>
  </p>
 <pre>&lt;?xml version="1.0" encoding="utf-8"?&gt;</pre>
 <pre>&lt;xs:schema id="UserSchema" targetNamespace="<a href="http://tempuri.org/XMLSchema.xsd">http://tempuri.org/XMLSchema.xsd</a>" <br />	elementFormDefault="qualified" xmlns="<a href="http://tempuri.org/XMLSchema.xsd">http://tempuri.org/XMLSchema.xsd</a>"<br />	 xmlns:mstns="<a href="http://tempuri.org/XMLSchema.xsd">http://tempuri.org/XMLSchema.xsd</a>" xmlns:xs="<a href="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</a>"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name="Users"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:complexType&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:sequence&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element minOccurs="1" maxOccurs="100" name="User"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:complexType&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:sequence&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name="username" type="usernamestring" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name="password" type="passwordstring" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name="name" type="namestring" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element maxOccurs="2" name="streetaddress" type="addressstring" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name="city" type="namestring" /&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name="state" type="statevalue" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name="postalcode" type="postalstring" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name="phone" type="phonestring" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name="ssn" type="ssnstring" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name="emailaddress" type="emailstring" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element minOccurs="0" name="url" type="xs:anyURI" /&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/xs:sequence&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/xs:complexType&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/xs:element&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/xs:sequence&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/xs:complexType&gt;<br />&nbsp; &lt;/xs:element&gt;</pre>
 <pre>&nbsp; &lt;xs:simpleType name="usernamestring"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- Allows word characters [A-Za-z0-9_], single quote, dash and period<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; must be at least two characters long and less than 16 --&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:minLength value="2" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:maxLength value="16" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:pattern value="^[\w-'\.]{2,16}$" /&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp; &lt;/xs:restriction&gt;<br />&nbsp; &lt;/xs:simpleType&gt;<br />&nbsp; &lt;xs:simpleType name="passwordstring"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- Allows word characters [A-Za-z0-9_], single quote, dash and period<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; must be at least two characters long and less than 16 --&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:minLength value="8" /&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:maxLength value="16" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:pattern value="^.*(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*<br />			[`~!@#\$%\^\&\*\(\)-_\=\+\[\{\]\}\\\|;:',&lt;\.&gt;/?]).*$" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/xs:restriction&gt;<br />&nbsp; &lt;/xs:simpleType&gt;<br />&nbsp; &lt;xs:simpleType name="namestring"&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- Names must be at least 2 characters, no more than 128 characters, and consist of<br />&nbsp;&nbsp; alphabetic characters, and may contain hyphens, single quotes, periods and spaces --&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:minLength value="2" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:maxLength value="128" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:pattern value="^[a-zA-Z-'\.\s]{2,128}$" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/xs:restriction&gt;</pre>
 <pre>&nbsp; &lt;/xs:simpleType&gt;<br />&nbsp; &lt;xs:simpleType name="addressstring"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- Since so many different types of address formats we'll do a match against a series <br />&nbsp;&nbsp; of digits (potentially containing punctuation, followed by a series of characters <br />&nbsp;&nbsp; representing the street name and then potentially a type of street and unit number --&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:pattern value="^\d{1,3}.?\d{0,3}\s[a-zA-Z]{2,30}(\s[a-zA-Z]{2,15})?([#\.0-9a-zA-Z]*)?$" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/xs:restriction&gt;</pre>
 <pre>&nbsp; &lt;/xs:simpleType&gt;<br />&nbsp; &lt;xs:simpleType name="statevalue"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- States must be one of our predefined enumeration types and consist of exactly 2 characters --&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:length value="2" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="AL" /&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="AK" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="AR" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="AZ" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="CA" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="CO" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="CT" /&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="DE" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="DC" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="FL" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="GA" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="HI" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="ID" /&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="IL" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="IN" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="IA" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="KS" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="KY" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="LA" /&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="ME" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="MD" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="MA" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="MI" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="MN" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="MS" /&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="MO" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="MT" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="NE" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="NV" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="NH" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="NJ" /&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="NM" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="NY" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="NC" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="ND" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="OH" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="OK" /&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="OR" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="PA" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="RI" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="SC" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="SD" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="TN" /&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="TX" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="UT" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="VT" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="VA" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="WA" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="WV" /&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="WI" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value="WY" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/xs:restriction&gt;<br />&nbsp; &lt;/xs:simpleType&gt;<br />&nbsp; &lt;xs:simpleType name="postalstring"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;xs:restriction base="xs:string"&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- The following US postal code format allows ZIP (5 digit) or ZIP+4 formats<br />&nbsp;&nbsp; as a single string or separated by hyphens --&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:pattern value="^\d{5}[-]?(\d{4})?$" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:minLength value="5" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:maxLength value="10" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/xs:restriction&gt;<br />&nbsp; &lt;/xs:simpleType&gt;</pre>
 <pre>&nbsp; &lt;xs:simpleType name="ssnstring"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- SSNs consist of 9 digits but may contain an optional 2 hyphens --&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:minLength value="9" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:maxLength value="11" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:pattern value="^\d{3}[-]?\d{2}[-]?\d{4}$$" /&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp; &lt;/xs:restriction&gt;<br />&nbsp; &lt;/xs:simpleType&gt;<br />&nbsp; &lt;xs:simpleType name="phonestring"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- The following pattern defines a US formatted telephone number --&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:pattern value="^[01]?[- .]?(\([2-9]\d{2}\)|[2-9]\d{2})[- .]?\d{3}[- .]?\d{4}$" /&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:minLength value="10" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:maxLength value="32" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/xs:restriction&gt;<br />&nbsp; &lt;/xs:simpleType&gt;<br />&nbsp; &lt;xs:simpleType name="emailstring"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;xs:restriction base="xs:string"&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp; &lt;!-- Allows common email address that can start with a alphanumeric char and contain word, <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hyphen and period characters followed by a domain name meeting the same criteria followed <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; by a alpha suffix between 2 and 9 character long --&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:pattern value="^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:minLength value="7" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:maxLength value="256" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/xs:restriction&gt;<br />&nbsp; &lt;/xs:simpleType&gt;</pre>
 <pre>&lt;/xs:schema&gt;</pre>
  <h1>問題の例</h1>
  <p>以下の例は、Web サービス メソッドが受信する未検証 XML の使用を示しています。</p>
 <pre>[WebMethod]<br />public bool ProcessValueNoValidation(string strXML)<br />{<br />&nbsp;&nbsp;&nbsp; try<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create our XML reader and associate our reader settings<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StringReader sreader = new StringReader(strXML);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XmlReader xmlread = XmlReader.Create(sreader);</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Lastly load the document which forces a schema validation to be performed in the process<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XmlDocument xmldoc = new XmlDocument();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmldoc.Load(xmlread);</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlCommand sqlcmd = new SqlCommand("XMLValidationSample", cn);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlParameter sqlparam = new SqlParameter("@strxml", SqlDbType.VarChar, strXML.Length);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlParameter outparam = new SqlParameter("@retval", SqlDbType.Int);</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; outparam.Direction = ParameterDirection.ReturnValue;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlparam.Value = strXML;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlcmd.CommandType = CommandType.StoredProcedure;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlcmd.Parameters.Add(sqlparam);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlcmd.Parameters.Add(outparam);</pre>
 <pre>
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cn.Open();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlcmd.ExecuteNonQuery();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cn.Close();<br />&nbsp;&nbsp;&nbsp; } catch (Exception ex)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new Exception(ex.Message);<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; return true;<br />}</pre>
  <ul>
    <li>strXML 文字列を SQL ストアド プロシージャに渡す前には、XML スキーマ検証は行われない<li>ストアド プロシージャの実装に応じて、SQL インジェクションは可能である(特に、動的 SQL が XML エレメント値から構築され、引数としてファイルまたはデータベースにおける sp_executesql 平文に渡されるインスタンスにおいて)。</li></li>
  </ul>
  <p>その他のセキュアなコーディングに関する問題</p>
  <ul>
    <li>例外をスローすることによるアプリケーション内部の潜在的な情報漏えい</li>
  </ul>
  <h1>ケース</h1>
  <p>上記のサンプル コードを活用するプロジェクトには、以下のクラスをインクルードする必要があります。</p>
 <pre>using System.Web.Services;<br />using System.Web.Services.Protocols;<br />using System.Xml;<br />using System.Xml.Schema;<br />using System.IO;<br />using System.Data;<br />using System.Data.SqlClient;</pre>
  <p>さまざまな XML 文字列を渡すために WebService Studio を利用することにより、サーバの応答動作を監視できます。</p>
  <p>
    <strong>Input XML</strong>
  </p>
  <p>1) </p>
 <pre>&lt;Users xmlns="<a href="http://tempuri.org/XMLSchema.xsd">http://tempuri.org/XMLSchema.xsd</a>"&gt;<br />&nbsp;&nbsp; &lt;User&gt;<br />&nbsp;&nbsp; &nbsp;&lt;username&gt;foobar&lt;/username&gt;<br />&nbsp;&nbsp; &nbsp;&lt;password&gt;pdw123A@1234 &lt;/password&gt;<br />&nbsp;&nbsp; &nbsp;&lt;name&gt;Foo Bar&lt;/name&gt;<br />&nbsp;&nbsp; &nbsp;&lt;streetaddress&gt;&lt;![CDATA[&lt;]]&gt;SCRIPT&lt;![CDATA[&gt;]]&gt;alert(‘XSS’);&lt;![CDATA[&lt;]]&gt;/SCRIPT&lt;![CDATA[&gt;]]&gt;<br />&nbsp;&nbsp; &nbsp;&lt;/streetaddress&gt;<br />&nbsp;&nbsp; &nbsp;&lt;city&gt;Redmond&lt;/city&gt;<br />&nbsp;&nbsp; &nbsp;&lt;state&gt;WA&lt;/state&gt;<br />&nbsp;&nbsp; &nbsp;&lt;postalcode&gt;01234&lt;/postalcode&gt;<br />&nbsp;&nbsp; &nbsp;&lt;phone&gt;1-223-123-1234&lt;/phone&gt;<br />&nbsp;&nbsp; &nbsp;&lt;ssn&gt;123-12-1234&lt;/ssn&gt;<br />&nbsp;&nbsp; &nbsp;&lt;emailaddress&gt;&lt;![CDATA[' or 1=1 or ''=']]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&lt;/emailaddress&gt;<br />&nbsp;&nbsp; &nbsp;&lt;url&gt;http://www.microsoft.com&lt;/url&gt;<br />&nbsp;&nbsp; &lt;/User&gt;<br />&lt;/Users&gt;</pre>
  <p>2) </p>
 <pre>&lt;Users xmlns="<a href="http://tempuri.org/XMLSchema.xsd">http://tempuri.org/XMLSchema.xsd</a> &gt;<br />&nbsp;&nbsp; &lt;User&gt;<br />&nbsp;&lt;username&gt;foobar&lt;/username&gt;<br />&nbsp;&lt;password&gt;pdw123A@1234&lt;/password&gt;<br />&nbsp;&lt;name&gt;Foo Bar&lt;/name&gt;<br />&nbsp;&lt;streetaddress&gt;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<br />	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&lt;/streetaddress&gt;<br />&nbsp;&lt;city&gt;Redmond&lt;/city&gt;<br />&nbsp;&lt;state&gt;WA&lt;/state&gt;<br />&nbsp;&lt;postalcode&gt;01234&lt;/postalcode&gt;<br />&nbsp;&lt;phone&gt;1-223-123-1234&lt;/phone&gt;<br />&nbsp;&lt;ssn&gt;123-12-1234&lt;/ssn&gt;<br />&nbsp;&lt;emailaddress&gt;example@microsoft.com&lt;/emailaddress&gt;<br />&nbsp;&lt;url&gt;http://www.microsoft.com&lt;/url&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/User&gt;<br />&lt;/Users&gt;<br /></pre>
  <h1>期待される結果</h1>
  <h3>1) 未検証の XML リーダーからの出力</h3>
 <pre>Error within stored procedure, during processing. Possible SQL injection</pre>
 <pre>******* Exception Text ******* <br />System.Reflection.TargetInvocationException: Exception has been thrown <br />		by the target of an invocation. ---&gt; System.Web.Services.Protocols.SoapException:<br />System.Web.Services.Protocols.SoapException: Server was unable to <br />		process request. ---&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Exception: The error description is <br />		'An invalid character was found in text content.'.<br />Could not find prepared statement with handle 0.<br />sp_xml_removedocument: The value supplied for parameter number 1 is invalid.<br />The XML parse error 0xc00ce508 occurred on line number 1, near the XML text <br />"&lt;Users xmlns="<a href="http://tempuri.org/XMLSchema.xsd">http://tempuri.org/XMLSchema.xsd</a>"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;User&gt;<br />&nbsp;&nbsp;&nbsp; &nbsp;&lt;username&gt;foobar&lt;/username&gt;<br />&nbsp;&nbsp;&nbsp; &nbsp;&lt;password&gt;pdw123A@1234&lt;/password&gt;<br />&nbsp;&nbsp;&nbsp; &nbsp;&lt;name&gt;Foo Bar&lt;/name&gt;<br />&nbsp;&nbsp;&nbsp; &nbsp;&lt;streetaddress&gt;&lt;![CDATA[&lt;]]&gt;SCRIPT&lt;![CDATA[&gt;]]&gt;alert(".<br />The statement has been terminated.<br />&nbsp;&nbsp; at Service.ProcessValueNoValidation(String strXML) in c:\Documents and Settings\XXX\<br />		My Documents\Visual Studio 2005\WebSites\WebSite2\App_Code\Service.cs:line 130<br />&nbsp;&nbsp; --- End of inner exception stack trace ---<br />&nbsp;&nbsp; at System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message,<br />	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebResponse response, Stream responseStream)<br />&nbsp;&nbsp; at System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)<br />&nbsp;&nbsp; at Service.ProcessValueNoValidation(String strXML)<br />&nbsp;&nbsp; --- End of inner exception stack trace ---<br />&nbsp;&nbsp; at System.Reflection.RuntimeMethodInfo.InternalInvoke(Object obj, <br />		BindingFlags invokeAttr, Binder binder, Object[] parameters,<br />		 CultureInfo culture, Boolean isBinderDefault, Assembly caller, Boolean verifyAccess)<br />&nbsp;&nbsp; at System.Reflection.RuntimeMethodInfo.InternalInvoke(Object obj, BindingFlags invokeAttr, Binder binder,<br />		 Object[] parameters, CultureInfo culture, Boolean verifyAccess)<br />&nbsp;&nbsp; at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, <br />		Object[] parameters, CultureInfo culture)<br />&nbsp;&nbsp; at WebServiceStudio.MainForm.InvokeWebMethod()<br />&nbsp;&nbsp; at WebServiceStudio.MainForm.buttonInvoke_Click(Object sender, EventArgs e)<br />&nbsp;&nbsp; at System.Windows.Forms.Control.OnClick(EventArgs e)<br />&nbsp;&nbsp; at System.Windows.Forms.Button.OnClick(EventArgs e)<br />&nbsp;&nbsp; at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)<br />&nbsp;&nbsp; at System.Windows.Forms.Control.WmMouseUp(Message& m, MouseButtons button, Int32 clicks)<br />&nbsp;&nbsp; at System.Windows.Forms.Control.WndProc(Message& m)<br />&nbsp;&nbsp; at System.Windows.Forms.ButtonBase.WndProc(Message& m)<br />&nbsp;&nbsp; at System.Windows.Forms.Button.WndProc(Message& m)<br />&nbsp;&nbsp; at System.Windows.Forms.ControlNativeWindow.OnMessage(Message& m)<br />&nbsp;&nbsp; at System.Windows.Forms.ControlNativeWindow.WndProc(Message& m)<br />&nbsp;&nbsp; at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)</pre>
  <h3>
    <br />1) 検証済み XML リーダーからの出力</h3>
 <pre>Pattern match validation caught error </pre>
 <pre>******* Exception Text ******* <br />System.Reflection.TargetInvocationException: Exception has been thrown by the target<br />		 of an invocation. ---&gt; System.Web.Services.Protocols.SoapException:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />System.Web.Services.Protocols.SoapException: Server was unable to process request. ---&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />System.Exception: Error validating XML: Error:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />The 'http://tempuri.org/XMLSchema.xsd:emailaddress' element is invalid - The value '' or 1=1 or ''='' is&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />invalid according to its datatype 'http://tempuri.org/XMLSchema.xsd:emailstring' - The Pattern constraint failed.<br />at Service.ProcessValue(String strXML) in c:\Documents and Settings\XXX\My Documents\Visual Studio 2005\WebSites\WebSite2\App_Code\Service.cs:line 97<br />--- End of inner exception stack trace ---<br />at System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream)<br />at System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)<br />at Service.ProcessValue(String strXML)<br />--- End of inner exception stack trace ---<br />at System.Reflection.RuntimeMethodInfo.InternalInvoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters,<br />		 CultureInfo culture, Boolean isBinderDefault, Assembly caller, Boolean verifyAccess)<br />at System.Reflection.RuntimeMethodInfo.InternalInvoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters,<br />		 CultureInfo culture, Boolean verifyAccess)<br />at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)<br />at WebServiceStudio.MainForm.InvokeWebMethod()<br />at WebServiceStudio.MainForm.buttonInvoke_Click(Object sender, EventArgs e)<br />at System.Windows.Forms.Control.OnClick(EventArgs e)<br />at System.Windows.Forms.Button.OnClick(EventArgs e)<br />at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)<br />at System.Windows.Forms.Control.WmMouseUp(Message& m, MouseButtons button, Int32 clicks)<br />at System.Windows.Forms.Control.WndProc(Message& m)<br />at System.Windows.Forms.ButtonBase.WndProc(Message& m)<br />at System.Windows.Forms.Button.WndProc(Message& m)<br />at System.Windows.Forms.ControlNativeWindow.OnMessage(Message& m)<br />at System.Windows.Forms.ControlNativeWindow.WndProc(Message& m)<br />at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)</pre>
  <h3>2) 検証済み XML リーダーからの出力</h3>
 <pre>Pattern match validation caught error </pre>
 <pre>******* Exception Text ******* <br />System.Reflection.TargetInvocationException: Exception has been thrown by the <br />			target of an invocation. ---&gt; System.Web.Services.Protocols.SoapException:<br />System.Web.Services.Protocols.SoapException: Server was unable to process request. ---&gt;<br />System.Exception: Error validating XML: Error:<br />The 'http://tempuri.org/XMLSchema.xsd:streetaddress' element is invalid - <br />The value 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<br />	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' is invalid according<br />to its datatype 'http://tempuri.org/XMLSchema.xsd:addressstring' - The Pattern constraint failed.<br />&nbsp;&nbsp; at Service.ProcessValue(String strXML) in c:\Documents and Settings\XXX\My Documents<br />			\Visual Studio 2005\WebSites\WebSite2\App_Code\Service.cs:line 97<br />&nbsp;&nbsp; --- End of inner exception stack trace ---<br />&nbsp;&nbsp; at System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message,<br />		 WebResponse response, Stream responseStream)<br />&nbsp;&nbsp; at System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)<br />&nbsp;&nbsp; at Service.ProcessValue(String strXML)<br />&nbsp;&nbsp; --- End of inner exception stack trace ---<br />&nbsp;&nbsp; at System.Reflection.RuntimeMethodInfo.InternalInvoke(Object obj, BindingFlags <br />		invokeAttr, Binder binder, Object[] parameters, CultureInfo culture, <br />		Boolean isBinderDefault, Assembly caller, Boolean verifyAccess)<br />&nbsp;&nbsp; at System.Reflection.RuntimeMethodInfo.InternalInvoke(Object obj, BindingFlags <br />		invokeAttr, Binder binder, Object[] parameters, CultureInfo culture,<br />		 Boolean verifyAccess)<br />&nbsp;&nbsp; at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr,<br />		 Binder binder, Object[] parameters, CultureInfo culture)<br />&nbsp;&nbsp; at WebServiceStudio.MainForm.InvokeWebMethod()<br />&nbsp;&nbsp; at WebServiceStudio.MainForm.buttonInvoke_Click(Object sender, EventArgs e)<br />&nbsp;&nbsp; at System.Windows.Forms.Control.OnClick(EventArgs e)<br />&nbsp;&nbsp; at System.Windows.Forms.Button.OnClick(EventArgs e)<br />&nbsp;&nbsp; at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)<br />&nbsp;&nbsp; at System.Windows.Forms.Control.WmMouseUp(Message& m, MouseButtons button, Int32 clicks)<br />&nbsp;&nbsp; at System.Windows.Forms.Control.WndProc(Message& m)<br />&nbsp;&nbsp; at System.Windows.Forms.ButtonBase.WndProc(Message& m)<br />&nbsp;&nbsp; at System.Windows.Forms.Button.WndProc(Message& m)<br />&nbsp;&nbsp; at System.Windows.Forms.ControlNativeWindow.OnMessage(Message& m)<br />&nbsp;&nbsp; at System.Windows.Forms.ControlNativeWindow.WndProc(Message& m)<br />&nbsp;&nbsp; at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)</pre>
  <h3>2) 未検証の XML リーダーからの出力</h3>
 <pre>Request is simply processed without validating results</pre>
 <pre>&lt;?xml version="1.0" encoding="utf-16"?&gt;<br />&lt;soap:Envelope xmlns:soap="<a href="http://schemas.xmlsoap.org/soap/envelope/">http://schemas.xmlsoap.org/soap/envelope/</a>"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:xsi="<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>"<br /> 	xmlns:xsd="<a href="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</a>"&gt;<br />&nbsp; &lt;soap:Body&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ProcessValueNoValidationResponse xmlns="<a href="http://codesamples.microsoft.com/XMLValidationExample/">http://codesamples.microsoft.com/XMLValidationExample/</a>"&gt;</pre>
 <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ProcessValueNoValidationResult&gt;true&lt;/ProcessValueNoValidationResult&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/ProcessValueNoValidationResponse&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/soap:Body&gt;<br />&lt;/soap:Envelope&gt;</pre>
  <h1>詳細情報</h1>
  <p>パターン検証 (既知の適切な文字)、最小・最大長およびバウンド チェック、エレメントの最小/最大発生数を実行する XML スキーマ検証を使用する Web サービスは、アプリケーション ロジックの操作、またはSQL インジェクション、クロスサイト スクリプティング、およびエラー状態の処理の失敗などの、データ検証により誘発される脆弱性をもたらす可能性は著しく低くなります。 このコードの例は、一般的なデータエレメントについて強く定義された正規表現を備えた XSD を使用したタスクを示しています。</p>
  <h1>その他のリソース</h1>
  <ul>
    <li>スキーマを使用した XML の検証: <a href="http://msdn.microsoft.com/library/en-us/cpguide/html/cpconValidationOfXMLWithSchemas.asp">http://msdn.microsoft.com/library/en-us/cpguide/html/cpconValidationOfXMLWithSchemas.asp</a><li>XML リーダーの使用: <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpconReadingXMLWithXmlReader.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpconReadingXMLWithXmlReader.asp</a><li>正規表現 (.NET Framework): <a href="http://msdn2.microsoft.com/en-us/library/hs600312(VS.80).aspx">http://msdn2.microsoft.com/en-us/library/hs600312(VS.80).aspx</a></li></li></li>
  </ul>
  <hr />
  <p>出典: Microsoft patterns & practices guidance</p>]]></Data>
  </Content>
</TeamMentor_Article>